{"version":3,"file":"569.chunk.js?v=8159","mappings":";mfAgBA,IAAIA,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,2BAAwB,EAChC,MACMC,GAAQ,EADET,EAAgBU,EAAQ,OACdC,SAAS,gCAC7BC,EAAkB,QAElBC,EAAAA,GACF,WAAYN,EAAOO,GAAW,UAC1Bb,KAAKM,MAAQA,EACbN,KAAKa,UAAYA,CACpB,IAwCLR,EAAQE,sBAtCFA,GACF,aAAc,UACVP,KAAKc,UAAY,GACjBd,KAAKe,gBAAkB,EACvBf,KAAKgB,cAAgB,GACrBhB,KAAKiB,SAAW,CAACC,EAAOL,KAIpB,IAHAL,EAAM,gBAAiBU,GACvBlB,KAAKc,UAAUK,KAAK,IAAIP,EAAeM,EAAOL,IAC9Cb,KAAKe,iBAAmBG,EACjBL,EAAYb,KAAKc,UAAU,GAAGD,UAAYF,GAE7CX,KAAKe,iBAAmBf,KAAKc,UAAUM,QAAQd,MAEnD,MAAMe,EAAWC,KAAKC,IAAIZ,EAAiBE,GAC3Cb,KAAKgB,cAAcG,KAAK,IAAIP,EAAeZ,KAAKe,gBAAkBM,EAAUR,GAA5E,EAGJb,KAAKwB,aAAgBX,IACjB,KAAqC,IAA9Bb,KAAKgB,cAAcS,QAAgBZ,EAAYb,KAAKgB,cAAc,GAAGH,UAzB/D,KA0BTb,KAAKgB,cAAcI,QAEvB,IAAIM,EAAe,EACnB,IAAK,MAAMC,KAAa3B,KAAKgB,cACrBW,EAAUrB,MAAQoB,IAClBA,EAAeC,EAAUrB,OAIjC,OADAE,EAAM,qBAAsBkB,GACrBA,CAAP,EAEJ1B,KAAK4B,kBAAoB,IACdjB,EAEXX,KAAK6B,mBAAqB,IAxCT,GA2CpB,moDCnDL,IAAI9B,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQyB,sBAAmB,EAC3B,MAAMC,EAAUhC,EAAgBU,EAAQ,WAElCuB,EAAAA,SAAAA,uFAAAA,CADiCvB,EAAQ,MACcwB,YAoK7D5B,EAAQyB,iBAlKFA,SAAAA,qBACF,WAAYI,GAAU,wBAClB,gBACKA,SAAWA,EAChB,EAAKC,YAAc,IAAIC,IACvB,EAAKC,eAAiB,IAAID,IAC1B,EAAK5B,OAAQ,EAAIuB,EAAQrB,SAAS,4BAClC,EAAK4B,SAAW,CAACC,EAASC,KACtB,GAAI,EAAKC,cAAcF,GACnB,OAEJ,EAAKG,8BACL,EAAKC,KAAK,qBAAsBJ,GAChC,MAAMK,EAAaL,EAAQM,UAAY,EAAKX,SAASY,2BAC/CP,EAAQQ,IACR,EAAKC,gBAAgBT,GAC3B,EAAK/B,MAAM,wBAAyBoC,GACpCL,EAAQU,WAAaL,EACrB,MAAMM,EAAM,IAAIC,eAGhB,GAFAD,EAAIE,KAAK,MAAOR,GAAY,GAC5BM,EAAIG,aAAe,cACfd,EAAQe,MACRJ,EAAIK,iBAAiB,QAAShB,EAAQe,OACtCd,OAAmBgB,OAElB,QAAyBA,IAArBhB,GAAkC,EAAKN,SAASuB,cAAe,CACpE,IAAIC,EAAkB,EACtB,IAAK,MAAMC,KAASnB,EAChBkB,GAAmBC,EAAMC,WAE7BV,EAAIK,iBAAiB,QAArB,gBAAuCG,EAAvC,MACA,EAAKlD,MAAM,yBAA0BkD,EACxC,MAEGlB,OAAmBgB,EAEvB,EAAKK,eAAeX,EAAKX,EAASC,GAC9B,EAAKN,SAAS4B,UACd,EAAK5B,SAAS4B,SAASZ,EAAKN,GAEhC,EAAKT,YAAY4B,IAAIxB,EAAQyB,GAAI,CAAEd,MAAKX,UAAS0B,gBAAiB1B,EAAQM,SAAUD,eACpFM,EAAIgB,MAAJ,EAEJ,EAAKC,eAAkB5B,IACnB,MAAM6B,EAAU,EAAKjC,YAAYkC,IAAI9B,EAAQyB,IAC7C,IAAKI,EACD,MAAM,IAAIE,MAAM,oDAAsD/B,EAAQyB,IAI9EzB,EAAQM,UAAY,EAAKX,SAASY,4BAClCsB,EAAQH,gBAAkB,EAAK/B,SAASY,4BACxCsB,EAAQxB,aAAeL,EAAQQ,MAC/B,EAAKvC,MAAM,sEAAuE+B,EAAQyB,IAC1F,EAAKO,MAAMhC,GACX,EAAKD,SAASC,GACjB,EAEL,EAAKgC,MAAShC,IACV,MAAM6B,EAAU,EAAKjC,YAAYkC,IAAI9B,EAAQyB,IACzCI,IACAA,EAAQlB,IAAIqB,QACZ,EAAKpC,YAAYqC,OAAOjC,EAAQyB,IAChC,EAAKxD,MAAM,qBAAsB+B,EAAQyB,IAC5C,EAEL,EAAKvB,cAAiBF,GACX,EAAKJ,YAAYsC,IAAIlC,EAAQyB,IAExC,EAAKU,SAAYnC,IACb,MAAMoC,EAAO,EAAKtC,eAAegC,IAAI9B,EAAQyB,IAC7C,YAAgBR,IAATmB,GAAsBA,EAAO,EAAKC,KAAzC,EAEJ,EAAKC,mBAAqB,IACf,EAAK1C,YAEhB,EAAK2C,wBAA0B,IACpB,EAAK3C,YAAY4C,KAE5B,EAAKC,QAAU,KACX,EAAK7C,YAAY8C,SAASb,GAAYA,EAAQlB,IAAIqB,UAClD,EAAKpC,YAAY+C,OAAjB,EAEJ,EAAKrB,eAAiB,CAACX,EAAKX,EAASC,KACjC,IAAI2C,EAAkB,EACtBjC,EAAIkC,iBAAiB,YAAaC,IAE9B,EAAK1C,KAAK,mBAAoBJ,EADV8C,EAAMC,OAASH,GAEnCA,EAAkBE,EAAMC,OACpBD,EAAME,kBACN,EAAK5C,KAAK,eAAgBJ,EAAS8C,EAAMG,MAC5C,IAELtC,EAAIkC,iBAAiB,QAAQK,UACzB,GAAIvC,EAAIwC,OAAS,KAAOxC,EAAIwC,QAAU,IAElC,YADA,EAAKC,eAAepD,EAAS8C,EAAOnC,GAGxC,IAAI0C,EAAO1C,EAAI2C,SACf,QAAyBrC,IAArBhB,GAAiD,MAAfU,EAAIwC,OAAgB,CACtD,IAAIhC,EAAkB,EACtB,IAAK,MAAMC,KAASnB,EAChBkB,GAAmBC,EAAMC,WAE7B,MAAMkC,EAAc,IAAIC,WAAWrC,EAAkBkC,EAAKhC,YAC1D,IAAIoC,EAAS,EACb,IAAK,MAAMrC,KAASnB,EAChBsD,EAAY/B,IAAI,IAAIgC,WAAWpC,GAAQqC,GACvCA,GAAUrC,EAAMC,WAEpBkC,EAAY/B,IAAI,IAAIgC,WAAWH,GAAOI,GACtCJ,EAAOE,EAAYG,MACtB,OACK,EAAKC,wBAAwB3D,EAASqD,EAAM1C,EAAlD,IAEJA,EAAIkC,iBAAiB,SAAUC,IAC3B,EAAKM,eAAepD,EAAS8C,EAAOnC,EAApC,IAEJA,EAAIkC,iBAAiB,WAAYC,IAC7B,EAAKM,eAAepD,EAAS8C,EAAOnC,EAApC,GADJ,EAIJ,EAAKgD,wBAA0BT,MAAOlD,EAASqD,EAAM1C,KAEjD,GADAX,EAAQ4D,YAAkC,OAApBjD,EAAIkD,iBAAuB5C,EAAYN,EAAIkD,YAC7D,EAAKlE,SAASmE,iBACd,UACU,EAAKnE,SAASmE,iBAAiBlG,OAAOmG,OAAOnG,OAAOmG,OAAO,CAAC,EAAG/D,GAAU,CAAEqD,KAAMA,IAAS,OAMnG,CAJD,MAAOW,GAGH,OAFA,EAAK/F,MAAM,2BAA4B+F,QACvC,EAAKZ,eAAepD,EAASgE,EAAOrD,EAEvC,CAEL,EAAKf,YAAYqC,OAAOjC,EAAQyB,IAChC,EAAKrB,KAAK,iBAAkBJ,EAASqD,EAArC,EAEJ,EAAKD,eAAiB,CAACpD,EAASgE,EAAOrD,KACnCX,EAAQ4D,YAAkC,OAApBjD,EAAIkD,iBAAuB5C,EAAYN,EAAIkD,YACjE,EAAKjE,YAAYqC,OAAOjC,EAAQyB,IAChC,EAAK3B,eAAe0B,IAAIxB,EAAQyB,GAAI,EAAKY,MAAQ,EAAK1C,SAASsE,0BAC/D,EAAK7D,KAAK,gBAAiBJ,EAASgE,EAApC,EAEJ,EAAK7D,4BAA8B,KAC/B,MAAMkC,EAAM,EAAKA,MACX6B,EAAa,GACnB,EAAKpE,eAAe4C,SAAQ,CAACN,EAAMX,KAC3BW,EAAOC,GACP6B,EAAWtF,KAAK6C,EACnB,IAELyC,EAAWxB,SAASjB,GAAO,EAAK3B,eAAemC,OAAOR,IAAtD,EAEJ,EAAKY,IAAM,IAAM8B,YAAY9B,MAxJX,CAyJrB,0CACD,SAAgBrC,GACZ,OAAIvC,KAAKkC,SAASyE,kBACP3G,KAAKkC,SAASyE,kBAAkBpE,GAEpCA,EAAQQ,GAClB,OAhKCjB,CAAyBE,irBCT/B,IAAIjC,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQuG,kBAAe,EACvB,MAAM7E,EAAUhC,EAAgBU,EAAQ,OAClCoG,EAAWpG,EAAQ,MACnBqG,EAAgB/G,EAAgBU,EAAQ,OACxCsG,EAAqBtG,EAAQ,MAC7BuG,EAAuBvG,EAAQ,MAC/BwG,EAAsBxG,EAAQ,MAC9ByG,EAAezG,EAAQ,MACvB0G,EAA2B1G,EAAQ,MACnC2G,EAA4B3G,EAAQ,MACpC4G,EAAkB,CACpBC,wBAAyB,IACzBC,oBAAqB,GACrBC,QAAQ,EACRC,aAAa,EACbC,yBAA0B,EAC1B5E,2BAA4B,EAC5B6E,0BAA2B,EAC3BC,wBAAyB,GACzBC,gCAAiC,IACjCC,sCAAsC,EACtCtB,yBAA0B,IAC1BuB,wBAAyB,GACzBC,2BAA4B,EAC5BC,qCAAsC,IACtCxE,eAAe,EACfyE,yBAA0B,EAC1BC,uBAAwB,GACxBC,0BAA2B,IAC3BC,qBAAsB,MACtBC,gBAAiB,CAAC,8BAA+B,oCACjDC,wBAAyB,GACzBC,UAAW1B,EAAcpG,QAAQ+H,YAE/B7B,EAAAA,SAAAA,+rBACF,aAA2B,UAAf1E,EAAe,uDAAJ,CAAC,EAAG,WACvB,gBACK1B,OAAQ,EAAIuB,EAAQrB,SAAS,uBAClC,EAAKgI,eAAgB,EAAI3G,EAAQrB,SAAS,gCAC1C,EAAKiI,cAAgB,GACrB,EAAKC,sBAAwB,IAAIzB,EAAyB5G,sBAC1D,EAAKsI,qCAAsC,IAC3C,EAAKC,kBAAoB,IACd,IAAI9B,EAAqBlF,iBAAiB,EAAKI,UAE1D,EAAK6G,iBAAmB,IACb,IAAI9B,EAAoB+B,gBAAgB,EAAKC,gBAAiB,EAAK/G,UAE9E,EAAKgH,KAAOzD,MAAO0D,EAAUC,KACzB,EAAKC,qCACDF,EAAS1H,OAAS,IAClB,EAAK6H,cAAgBH,EAAS,GAAGG,oBAEV9F,IAAvB,EAAK8F,eACL,EAAKC,WAAWC,iBAAiBJ,EAAe,EAAKE,eAEzD,EAAK9I,MAAM,iBAEX,IAAIiJ,EAAoB,EAAKC,qBAAqBP,GAClD,GAAI,EAAK3I,MAAMmJ,QACX,IAAK,MAAMpH,KAAW4G,EACb,EAAKR,cAAciB,MAAMC,GAAMA,EAAE7F,KAAOzB,EAAQyB,MACjD,EAAKxD,MAAM,cAAe+B,EAAQyB,IAK9C,GADA,EAAK2E,cAAgBQ,OACM3F,IAAvB,EAAK8F,cACL,OAEJ,IAAIQ,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACrEG,EAAoB,EAAKO,qBAAqBF,IAAoBL,QACxD,EAAKQ,yBACXH,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACjEG,GAAoB,GAEpBA,IAAsB,EAAKvH,SAASuF,aACpC,EAAK8B,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAC/D,EAEL,EAAKM,WAAa3E,cACgBjC,IAAvB,EAAK8F,mBAA8B9F,EAAY,EAAKyF,gBAAgBmB,WAAWpG,EAAI,EAAKsF,eAEnG,EAAKe,YAAc,IACR,EAAKnI,SAEhB,EAAKoI,WAAa,KACP,CACHC,OAAQ,EAAKhB,WAAWiB,cAGhC,EAAKC,qBAAuB,IACjB,EAAK7B,sBAAsBpH,aAAa,EAAKoD,OAExD,EAAKI,QAAUS,eAC6BjC,IAApC,EAAKkH,6BACLC,cAAc,EAAKD,4BACnB,EAAKA,gCAA6BlH,GAEtC,EAAKqF,qCAAsC,IAC3C,EAAKF,cAAgB,GACrB,EAAKiC,YAAY5F,UACjB,EAAKuE,WAAWvE,UAChB,EAAKsE,mBAAgB9F,QACf,EAAKyF,gBAAgBjE,SAA3B,EAEJ,EAAK6F,6BAA+BpF,UAChC,QAAwCjC,IAApC,EAAKkH,2BAAT,CAGA,QAA2BlH,IAAvB,EAAK8F,cAA6B,CAClC,MAAMQ,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACnE,EAAKU,qBAAqBF,KAAqB,EAAK5H,SAASuF,aAC7D,EAAK8B,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAEnE,CACG,EAAKjB,uCAAwC,KAE7CiC,WAAW,EAAKD,6BAA8B,EAAK3I,SAAS+F,qCAT/D,CAUA,EAEL,EAAK+B,qBAAwBF,IAGzB,GADA,EAAKpB,cAAL,4CADwB,EAAKC,cAAclH,OAAS,EAAI,EAAKkH,cAAc,GAAG9F,SAAW,EACzF,2BAA0F,EAAK8F,cAAclH,cAClF+B,IAAvB,EAAK8F,eAA6D,IAA9B,EAAKX,cAAclH,OACvD,OAAO,EAEX,IACIsJ,EADAtB,GAAoB,EAEpBuB,GAAc,EAClB,GAAI,EAAKnC,uCAAwC,IAAW,CACxD,IAAIoC,EACJ,IAAK,MAAM1I,KAAW,EAAKoG,cACvB,IAAKmB,EAAgBrF,IAAIlC,EAAQyB,IAAK,CAClCiH,EAA4B1I,EAAQM,SACpC,KACH,CAEL,MAAMqI,EAAc,EAAKtG,MAAQ,EAAKiE,oCACtCmC,EACIE,GAAe,EAAKhJ,SAAS8F,iCACMxE,IAA9ByH,GACGC,EAAc,EAAKhJ,SAAS+F,sCAC5BgD,GAA6B,EACrCD,IACA,EAAKtC,cAAc,oDACnB,EAAKG,qCAAsC,IAElD,CACD,IAAIsC,GAA0B,EAC9B,IAAK,IAAIC,EAAQ,EAAGA,EAAQ,EAAKzC,cAAclH,OAAQ2J,IAAS,CAC5D,MAAM7I,EAAU,EAAKoG,cAAcyC,GACnC,GAAItB,EAAgBrF,IAAIlC,EAAQyB,IAC5B,SAGJ,GAAI,EAAK4G,YAAYnI,cAAcF,GAAU,CACzC,EAAKqI,YAAYzG,eAAe5B,GAChC,QACH,CACD,MAAM8I,EAAUL,GAAezI,EAAQM,UAAY,EAAKX,SAASwF,yBACjE,GAAI2D,IAAY,EAAKT,YAAYlG,SAASnC,GAAU,CAEhD,GAAI,EAAKqI,YAAY9F,2BAA6B,EAAK5C,SAASyF,0BAE5D,IAAK,IAAI2D,EAAI,EAAK3C,cAAclH,OAAS,EAAG6J,EAAIF,EAAOE,IAAK,CACxD,MAAMC,EAAiB,EAAK5C,cAAc2C,GAC1C,GAAI,EAAKV,YAAYnI,cAAc8I,GAAiB,CAChD,EAAK7C,cAAc,uBAAwB6C,EAAe1I,SAAU0I,EAAevH,IACnF,EAAK4G,YAAYrG,MAAMgH,GACvB,KACH,CACJ,CAEL,GAAI,EAAKX,YAAY9F,0BAA4B,EAAK5C,SAASyF,0BAA2B,CAEtF,MAAMnF,EAAmB,EAAK+G,WAAWhF,MAAMhC,GAC/C,EAAKqI,YAAYtI,SAASC,EAASC,GACnC,EAAKkG,cAAc,2BAA4BnG,EAAQM,SAAUN,EAAQyB,IACzEyF,GAAoB,EACpB,QACH,CACJ,CAMD,GAHI4B,GAAW,EAAKT,YAAYlG,SAASnC,KACrC4I,GAA0B,IAE1B,EAAK5B,WAAW9G,cAAcF,GAGlC,GAAIA,EAAQM,UAAY,EAAKX,SAASwF,yBAAtC,CAGI,GADAqD,EAAcA,GAA4B,EAAKxB,WAAWiC,wBACtDT,EAAY1G,IAAI9B,EAAQyB,MAAQkD,EAAauE,uBAAuBC,OACpE,SAEJ,GAAI,EAAKnC,WAAWzE,2BAA6B,EAAK5C,SAASgG,yBAE3D,IAAK,IAAIoD,EAAI,EAAK3C,cAAclH,OAAS,EAAG6J,EAAIF,EAAOE,IAAK,CACxD,MAAMC,EAAiB,EAAK5C,cAAc2C,GAC1C,GAAI,EAAK/B,WAAW9G,cAAc8I,GAAiB,CAC/C,EAAK7C,cAAc,sBAAuB6C,EAAe1I,SAAU0I,EAAevH,IAClF,EAAKuF,WAAWhF,MAAMgH,GACtB,KACH,CACJ,CAEL,GAAI,EAAKhC,WAAWzE,0BAA4B,EAAK5C,SAASgG,0BACtD,EAAKqB,WAAWjH,SAASC,GAAU,CACnC,EAAKmG,cAAc,0BAA2BnG,EAAQM,SAAUN,EAAQyB,IACxE,QACH,CAGR,MACG,EAAKuF,WAAWzE,0BAA4B,EAAK5C,SAASgG,0BAC1D3F,EAAQM,UAAY,EAAKX,SAASiG,wBAC9B,EAAKoB,WAAWjH,SAASC,IACzB,EAAKmG,cAAc,eAAgBnG,EAAQM,SAAUN,EAAQyB,GAGxE,CASD,OARImH,GACAL,YAAWrF,UACP,QAA2BjC,IAAvB,EAAK8F,cACL,OACJ,MAAMQ,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACvE,EAAKU,qBAAqBF,EAA1B,GACD,EAAK5H,SAASsE,0BAEdiD,CAAP,EAEJ,EAAKkC,8BAAgClG,UACjC,QAA2BjC,IAAvB,EAAK8F,oBAC+B9F,IAApC,EAAKkH,4BACL,EAAK7B,uCAAwC,KAC7C,EAAK+B,YAAY9F,2BAA6B,EAAK5C,SAASyF,2BAC3D,EAAKzF,SAAS4F,sCAA4E,IAApC,EAAKyB,WAAWqC,WAAW7G,MAClF,EAAK7C,SAASuF,YACd,OAEJ,MAAMqC,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACjEyB,EAAc,EAAKxB,WAAWiC,wBAC9BK,EAAe,EAAKlD,cAAcmD,QAAQC,IAAO,EAAKxC,WAAW9G,cAAcsJ,KAChF,EAAKnB,YAAYnI,cAAcsJ,KAC/BhB,EAAYtG,IAAIsH,EAAE/H,MAClB,EAAK4G,YAAYlG,SAASqH,IAC3BA,EAAElJ,UAAY,EAAKX,SAAS6F,0BAC3B+B,EAAgBrF,IAAIsH,EAAE/H,MAC3B,GAA4B,IAAxB6H,EAAapK,OACb,OAEJ,GAAIH,KAAK0K,SAAW,EAAK9J,SAAS0F,wBAA0BiE,EAAapK,OACrE,OAEJ,MAAMc,EAAUsJ,EAAavK,KAAK2K,MAAM3K,KAAK0K,SAAWH,EAAapK,SACrE,EAAKiH,cAAc,yBAA0BnG,EAAQM,SAAUN,EAAQyB,IACvE,EAAK4G,YAAYtI,SAASC,GAC1B,EAAKgH,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAA5D,EAEJ,EAAKoC,mBAAqB,CAACC,EAAQ5J,KAC/B,EAAKI,KAAKoE,EAAmBqF,OAAOC,iBAAkBF,EAAQ5J,EAA9D,EAEJ,EAAK+J,uBAAyB,CAACH,EAAQ5J,EAASrB,EAAOqJ,KACnD,EAAK3B,sBAAsB3H,SAASC,EAAO,EAAK0D,OAChD,EAAKjC,KAAKoE,EAAmBqF,OAAOG,qBAAsBJ,EAAQ5J,EAASrB,EAAOqJ,EAAlF,EAEJ,EAAKiC,qBAAuB,CAACL,EAAQ5J,EAASrB,EAAOqJ,KACjD,EAAK5H,KAAKoE,EAAmBqF,OAAOK,mBAAoBN,EAAQ5J,EAASrB,EAAOqJ,EAAhF,EAEJ,EAAKmC,gBAAkBjH,MAAOlD,EAASqD,EAAM2E,KAEzC,GADA,EAAK7B,cAAc,iBAAkBnG,EAAQyB,GAAIzB,EAAQyB,SAC9BR,IAAvB,EAAK8F,cACL,OAEJ/G,EAAQqD,KAAOA,EACfrD,EAAQoK,kBAAoB,EAAK/D,sBAAsBpH,aAAa,EAAKoD,aACnE,EAAKqE,gBAAgB2D,aAAarK,GACxC,EAAKI,KAAKoE,EAAmBqF,OAAOS,cAAetK,EAASgI,GAC5D,MAAMT,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACvE,EAAKU,qBAAqBF,GACrB,EAAK5H,SAASuF,aACf,EAAK8B,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAC/D,EAEL,EAAKgD,eAAiBrH,MAAOlD,EAASwK,EAASxC,KAG3C,GAFA,EAAK7B,cAAc,gBAAiBnG,EAAQyB,GAAIzB,EAAQyB,GAAIuG,EAAQwC,GACpE,EAAKpK,KAAKoE,EAAmBqF,OAAOY,aAAczK,EAASwK,EAASxC,QACzC/G,IAAvB,EAAK8F,cAA6B,CAClC,MAAMQ,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACnE,EAAKU,qBAAqBF,KAAqB,EAAK5H,SAASuF,aAC7D,EAAK8B,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAEnE,GAEL,EAAKmD,cAAgBxH,MAAOlD,EAASwC,KACjC,EAAK2D,cAAc,eAAgBnG,EAAQyB,GAAIe,GAC/C,EAAKpC,KAAKoE,EAAmBqF,OAAOc,YAAa3K,EAASwC,EAA1D,EAEJ,EAAKoI,iBAAoB5K,QACOiB,IAArBjB,EAAQ6K,SAAyB7K,EAAQ+G,cAAzC,UAA4D/G,EAAQ+G,cAApE,YAAqF/G,EAAQ6K,UAExG,EAAKjD,kBAAqBL,IACtB,MAAMiB,EAAc,CAAC,EACfsC,EAAkB,CAAC9K,EAASmD,KAC9B,MAAM0D,EAAgB,EAAK+D,iBAAiB5K,GACtC+K,EAAY/K,EAAQgL,SAC1B,IAAIC,EAAyBzC,EAAY3B,QACV5F,IAA3BgK,IACAA,EAAyB,CAAC,GAAI,IAC9BzC,EAAY3B,GAAiBoE,GAEjC,MAAMC,EAAmBD,EAAuB,GAChDA,EAAuB,IAAkC,IAA5BC,EAAiBhM,OAAe6L,EAAhC,WAAgDA,GAC7EG,EAAiBtM,KAAKuE,EAAtB,EAEJ,IAAK,MAAMgI,KAAkB5D,EAAgB6D,SACzCN,EAAgBK,EAAenL,QAAS2E,EAAauE,uBAAuBC,QAEhF,IAAK,MAAMpJ,KAAY,EAAKsI,YAAY/F,qBAAqB8I,SACzDN,EAAgB/K,EAASC,QAAS2E,EAAauE,uBAAuBmC,eAE1E,OAAO7C,CAAP,EAEJ,EAAK8C,cAAgBpI,UACjB,EAAK9C,KAAKoE,EAAmBqF,OAAO0B,YAAaC,GAC5C,EAAK7L,SAASuF,kBAAsCjE,IAAvB,EAAK8F,eACnC,EAAKC,WAAWyE,gBAAgBD,EAAK/J,GAAI,EAAKmG,wBAAwB,EAAKlB,gBAAgBc,eAAe,EAAKT,gBAClH,EAEL,EAAK2E,YAAe1D,IAChB,EAAK5H,KAAKoE,EAAmBqF,OAAO8B,UAAW3D,EAA/C,EAEJ,EAAK4D,gBAAkB1I,UACnB,GAAI,EAAKoD,uCAAwC,UACzBrF,IAApBoC,EAAKwI,YACLxI,EAAKwI,YAAc,IACnB,EAAK1F,cAAc,mDACnB,EAAKG,qCAAsC,SAChBrF,IAAvB,EAAK8F,eAA6B,CAClC,MAAMQ,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACnE,EAAKU,qBAAqBF,KAAqB,EAAK5H,SAASuF,aAC7D,EAAK8B,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAEnE,CACJ,EAEL,EAAKG,qBAAuBxE,cACGjC,IAAvB,EAAK8F,eAGF,EAAKL,gBAAgBoF,MAAM,EAAK/E,eAAgBtF,QAA6ER,IAAtE,EAAKmF,cAAciB,MAAM0E,GAAiBA,EAAatK,KAAOA,MAEhI,EAAKY,IAAM,IACA8B,YAAY9B,MAEvB,EAAKyE,mCAAqC,UACE7F,IAApC,EAAKkH,6BAGT,EAAKA,2BAA6B6D,YAAY,EAAK5C,8BAA+B,EAAKzJ,SAAS2F,iCAC5F,EAAK3F,SAAS8F,2BAA6B,GAC3C,EAAK9F,SAAS+F,qCAAuC,IAErD,EAAKS,cAAc,uCAAwC,EAAKxG,SAAS8F,2BAA4B,cAAe,EAAK9F,SAAS+F,sCAClI,EAAKY,oCAAsC,EAAKjE,MAChDkG,WAAW,EAAKD,6BAA8B,EAAK3I,SAAS+F,qCAAuC,MACtG,EAEL,EAAKyB,qBAAwBP,IACzB,IAAIM,GAAoB,EACxB,IAAK,MAAMlH,KAAW,EAAKoG,cAClBQ,EAASS,MAAMC,GAAMA,EAAE7F,KAAOzB,EAAQyB,OACvC,EAAKxD,MAAM,iBAAkB+B,EAAQyB,IACjC,EAAK4G,YAAYnI,cAAcF,IAC/BkH,GAAoB,EACpB,EAAKmB,YAAYrG,MAAMhC,IAGvB,EAAKgH,WAAWhF,MAAMhC,GAE1B,EAAKI,KAAKoE,EAAmBqF,OAAOoC,aAAcjM,IAG1D,OAAOkH,CAAP,EAEJ,EAAKvH,SAAW/B,OAAOmG,OAAOnG,OAAOmG,OAAO,CAAC,EAAGe,GAAkBnF,GAClE,MAAM,sBAAEuM,GAA0BvM,EAjWX,MAkWc,iBAA1BuM,SACiCjL,IAApCtB,EAASiG,yBACT,EAAKjG,SAASiG,uBAAyBsG,QAEFjL,IAArCtB,EAAS6F,0BACT,EAAK7F,SAASiG,uBAAyBsG,IAG/C,EAAKxF,qBACiCzF,IAAlC,EAAKtB,SAAS+G,gBACR,IAAI7B,EAA0BsH,sBAAsB,EAAKxM,UACzD,EAAKA,SAAS+G,gBACxB,EAAKzI,MAAM,kBAAmB,EAAK0B,UACnC,EAAK0I,YAAc,EAAK9B,oBACxB,EAAK8B,YAAY+D,GAAG,sBAAuBpM,GAAY,EAAK2J,mBAAmB,OAAQ3J,KACvF,EAAKqI,YAAY+D,GAAG,iBAAkB,EAAKjC,iBAC3C,EAAK9B,YAAY+D,GAAG,gBAAiB,EAAK7B,gBAC1C,EAAKlC,YAAY+D,GAAG,eAAgB,EAAK1B,eACzC,EAAKrC,YAAY+D,GAAG,oBAAoB,CAACpM,EAASrB,KAC9C,EAAKoL,uBAAuB,OAAQ/J,EAASrB,EAA7C,IAEJ,EAAKqI,WAAa,EAAKR,mBACvB,EAAKQ,WAAWoF,GAAG,sBAAuBpM,GAAY,EAAK2J,mBAAmB,MAAO3J,KACrF,EAAKgH,WAAWoF,GAAG,iBAAkB,EAAKjC,iBAC1C,EAAKnD,WAAWoF,GAAG,gBAAiB,EAAK7B,gBACzC,EAAKvD,WAAWoF,GAAG,eAAgB,EAAK1B,eACxC,EAAK1D,WAAWoF,GAAG,qBAAqBlJ,UACpC,QAA2BjC,IAAvB,EAAK8F,cACL,OAEJ,MAAMQ,QAAwB,EAAKb,gBAAgBc,eAAe,EAAKT,eACnE,EAAKU,qBAAqBF,KAAqB,EAAK5H,SAASuF,aAC7D,EAAK8B,WAAWW,qBAAqB,EAAKC,kBAAkBL,GAC/D,IAEL,EAAKP,WAAWoF,GAAG,oBAAoB,CAACpM,EAASrB,EAAOqJ,IAAW,EAAK+B,uBAAuB,MAAO/J,EAASrB,EAAOqJ,KACtH,EAAKhB,WAAWoF,GAAG,kBAAkB,CAACpM,EAASrB,EAAOqJ,IAAW,EAAKiC,qBAAqB,MAAOjK,EAASrB,EAAOqJ,KAClH,EAAKhB,WAAWoF,GAAG,iBAAkB,EAAKd,eAC1C,EAAKtE,WAAWoF,GAAG,cAAe,EAAKV,aACvC,EAAK1E,WAAWoF,GAAG,iBAAkB,EAAKR,iBAzYnB,CA0Y1B,iEA3YCvH,CAAqBC,EAAS+H,cA6YpCvO,EAAQuG,aAAeA,EACvBA,EAAaiI,YAAc,SACyCrL,IAAzDsL,OAAOC,kBAAkBC,UAAUC,qDCpb9C,IAAIC,EAAmBlP,MAAQA,KAAKkP,kBAAqB/O,OAAOgP,OAAU,SAASC,EAAGC,EAAGC,EAAGC,QAC7E/L,IAAP+L,IAAkBA,EAAKD,GAC3B,IAAIE,EAAOrP,OAAOsP,yBAAyBJ,EAAGC,GACzCE,KAAS,QAASA,GAAQH,EAAEnP,WAAasP,EAAKE,UAAYF,EAAKG,gBAClEH,EAAO,CAAEI,YAAY,EAAMvL,IAAK,WAAa,OAAOgL,EAAEC,EAAK,IAE7DnP,OAAOC,eAAegP,EAAGG,EAAIC,EAChC,EAAK,SAASJ,EAAGC,EAAGC,EAAGC,QACT/L,IAAP+L,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,EACb,GACGO,EAAgB7P,MAAQA,KAAK6P,cAAiB,SAASR,EAAGhP,GAC1D,IAAK,IAAIyP,KAAKT,EAAa,YAANS,GAAoB3P,OAAO6O,UAAUe,eAAeC,KAAK3P,EAASyP,IAAIZ,EAAgB7O,EAASgP,EAAGS,EAC1H,EACD3P,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ4P,aAAU,EAClB5P,EAAQ4P,QAAU,QAClBJ,EAAapP,EAAQ,MAAuBJ,GAC5CwP,EAAapP,EAAQ,KAAoBJ,8BChBzC,IAAW+L,EAHXjM,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ+L,YAAS,GAENA,EA8CC/L,EAAQ+L,SAAW/L,EAAQ+L,OAAS,CAAC,IAzCvC,cAAoB,iBAK1BA,EAAM,aAAmB,gBAKzBA,EAAM,YAAkB,eAKxBA,EAAM,aAAmB,gBAKzBA,EAAM,iBAAuB,qBAK7BA,EAAM,YAAkB,eAKxBA,EAAM,UAAgB,aAKtBA,EAAM,qBAA2B,yBAKjCA,EAAM,mBAAyB,29BChDnC,IAAIrM,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ6P,UAAY7P,EAAQoL,4BAAyB,EAIrD,MAAM1J,EAAUhC,EAAgBU,EAAQ,OAClC0P,EAAW1P,EAAQ,MACnB2P,EAAiC3P,EAAQ,MAC/C,IAAI4P,EAQA5E,GAPJ,SAAW4E,GACPA,EAAkBA,EAAiB,YAAkB,GAAK,cAC1DA,EAAkBA,EAAiB,cAAoB,GAAK,gBAC5DA,EAAkBA,EAAiB,YAAkB,GAAK,cAC1DA,EAAkBA,EAAiB,eAAqB,GAAK,iBAC7DA,EAAkBA,EAAiB,qBAA2B,GAAK,sBALvE,EAMGA,IAAsBA,EAAoB,CAAC,IAE9C,SAAW5E,GACPA,EAAuBA,EAAsB,OAAa,GAAK,SAC/DA,EAAuBA,EAAsB,cAAoB,GAAK,eAF1E,EAGGA,EAAyBpL,EAAQoL,yBAA2BpL,EAAQoL,uBAAyB,CAAC,QAC3F6E,EAAAA,GACF,WAAYtM,EAAIe,GAAM,UAClB/E,KAAKgE,GAAKA,EACVhE,KAAK+E,KAAOA,EACZ/E,KAAK0D,gBAAkB,EACvB1D,KAAKuQ,OAAS,EACjB,IAkOLlQ,EAAQ6P,UAhOFA,SAAAA,6rBACF,WAEAnC,EAAM7L,GAAU,wBACZ,gBACK6L,KAAOA,EACZ,EAAK7L,SAAWA,EAChB,EAAKsO,cAAgB,GACrB,EAAKC,qBAAuB,KAC5B,EAAKC,mBAAqB,KAC1B,EAAK3F,YAAc,IAAI3I,IACvB,EAAK5B,OAAQ,EAAIuB,EAAQrB,SAAS,oBAClC,EAAKiQ,MAAQ,KACb,EAAK9C,cAAgB,KACjB,EAAKrN,MAAM,eAAgB,EAAKwD,GAAhC,MACA,EAAKwM,cAAgB,EAAKzC,KAAKyC,cAC/B,EAAK7N,KAAK,UAAV,OAEJ,EAAKsL,YAAc,KACf,EAAKzN,MAAM,aAAc,EAAKwD,GAA9B,MACA,EAAK4M,0BACL,EAAKjO,KAAK,QAAV,OAEJ,EAAKkO,YAAetK,IAChB,EAAK/F,MAAM,aAAc,EAAKwD,GAAIuC,EAAlC,OAEJ,EAAKuK,oBAAuBlL,IACxB,IAAK,EAAK8K,mBAGN,YADA,EAAKlQ,MAAM,6BAA8B,EAAKwD,GAA9C,MAGJ,EAAK0M,mBAAmBhN,iBAAmBkC,EAAKhC,WAChD,EAAK8M,mBAAmBH,OAAOpP,KAAKyE,GACpC,MAAM0H,EAAY,EAAKoD,mBAAmB1M,GAE1C,GADA,EAAKrB,KAAK,mBAAV,KAAoC2K,EAAW1H,EAAKhC,YAChD,EAAK8M,mBAAmBhN,kBAAoB,EAAKgN,mBAAmB3L,KAAM,CAC1E,MAAMe,EAAc,IAAIC,WAAW,EAAK2K,mBAAmB3L,MAC3D,IAAIiB,EAAS,EACb,IAAK,MAAMrC,KAAS,EAAK+M,mBAAmBH,OACxCzK,EAAY/B,IAAI,IAAIgC,WAAWpC,GAAQqC,GACvCA,GAAUrC,EAAMC,WAEpB,EAAKpD,MAAM,6BAA8B,EAAKwD,GAAIsJ,EAAlD,MACA,EAAKsD,0BACL,EAAKjO,KAAK,iBAAV,KAAkC2K,EAAWxH,EAAYG,OAC5D,MACQ,EAAKyK,mBAAmBhN,gBAAkB,EAAKgN,mBAAmB3L,OACvE,EAAKvE,MAAM,uCAAwC,EAAKwD,GAAIsJ,EAA5D,MACA,EAAKsD,0BACL,EAAKjO,KAAK,gBAAV,KAAiC2K,EAAW,uCAC/C,EAEL,EAAKyD,eAAkBnL,IACnB,MAAM1E,EAAQ,IAAI6E,WAAWH,GAE7B,GAAiB,MAAb1E,EAAM,IAA2B,KAAbA,EAAM,IAA4C,MAA/BA,EAAM0E,EAAKhC,WAAa,GAC/D,IACI,OAAOoN,KAAKC,OAAM,IAAIC,aAAcC,OAAOvL,GAI9C,CAFD,MAAOwL,GACH,OAAO,IACV,CAEL,OAAO,IAAP,EAEJ,EAAKC,WAAczL,IACf,MAAM0L,EAAU,EAAKP,eAAenL,GACpC,GAAgB,OAAZ0L,EAAJ,CAIA,GAAI,EAAKZ,mBAAoB,CACzB,EAAKlQ,MAAM,oDAAqD,EAAKwD,GAArE,MACA,MAAMsJ,EAAY,EAAKoD,mBAAmB1M,GAG1C,OAFA,EAAK4M,+BACL,EAAKjO,KAAK,gBAAV,KAAiC2K,EAAW,+CAE/C,CAED,OADA,EAAK9M,MAAM,uBAAwB,EAAKwD,GAAIsN,EAA5C,MACQA,EAAQC,GACZ,KAAKlB,EAAkBmB,YACnB,EAAKzG,YAAc,EAAKZ,kBAAkBmH,EAAQjC,GAClD,EAAK1M,KAAK,gBACV,MACJ,KAAK0N,EAAkBoB,eACnB,EAAK9O,KAAK,kBAAV,KAAmC2O,EAAQhG,GAC3C,MACJ,KAAK+E,EAAkBqB,YACf,EAAKjB,sBACL,EAAKA,uBAAyBa,EAAQhG,GACjB,iBAAdgG,EAAQvF,GACfuF,EAAQvF,GAAK,IACb,EAAK2E,mBAAqB,IAAIJ,EAAmBgB,EAAQhG,EAAGgG,EAAQvF,GACpE,EAAKpJ,KAAK,qBAAsB,EAAK+N,mBAAmB1M,IACxD,EAAKrB,KAAK,eAAgB,EAAK+N,mBAAmB1M,GAAI,EAAK0M,mBAAmB3L,MAC9E,EAAK4M,8BAET,MACJ,KAAKtB,EAAkBuB,cACf,EAAKnB,sBAAwB,EAAKA,uBAAyBa,EAAQhG,IACnE,EAAKsF,0BACL,EAAK7F,YAAYvG,OAAO8M,EAAQhG,GAChC,EAAK3I,KAAK,iBAAV,KAAkC2O,EAAQhG,IAhCrD,MAFG,EAAKwF,oBAAoBlL,EAW7B,EAiCJ,EAAKuE,kBAAqBhB,IACtB,KAAMA,aAAoBhJ,QACtB,OAAO,IAAIiC,IAEf,MAAM2I,EAAc,IAAI3I,IACxB,IAAK,MAAMgH,KAAiBjJ,OAAO0R,KAAK1I,GAAW,CAC/C,MAAM2I,EAAY3I,EAASC,GAC3B,KAAM0I,aAAqBC,OACF,IAArBD,EAAUrQ,QACc,iBAAjBqQ,EAAU,IACfA,EAAU,aAAcC,OAC1B,OAAO,IAAI3P,IAEf,MAAM4P,EAAcF,EAAU,GAAGG,MAAM,KACjCxE,EAAmBqE,EAAU,GACnC,GAAIE,EAAYvQ,SAAWgM,EAAiBhM,OACxC,OAAO,IAAIW,IAEf,IAAK,IAAIkJ,EAAI,EAAGA,EAAI0G,EAAYvQ,OAAQ6J,IAAK,CACzC,MAAM4G,EAAgBzE,EAAiBnC,GACvC,GAA6B,iBAAlB4G,QAAwE1O,IAA1CiI,EAAuByG,GAC5D,OAAO,IAAI9P,IAEf2I,EAAYhH,IAAZ,UAAmBqF,EAAnB,YAAoC4I,EAAY1G,IAAM4G,EACzD,CACJ,CACD,OAAOnH,CAAP,EAEJ,EAAKoH,YAAeb,IAChB,EAAK9Q,MAAM,oBAAqB,EAAKwD,GAAIsN,EAAzC,MACA,EAAKvD,KAAKqE,MAAMpB,KAAKqB,UAAUf,GAA/B,EAEJ,EAAKtM,QAAU,KACX,EAAKxE,MAAM,eAAgB,EAAKwD,GAAhC,MACA,EAAK4M,0BACL,EAAK7C,KAAK/I,SAAV,EAEJ,EAAKsN,wBAA0B,IACpB,EAAK7B,qBAEhB,EAAK1G,eAAiB,IACX,EAAKgB,YAEhB,EAAKiD,gBAAmBjD,IACpB,EAAKoH,YAAY,CAAEZ,EAAGlB,EAAkBmB,YAAanC,EAAGtE,GAAxD,EAEJ,EAAKwH,gBAAkB,CAACjF,EAAW1H,KAC/B,EAAKuM,YAAY,CACbZ,EAAGlB,EAAkBqB,YACrBpG,EAAGgC,EACHvB,EAAGnG,EAAKhC,aAEZ,IAAI4O,EAAY5M,EAAKhC,WACrB,KAAO4O,EAAY,GAAG,CAClB,MAAMC,EAAcD,GAAa,EAAKtQ,SAASmG,qBAAuB,EAAKnG,SAASmG,qBAAuBmK,EACrGvM,EAASkK,EAASuC,OAAOC,KAAK/M,EAAMA,EAAKhC,WAAa4O,EAAWC,GACvE,EAAK1E,KAAKqE,MAAMnM,GAChBuM,GAAaC,CAChB,CACD,EAAK9P,KAAK,iBAAV,KAAkC2K,EAAW1H,EAAKhC,WAAlD,EAEJ,EAAKgP,kBAAqBtF,IACtB,EAAK6E,YAAY,CAAEZ,EAAGlB,EAAkBuB,cAAetG,EAAGgC,GAA1D,EAEJ,EAAKuF,eAAkBvF,IACnB,GAAI,EAAKmD,qBACL,MAAM,IAAInM,MAAM,qCAAuC,EAAKmM,sBAEhE,EAAK0B,YAAY,CAAEZ,EAAGlB,EAAkBoB,eAAgBnG,EAAGgC,IAC3D,EAAKmD,qBAAuBnD,EAC5B,EAAKwF,yBAAL,EAEJ,EAAKC,qBAAuB,KACxB,IAAIrC,EACJ,GAAI,EAAKD,qBAAsB,CAC3B,MAAMnD,EAAY,EAAKmD,qBACvBC,EAAqB,EAAKA,mBAAqB,EAAKA,mBAAmBH,YAAS/M,EAChF,EAAKoN,0BACL,EAAKuB,YAAY,CAAEZ,EAAGlB,EAAkB2C,qBAAsB1H,EAAGgC,GACpE,CACD,OAAOoD,CAAP,EAEJ,EAAKoC,wBAA0B,KAC3B,EAAKnC,MAAQ7F,YAAW,KAEpB,GADA,EAAK6F,MAAQ,MACR,EAAKF,qBACN,OAEJ,MAAMnD,EAAY,EAAKmD,qBACvB,EAAKsC,uBACL,EAAKpQ,KAAK,kBAAV,KAAmC2K,EAAnC,GACD,EAAKpL,SAASkG,0BARjB,EAUJ,EAAKuJ,2BAA6B,KAC1B,EAAKhB,QACLsC,aAAa,EAAKtC,OAClB,EAAKA,MAAQ,KAChB,EAEL,EAAKC,wBAA0B,KAC3B,EAAKH,qBAAuB,KAC5B,EAAKC,mBAAqB,KAC1B,EAAKiB,4BAAL,EAEJ,EAAK5D,KAAKY,GAAG,UAAW,EAAKd,eAC7B,EAAKE,KAAKY,GAAG,QAAS,EAAKV,aAC3B,EAAKF,KAAKY,GAAG,QAAS,EAAKkC,aAC3B,EAAK9C,KAAKY,GAAG,OAAQ,EAAK0C,YAC1B,EAAKrN,GAAK+J,EAAK/J,GA1NH,CA2Nf,aA9NCkM,CAAkBE,EAA+BnO,68BChCvD,IAAIlC,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ2I,qBAAkB,EAI1B,MAAMjH,EAAUhC,EAAgBU,EAAQ,OAClCyS,EAAWnT,EAAgBU,EAAQ,OACnC0P,EAAW1P,EAAQ,MACnB0S,EAASpT,EAAgBU,EAAQ,MACjC2P,EAAiC3P,EAAQ,MACzCyG,EAAezG,EAAQ,MAGvB2S,EAFU3S,EAAQ,MAEewP,QAAQoD,QAAQ,SAAUC,GAAM,WAAIC,SAASD,EAAG,IAAM,KAAME,OAAO,KAAIA,MAAM,EAAG,GACjHC,EAAyB,MAAH,OAASL,EAAT,SACtBM,EAAAA,GACF,WAAYnJ,EAAQhI,GAAS,UACzBvC,KAAKuK,OAASA,EACdvK,KAAKuC,QAAUA,CAClB,IAWCyG,EAAAA,SAAAA,6rBACF,WAAYC,EAAiB/G,GAAU,wBACnC,gBACK+G,gBAAkBA,EACvB,EAAK/G,SAAWA,EAEhB,EAAKyR,cAAgB,KACrB,EAAKC,MAAQ,IAAIxR,IACjB,EAAKyR,eAAiB,IAAIzR,IAC1B,EAAK0R,oBAAsB,IAAI1R,IAC/B,EAAKgH,cAAgB,KACrB,EAAK5I,OAAQ,EAAIuB,EAAQrB,SAAS,2BAClC,EAAKqT,qBAAuB,KAC5B,EAAKnI,SAAW,IACL,EAAKgI,MAEhB,EAAKpJ,UAAY,IACN2F,EAASuC,OAAOC,KAAK,EAAKpI,QAAQyJ,SAAS,OAEtD,EAAKxK,iBAAmB,CAACJ,EAAeE,KACpC,GAAI,EAAKF,gBAAkBA,EACvB,OAEJ,EAAKpE,SAAQ,GACb,EAAKoE,cAAgBA,EACrB,EAAKE,cAAgBA,EACrB,EAAK9I,MAAM,kBAAmB,EAAK4I,eACnC,EAAK2K,qBAAuB,CACxBE,aAAa,GAEjB,MAAMF,EAAuB,EAAKA,qBAI5BG,GAAW,IAAIf,EAAOzS,SAAUyT,OAArB,UApDC,GAoDD,OAAuD,EAAK/K,gBAAiBgL,SAEzFL,EAAqBE,YAIM,OAAvB,EAAKN,gBACV,EAAKA,cAAc3O,UACnB,EAAK2O,cAAgB,OALrB,EAAKI,qBAAuB,KAC5B,EAAKM,aAAaH,GAKrB,EAEL,EAAKG,aAAgBH,IACjB,IAAK,EAAKhS,SAASsF,OACf,OAEJ,MAAM8M,EAAgB,CAClBJ,SAAU/D,EAASuC,OAAOC,KAAKuB,EAAU,EAAG,IAC5C3J,OAAQ4F,EAASuC,OAAOC,KAAK,EAAKpI,OAAQ,EAAG,IAC7CgK,SAAU,EAAKrS,SAASoG,gBACxBE,UAAW,EAAKtG,SAASsG,UACzBgM,KAAM,KACNC,gBAAiB,KACN,CAAEC,QAAS,EAAKxS,SAASqG,2BAGxC,IAAIoM,EAAmB,EAAKhB,cAC5B,EAAKA,cAAgB,IAAIT,EAASxS,QAAQ4T,GAC1C,EAAKX,cAAchF,GAAG,QAAS,EAAKiG,gBACpC,EAAKjB,cAAchF,GAAG,UAAW,EAAKkG,kBACtC,EAAKlB,cAAchF,GAAG,SAAU,EAAKR,iBACrC,EAAKwF,cAAchF,GAAG,OAAQ,EAAKmG,eACnC,EAAKnB,cAAcoB,QACM,OAArBJ,IACAA,EAAiB3P,UACjB2P,EAAmB,KACtB,EAEL,EAAKC,eAAkBrO,IACnB,EAAK/F,MAAM,gBAAiB+F,EAA5B,EAEJ,EAAKsO,iBAAoBG,IACrB,EAAKxU,MAAM,kBAAmBwU,EAA9B,EAEJ,EAAK7G,gBAAmBvI,IACpB,EAAKpF,MAAM,iBAAkBoF,GAC7B,EAAKjD,KAAK,iBAAkBiD,EAA5B,EAGJ,EAAKkP,cAAiBG,IAGlB,GAFA,EAAKzU,MAAM,eAAgByU,EAAYjR,GAAIiR,GAEvC,EAAKrB,MAAMnP,IAAIwQ,EAAYjR,IAG3B,OAFA,EAAKxD,MAAM,iCAAkCyU,EAAYjR,GAAIiR,QAC7DA,EAAYjQ,UAGhB,MAAM+I,EAAO,IAAI7G,EAAagJ,UAAU+E,EAAa,EAAK/S,UAC1D6L,EAAKY,GAAG,UAAW,EAAKd,eACxBE,EAAKY,GAAG,QAAS,EAAKV,aACtBF,EAAKY,GAAG,eAAgB,EAAKuG,mBAC7BnH,EAAKY,GAAG,kBAAmB,EAAKwG,kBAChCpH,EAAKY,GAAG,iBAAkB,EAAKjC,iBAC/BqB,EAAKY,GAAG,iBAAkB,EAAKyG,iBAC/BrH,EAAKY,GAAG,gBAAiB,EAAK7B,gBAC9BiB,EAAKY,GAAG,eAAgB,EAAK1B,eAC7Bc,EAAKY,GAAG,qBAAsB,EAAKzC,oBACnC6B,EAAKY,GAAG,kBAAmB,EAAK0G,kBAChCtH,EAAKY,GAAG,mBAAoB,EAAKrC,wBACjCyB,EAAKY,GAAG,iBAAkB,EAAKnC,sBAC/B,IAAI8I,EAAqB,EAAKzB,eAAexP,IAAI0J,EAAK/J,IACjDsR,IACDA,EAAqB,GACrB,EAAKzB,eAAe9P,IAAIgK,EAAK/J,GAAIsR,IAErCA,EAAmBnU,KAAK4M,EAAxB,EAEJ,EAAKzL,SAAYC,IACb,GAAI,EAAKE,cAAcF,GACnB,OAAO,EAEX,MAAMkE,EAAa,GACnB,IAAK,MAAMsH,KAAQ,EAAK6F,MAAMjG,SACa,OAAnCI,EAAKuE,2BACLvE,EAAKhE,iBAAiB1F,IAAI9B,EAAQyB,MAAQkD,EAAauE,uBAAuBC,QAC9EjF,EAAWtF,KAAK4M,GAGxB,GAA0B,IAAtBtH,EAAWhF,OACX,OAAO,EAEX,MAAMsM,EAAOtH,EAAWnF,KAAK2K,MAAM3K,KAAK0K,SAAWvF,EAAWhF,SAG9D,OAFAsM,EAAK8E,eAAetQ,EAAQyB,IAC5B,EAAK8P,oBAAoB/P,IAAIxB,EAAQyB,GAAI,IAAI0P,EAAmB3F,EAAK/J,GAAIzB,KAClE,CAAP,EAEJ,EAAKgC,MAAShC,IACV,IAAImO,EACJ,MAAM6E,EAAqB,EAAKzB,oBAAoBzP,IAAI9B,EAAQyB,IAChE,GAAIuR,EAAoB,CACpB,MAAMxH,EAAO,EAAK6F,MAAMvP,IAAIkR,EAAmBhL,QAC3CwD,IACA2C,EAAqB3C,EAAKgF,wBAE9B,EAAKe,oBAAoBtP,OAAOjC,EAAQyB,GAC3C,CACD,OAAO0M,CAAP,EAEJ,EAAKjO,cAAiBF,GACX,EAAKuR,oBAAoBrP,IAAIlC,EAAQyB,IAEhD,EAAKc,wBAA0B,IACpB,EAAKgP,oBAAoB/O,KAEpC,EAAKC,QAAU,WAAyB,IAAxBwQ,EAAwB,wDACpC,EAAKpM,cAAgB,KACjB,EAAKuK,gBACL,EAAKA,cAAc8B,OACfD,GAEA,EAAK7B,cAAc+B,mBAAmB,SACtC,EAAK/B,cAAc+B,mBAAmB,WACtC,EAAK/B,cAAc+B,mBAAmB,UACtC,EAAK/B,cAAc+B,mBAAmB,UAGtC,EAAK/B,cAAc3O,UACnB,EAAK2O,cAAgB,OAGzB,EAAKI,uBACL,EAAKA,qBAAqBE,aAAc,EACxC,EAAKF,qBAAuB,MAEhC,EAAKH,MAAM3O,SAAS8I,GAASA,EAAK/I,YAClC,EAAK4O,MAAM1O,QACX,EAAK4O,oBAAoB5O,QACzB,IAAK,MAAMyQ,KAAqB,EAAK9B,eAAelG,SAChD,IAAK,MAAMiI,KAAiBD,EACxBC,EAAc5Q,UAGtB,EAAK6O,eAAe3O,OACvB,EACD,EAAKgF,qBAAwBa,IACzB,EAAK6I,MAAM3O,SAAS8I,GAASA,EAAKC,gBAAgBjD,IAAlD,EAEJ,EAAKiD,gBAAkB,CAACzD,EAAQQ,KAC5B,MAAMgD,EAAO,EAAK6F,MAAMvP,IAAIkG,GACxBwD,GACAA,EAAKC,gBAAgBjD,EACxB,EAEL,EAAKS,sBAAwB,KACzB,MAAMqK,EAAqB,IAAIzT,IAC/B,IAAK,MAAM2L,KAAQ,EAAK6F,MAAMjG,SAC1B,IAAK,MAAOL,EAAW4E,KAAkBnE,EAAKhE,iBACtCmI,IAAkBhL,EAAauE,uBAAuBC,OACtDmK,EAAmB9R,IAAIuJ,EAAWpG,EAAauE,uBAAuBC,QAEhEmK,EAAmBxR,IAAIiJ,IAC7BuI,EAAmB9R,IAAIuJ,EAAWpG,EAAauE,uBAAuBmC,eAIlF,OAAOiI,CAAP,EAEJ,EAAKvJ,uBAAyB,CAACyB,EAAMT,EAAWpM,KAC5C,MAAMqU,EAAqB,EAAKzB,oBAAoBzP,IAAIiJ,GACpDiI,GACA,EAAK5S,KAAK,mBAAoB4S,EAAmBhT,QAASrB,EAAO6M,EAAK/J,GACzE,EAEL,EAAKwI,qBAAuB/G,MAAOsI,EAAMT,EAAWpM,KAChD,QAA2BsC,IAAvB,EAAK8F,cACL,OAEJ,MAAM/G,QAAgB,EAAK0G,gBAAgBmB,WAAWkD,EAAW,EAAKhE,eAClE/G,GACA,EAAKI,KAAK,iBAAkBJ,EAASrB,EAAO6M,EAAK/J,GACpD,EAEL,EAAK6J,cAAiBE,IAElB,GADsB,EAAK6F,MAAMvP,IAAI0J,EAAK/J,IAItC,OAFA,EAAKxD,MAAM,mDAAoDuN,EAAK/J,GAAI+J,QACxEA,EAAK/I,UAIT,EAAK4O,MAAM7P,IAAIgK,EAAK/J,GAAI+J,GAExB,MAAMuH,EAAqB,EAAKzB,eAAexP,IAAI0J,EAAK/J,IACxD,GAAIsR,EAAoB,CACpB,IAAK,MAAMM,KAAiBN,EACpBM,IAAkB7H,GAClB6H,EAAc5Q,UAGtB,EAAK6O,eAAerP,OAAOuJ,EAAK/J,GACnC,CACD,EAAKrB,KAAK,iBAAkB,CAAEqB,GAAI+J,EAAK/J,GAAIwM,cAAezC,EAAKyC,eAA/D,EAEJ,EAAKvC,YAAeF,IAChB,GAAI,EAAK6F,MAAMvP,IAAI0J,EAAK/J,MAAQ+J,EAAM,CAElC,MAAMuH,EAAqB,EAAKzB,eAAexP,IAAI0J,EAAK/J,IACxD,IAAKsR,EACD,OAEJ,MAAMlK,EAAQkK,EAAmBQ,QAAQ/H,GAOzC,OANe,IAAX3C,GACAkK,EAAmBS,OAAO3K,EAAO,QAEH,IAA9BkK,EAAmB7T,QACnB,EAAKoS,eAAerP,OAAOuJ,EAAK/J,IAGvC,CACD,IAAK,MAAOgS,EAAK1V,KAAU,EAAKwT,oBACxBxT,EAAMiK,SAAWwD,EAAK/J,IACtB,EAAK8P,oBAAoBtP,OAAOwR,GAGxC,EAAKpC,MAAMpP,OAAOuJ,EAAK/J,IACvB,EAAKrB,KAAK,qBACV,EAAKA,KAAK,cAAeoL,EAAK/J,GAA9B,EAEJ,EAAKkR,kBAAoB,KACrB,EAAKvS,KAAK,oBAAV,EAEJ,EAAKwS,iBAAmB1P,MAAOsI,EAAMT,KACjC,QAA2B9J,IAAvB,EAAK8F,cACL,OAEJ,MAAM/G,QAAgB,EAAK0G,gBAAgBmB,WAAWkD,EAAW,EAAKhE,eAClE/G,GAAWA,EAAQqD,KACnBmI,EAAKwE,gBAAgBjF,EAAW/K,EAAQqD,MAGxCmI,EAAK6E,kBAAkBtF,EAC1B,EAEL,EAAKZ,gBAAkBjH,MAAOsI,EAAMT,EAAW1H,KAC3C,MAAM2P,EAAqB,EAAKzB,oBAAoBzP,IAAIiJ,GACxD,IAAKiI,EACD,OAEJ,MAAMhT,EAAUgT,EAAmBhT,QACnC,GAAI,EAAKL,SAASmE,iBACd,UACU,EAAKnE,SAASmE,iBAAiBlG,OAAOmG,OAAOnG,OAAOmG,OAAO,CAAC,EAAG/D,GAAU,CAAEqD,KAAMA,IAAS,MAAOmI,EAAK/J,GAQ/G,CAND,MAAOuC,GAKH,OAJA,EAAK/F,MAAM,2BAA4B+F,GACvC,EAAKuN,oBAAoBtP,OAAO8I,GAChC,EAAK3K,KAAK,gBAAiBJ,EAASgE,EAAOwH,EAAK/J,SAChD,EAAKiK,YAAYF,EAEpB,CAEL,EAAK+F,oBAAoBtP,OAAO8I,GAChC,EAAK3K,KAAK,iBAAkBJ,EAASqD,EAAMmI,EAAK/J,GAAhD,EAEJ,EAAKoR,gBAAkB,CAACrH,EAAMT,KAC1B,EAAKwG,oBAAoBtP,OAAO8I,GAChC,EAAK3K,KAAK,oBAAV,EAEJ,EAAKmK,eAAiB,CAACiB,EAAMT,EAAW2I,KACpC,MAAMV,EAAqB,EAAKzB,oBAAoBzP,IAAIiJ,GACpDiI,IACA,EAAKzB,oBAAoBtP,OAAO8I,GAChC,EAAK3K,KAAK,gBAAiB4S,EAAmBhT,QAAS0T,EAAalI,EAAK/J,IAC5E,EAEL,EAAKiJ,cAAgB,CAACK,EAAWvI,KAC7B,MAAMwQ,EAAqB,EAAKzB,oBAAoBzP,IAAIiJ,GACpDiI,GACA,EAAK5S,KAAK,eAAgB4S,EAAmBhT,QAASwC,EACzD,EAEL,EAAKmH,mBAAqB,CAACoB,EAAWvI,KAClC,MAAMwQ,EAAqB,EAAKzB,oBAAoBzP,IAAIiJ,GACpDiI,GACA,EAAK5S,KAAK,qBAAsB4S,EAAmBhT,QAASwC,EAC/D,EAEL,EAAKsQ,iBAAmB,CAACtH,EAAMT,KAC3B,MAAMiI,EAAqB,EAAKzB,oBAAoBzP,IAAIiJ,GACpDiI,IACA,EAAKzB,oBAAoBtP,OAAO8I,GAChCS,EAAK/I,UACD,EAAK4O,MAAMpP,OAAO+Q,EAAmBhL,SACrC,EAAK5H,KAAK,qBAEjB,EAEL,EAAK4H,OAASrI,EAASsF,OAnV/B,WACI,MAAM0O,EAAkB,iEAExB,IAAI3L,EAASkJ,EACb,IAAK,IAAInI,EAAI,EAAGA,EAFO,GAEcmI,EAAuBhS,OAAQ6J,IAChEf,GAAU2L,EAAgBC,OAAO7U,KAAK2K,MAAM3K,KAAK0K,SAAWkK,EAAgBzU,SAEhF,OAAO,IAAI2U,aAAcC,OAAO9L,GAAQtE,MAC3C,CA2UuCqQ,GAAmB,IAAIC,YAAY,GAC/D,EAAK/V,MAAMmJ,SACX,EAAKnJ,MAAM,UAAW,EAAKgK,aAAa,IAAI0G,aAAcC,OAAO,EAAK5G,SA3UvC,CA6UtC,aA9UCvB,CAAwBoH,EAA+BnO,YAgV7D5B,EAAQ2I,gBAAkBA,+SCjX1B7I,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQqO,2BAAwB,EAyDhCrO,EAAQqO,sBAxDFA,GACF,WAAYxM,gGAAU,SAClBlC,KAAKkC,SAAWA,EAChBlC,KAAKwW,MAAQ,IAAIpU,IACjBpC,KAAK4M,aAAenH,UAChBzF,KAAKwW,MAAMzS,IAAIxB,EAAQyB,GAAI,CAAEzB,UAASkU,aAAc/P,YAAY9B,OAAhE,EAEJ5E,KAAK+J,eAAiBtE,SACXzF,KAAKwW,MAEhBxW,KAAKoK,WAAa3E,UACd,MAAMiR,EAAY1W,KAAKwW,MAAMnS,IAAIL,GACjC,QAAkBR,IAAdkT,EAIJ,OADAA,EAAUD,aAAe/P,YAAY9B,MAC9B8R,EAAUnU,OAAjB,EAEJvC,KAAK2W,WAAalR,SACPzF,KAAKwW,MAAM/R,IAAIT,GAE1BhE,KAAKqO,MAAQ5I,MAAO6D,EAAesN,KAC/B,MAAMC,EAAmB,GACnBC,EAAoB,GAEpBlS,EAAM8B,YAAY9B,MACxB,IAAK,MAAMmS,KAAiB/W,KAAKwW,MAAM7I,SAC/B/I,EAAMmS,EAAcN,aAAezW,KAAKkC,SAASoF,wBACjDuP,EAAiB1V,KAAK4V,EAAcxU,QAAQyB,IAG5C8S,EAAkB3V,KAAK4V,GAI/B,IAAIC,EAAgBF,EAAkBrV,OAASzB,KAAKkC,SAASqF,oBAC7D,GAAIyP,EAAgB,EAAG,CACnBF,EAAkBG,MAAK,CAACC,EAAGC,IAAMD,EAAET,aAAeU,EAAEV,eACpD,IAAK,MAAMM,KAAiBD,EACxB,SAA6BtT,IAAzBoT,IAAuCA,EAAqBG,EAAcxU,QAAQyB,OAClF6S,EAAiB1V,KAAK4V,EAAcxU,QAAQyB,IAC5CgT,IACsB,IAAlBA,GACA,KAIf,CAED,OADAH,EAAiB5R,SAASjB,GAAOhE,KAAKwW,MAAMhS,OAAOR,KAC5C6S,EAAiBpV,OAAS,CAAjC,EAEJzB,KAAKgF,QAAUS,UACXzF,KAAKwW,MAAMtR,OAAX,CAEP,8/BCxDL/E,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ4B,gBAAa,EAErB,MAAM4E,EAAWpG,EAAQ,MASzBJ,EAAQ4B,WARFA,SAAAA,+rBACF,aAAc,4BACV,eAASmV,YACJzI,GAAK,CAACtJ,EAAOgS,IAAR,yCAA8BhS,EAAOgS,GAE/C,EAAK1U,KAAO,SAAC0C,GAAD,6BAAWiS,EAAX,iCAAWA,EAAX,gFAA+BjS,GAA/B,OAAyCiS,GAAzC,EAJF,CAKb,iEANCrV,CAAmB4E,EAAS+H,yCCnBlCzO,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQkX,kBAAoBlX,EAAQmX,kBAAoBnX,EAAQoX,kBAAe,EAM/EpX,EAAQoX,aALR,SAAsBC,GAClB,OAAOA,EAAQC,eAAmCnU,IAAvBkU,EAAQE,WAC7B,CAAE5R,OAAQ0R,EAAQE,WAAYnW,OAAQiW,EAAQC,SAAWD,EAAQE,iBACjEpU,CACT,EAKDnD,EAAQmX,kBAHR,SAA2BK,EAAIC,GAC3B,YAActU,IAAPqU,OAA0BrU,IAAPsU,OAA0BtU,IAAPsU,GAAoBD,EAAGpW,SAAWqW,EAAGrW,QAAUoW,EAAG7R,SAAW8R,EAAG9R,MAChH,EASD3F,EAAQkX,kBAPR,SAA2BQ,GACvB,QAAkBvU,IAAduU,EACA,OAEJ,MAAMC,EAAMD,EAAU/R,OAAS+R,EAAUtW,OAAS,EAClD,MAAO,SAAP,OAAgBsW,EAAU/R,OAA1B,YAAoCgS,EACvC,67BCHD7X,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ4X,YAAS,EACjB,MAAMpR,EAAWpG,EAAQ,MACnByX,EAA0BzX,EAAQ,MAClC0X,EAAoB1X,EAAQ,MAC5B2X,EAAiB3X,EAAQ,MA2E/BJ,EAAQ4X,OA1EFA,SAAAA,6rBACF,aAA2B,UAAf/V,EAAe,uDAAJ,CAAC,EAAG,kBACvB,gBACKmW,OAAS,IAAIH,EAAwBtR,aAAa1E,EAASmW,QAChE,EAAKC,eAAiB,IAAIH,EAAkBI,eAAe,EAAKF,OAAQnW,EAASiH,UACjFhJ,OAAO0R,KAAKqG,EAAwB9L,QAC/BoM,KAAKC,GAAaP,EAAwB9L,OAAOqM,KACjDxT,SAASI,GAAU,EAAKgT,OAAO1J,GAAGtJ,GAAO,wCAAIiS,EAAJ,yBAAIA,EAAJ,uBAAa,KAAK3U,KAAL,SAAU0C,GAAV,OAAoBiS,GAAjC,MANvB,CAO1B,4CAID,WACI,IAAIlG,EACJ,MAAMsH,EAAS1Y,KA4Bf,OA3BgBoR,EAAE,GACV,aAAc,UACVpR,KAAKkJ,KAAOzD,MAAOiS,EAASjP,EAAQkQ,KAChC3Y,KAAK0X,QAAUA,EACf1X,KAAK2Y,UAAYA,QACX3Y,KAAK4Y,KAAK1P,KAAKwO,EAASjP,EAAQkQ,EAAtC,EAEJ3Y,KAAKuE,MAAQ,KACLvE,KAAK0X,SACL1X,KAAK4Y,KAAKrU,MAAMvE,KAAK0X,QAAS1X,KAAK2Y,UACtC,EAEL3Y,KAAKgF,QAAU,KACPhF,KAAK0X,SACL1X,KAAK4Y,KAAKrU,MAAMvE,KAAK0X,QACxB,EAEL1X,KAAK6Y,kBAAoB,KAAzB,EACA7Y,KAAK4Y,KAAO,IAAIR,EAAeU,YAAYJ,EAAOJ,gBAClDI,EAAOK,oBAAoB/Y,MAC3BA,KAAKgZ,MAAQhZ,KAAK4Y,KAAKI,KAC1B,KAEFC,UAAY,IACJP,EAEXtH,CAEP,wBACD3L,uBACUzF,KAAKsY,eAAetT,SAC7B,oCACD,WACQhF,KAAKkZ,mBACLlZ,KAAKkZ,iBAAiB3U,QACtBvE,KAAKkZ,sBAAmB1V,EAE/B,4BACD,WACI,MAAO,CACH2F,SAAUnJ,KAAKsY,eAAejO,cAC9BgO,OAAQrY,KAAKqY,OAAOhO,cAE3B,2BACD,WACI,MAAO,CACHgO,OAAQrY,KAAKqY,OAAO/N,aAE3B,kCACD,SAAkBvH,EAAKgV,EAAWhD,EAAOoE,GACrCnZ,KAAKsY,eAAec,kBAAkBrW,EAAKgV,EAAWhD,EAAOoE,EAChE,+CACD,SAA+BE,GAC3BrZ,KAAKsY,eAAegB,+BAA+BD,EACtD,oCACD,SAAoBhB,GAChBrY,KAAKkZ,iBAAmBb,CAC3B,8BA/DD,WACI,OAAOH,EAAwBtR,aAAaiI,aAC/C,OAXCoJ,CAAepR,EAAS+H,uNCN9B,IAAI7O,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQyY,iBAAc,EACtB,MAAM/W,EAAUhC,EAAgBU,EAAQ,OAClCyX,EAA0BzX,EAAQ,MAClC8Y,EAAe9Y,EAAQ,MAgL7BJ,EAAQyY,YA/KFA,WACF,WAAYR,gGAAgB,SACxBtY,KAAKsY,eAAiBA,EACtBtY,KAAKQ,OAAQ,EAAIuB,EAAQrB,SAAS,sBAClCV,KAAKgZ,MAAQ,CACT1T,OAAQ,EACRE,MAAO,EACPgU,SAAS,EACTC,MAAO,EACPC,WAAY,EACZC,WAAY,EACZC,QAAS,CACL7E,MAAO,EACPiD,IAAK,EACL6B,MAAO,GAEXC,QAAS,CACL/E,MAAO,EACPiD,IAAK,GAET+B,UAAW,CACPhF,MAAO,EACPiD,IAAK,EACL6B,MAAO,IAGf7Z,KAAKga,oBAAsBha,KAAKia,eAAeC,KAAKla,MACpDA,KAAKma,yBAA2Bna,KAAKoa,oBAAoBF,KAAKla,MAC9DA,KAAKqa,oBAAsBra,KAAKsa,eAAeJ,KAAKla,MACpDA,KAAKua,wBAA0Bva,KAAKkM,mBAAmBgO,KAAKla,MAC5DA,KAAKwa,QAAU,EAClB,gEAwID,SAAiCxB,GAC7B,GAAIA,EAAMQ,QACN,OACJ,MAAMzE,EAAQrO,YAAY9B,MAC1BoU,EAAMY,QAAQ7E,MAAQA,EACtBiE,EAAMY,QAAQC,MAAQ9E,CACzB,0BA7IDtP,eAAWiS,EAAS+C,EAAS9B,GAIzB,GAHA3Y,KAAK0X,QAAUA,EACf1X,KAAK2Y,UAAYA,EACjBG,EAAY4B,0BAA0B1a,KAAKgZ,OACvChZ,KAAK0X,QAAQiD,KAAM,CACnB3a,KAAKQ,MAAL,2BAA+BR,KAAK0X,QAAQ3U,IAA5C,MACA,IACI,MAAM6X,QAAe5a,KAAKsY,eAAeuC,aAAa7a,KAAK0X,QAAQ3U,KACnE/C,KAAKQ,MAAL,mBAAuBR,KAAK0X,QAAQ3U,IAApC,aACA/C,KAAK8a,gBAAgBF,EAAQ5a,KAAK0X,QAAS1X,KAAK2Y,UAInD,CAFD,MAAOoC,GACH/a,KAAKuG,MAAMwU,EAAG/a,KAAK0X,QAAS1X,KAAK2Y,UACpC,CACJ,MACI,GAAI3Y,KAAK0X,QAAQsD,KAAM,CACxBhb,KAAKqY,OAASrY,KAAKsY,eAAeD,OAClCrY,KAAK+X,WAAY,EAAIwB,EAAa9B,cAAczX,KAAK0X,SACrD1X,KAAKwa,QAAUxa,KAAK+X,UAAL,UACN/X,KAAK0X,QAAQ3U,IADP,cACgB/C,KAAK+X,UAAU/R,QACxChG,KAAK0X,QAAQ3U,IACnB/C,KAAKQ,MAAL,2BAA+BR,KAAKwa,QAApC,MAEAxa,KAAKqB,SAAWkN,aAAY,IAAMuK,EAAY4B,0BAA0B1a,KAAKgZ,QAAQ,KACrFhZ,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOoC,aAAcxO,KAAKga,qBACjEha,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOc,YAAalN,KAAKma,0BAChEna,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOC,iBAAkBrM,KAAKua,yBACrE,IACI,MAAMK,QAAe5a,KAAKsY,eAAe2C,YAAYjb,KAAK0X,QAAQ3U,IAAK/C,KAAK+X,YACtE,QAAEmD,GAAYN,EAChBM,GACAlb,KAAKmb,eAAeD,EAASlb,KAAK0X,QAAS1X,KAAK2Y,WAChD3Y,KAAKQ,MAAL,0BAA8BR,KAAKwa,QAAnC,QAGAxa,KAAKob,UACLpb,KAAKQ,MAAL,gCAAoCR,KAAKwa,QAAzC,iBAMP,CAHD,MAAOO,GACHjQ,YAAW,IAAM9K,KAAKuG,MAAMwU,EAAG/a,KAAK0X,QAAS1X,KAAK2Y,YAAY,GAC9D3Y,KAAKQ,MAAL,4BAAgCR,KAAKwa,QAArC,aAAyDO,EAC5D,CACJ,MAEGM,QAAQC,KAAK,uBAAwBtb,KAAK0X,QAEjD,sBACD,SAAMA,EAASiB,GACX,GAAI3Y,KAAKgZ,MAAM1T,QAAUtF,KAAKgZ,MAAMQ,QAChC,OACJxZ,KAAKQ,MAAL,sCAA0CR,KAAKwa,QAA/C,cACAxa,KAAKob,UACLpb,KAAKsY,eAAeiD,aAAa7D,EAAQ3U,KAAK,EAAIwW,EAAa9B,cAAcC,IAC7E1X,KAAKgZ,MAAMQ,SAAU,EACrB,MAAMgC,EAAU7C,aAA6C,EAASA,EAAU6C,QAC5EA,GACAA,EAAQxb,KAAKgZ,MAAOtB,OAASlU,EAEpC,gCACD,SAAgBN,EAAKwU,EAASiB,GAC1B3Y,KAAKob,UACL,MAAMxW,EAAM8B,YAAY9B,MACxB5E,KAAKgZ,MAAMY,QAAQ5B,IAAMpT,EACzB5E,KAAKgZ,MAAM1T,OAASpC,EAAI2C,SAASpE,OACjCzB,KAAKgZ,MAAMxT,MAAQtC,EAAI2C,SAASpE,OAChCkX,EAAU8C,UAAU,CAChB1Y,IAAKG,EAAIkD,YACTR,KAAM1C,EAAI2C,UACX7F,KAAKgZ,MAAOtB,OAASlU,EAC3B,+BACD,SAAe0X,EAASxD,EAASiB,GAC7B3Y,KAAKob,UACL,MAAMxW,EAAM8B,YAAY9B,MACxB5E,KAAKgZ,MAAMY,QAAQ5B,IAAMpT,EACzB5E,KAAKgZ,MAAM1T,OAAS4V,EAAQtX,WAC5B5D,KAAKgZ,MAAMxT,MAAQ0V,EAAQtX,WACvB+U,EAAU+C,YACV/C,EAAU+C,WAAW1b,KAAKgZ,MAAOtB,EAASwD,OAAS1X,GAEvDmV,EAAU8C,UAAU,CAChB1Y,IAAK2U,EAAQ3U,IACb6C,KAAMsV,GACPlb,KAAKgZ,MAAOtB,OAASlU,EAC3B,sBACD,SAAM+C,EAAOmR,EAASiB,GAClB3Y,KAAKob,UACLzC,EAAUgD,QAAQpV,EAAOmR,OAASlU,EACrC,wBACD,WACQxD,KAAKqB,WACLsJ,cAAc3K,KAAKqB,UACnBrB,KAAKqB,cAAWmC,GAEhBxD,KAAKqY,SACLrY,KAAKqY,OAAOuD,IAAI1D,EAAwB9L,OAAOC,iBAAkBrM,KAAKua,yBACtEva,KAAKqY,OAAOuD,IAAI1D,EAAwB9L,OAAOc,YAAalN,KAAKma,0BACjEna,KAAKqY,OAAOuD,IAAI1D,EAAwB9L,OAAOG,qBAAsBvM,KAAKqa,qBAC1Era,KAAKqY,OAAOuD,IAAI1D,EAAwB9L,OAAOoC,aAAcxO,KAAKga,qBAEzE,+BACD,SAAezX,GACX,IAAI6O,EACJ,IAAKpR,KAAK6b,UAAUtZ,GAChB,OACJvC,KAAKQ,MAAL,gDAAoDR,KAAKwa,SAAW,GAApE,MACAxa,KAAKgZ,MAAMQ,SAAU,EACrB,MAAMgC,EAAoC,QAAzBpK,EAAKpR,KAAK2Y,iBAA8B,IAAPvH,OAAgB,EAASA,EAAGoK,QAC1EA,GACAA,EAAQxb,KAAKgZ,MAAOhZ,KAAK0X,aAASlU,GAEtCxD,KAAKob,SACR,oCACD,SAAoB7Y,EAASwC,GACpB/E,KAAK6b,UAAUtZ,KAEpBvC,KAAKgZ,MAAMxT,MAAQT,EACtB,+BACD,SAAe+W,EAAOvZ,EAASrB,GACtBlB,KAAK6b,UAAUtZ,KAEpBvC,KAAKgZ,MAAM1T,QAAUpE,EACxB,mCACD,SAAmBiL,EAAQ5J,GAClBvC,KAAKqB,UAAuB,SAAX8K,GAAsBnM,KAAK6b,UAAUtZ,KAE3DoI,cAAc3K,KAAKqB,UACnBrB,KAAKqB,cAAWmC,EAChBsV,EAAY4B,0BAA0B1a,KAAKgZ,OAC3ChZ,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOG,qBAAsBvM,KAAKqa,qBAC5E,0BAED,SAAU9X,GACN,OAAOA,EAAQQ,MAAQ/C,KAAK0X,QAAQ3U,KAAOR,EAAQe,SAAU,EAAIiW,EAAahC,mBAAmBvX,KAAK+X,UACzG,sFAtKCe,qCCPN,IAAI5J,EAAmBlP,MAAQA,KAAKkP,kBAAqB/O,OAAOgP,OAAU,SAASC,EAAGC,EAAGC,EAAGC,QAC7E/L,IAAP+L,IAAkBA,EAAKD,GAC3B,IAAIE,EAAOrP,OAAOsP,yBAAyBJ,EAAGC,GACzCE,KAAS,QAASA,GAAQH,EAAEnP,WAAasP,EAAKE,UAAYF,EAAKG,gBAClEH,EAAO,CAAEI,YAAY,EAAMvL,IAAK,WAAa,OAAOgL,EAAEC,EAAK,IAE7DnP,OAAOC,eAAegP,EAAGG,EAAIC,EAChC,EAAK,SAASJ,EAAGC,EAAGC,EAAGC,QACT/L,IAAP+L,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,EACb,GACGO,EAAgB7P,MAAQA,KAAK6P,cAAiB,SAASR,EAAGhP,GAC1D,IAAK,IAAIyP,KAAKT,EAAa,YAANS,GAAoB3P,OAAO6O,UAAUe,eAAeC,KAAK3P,EAASyP,IAAIZ,EAAgB7O,EAASgP,EAAGS,EAC1H,EACG/P,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQ0b,aAAe1b,EAAQ2b,yBAA2B3b,EAAQ4b,uBAAyB5b,EAAQ6b,8BAAgC7b,EAAQ8b,0BAA4B9b,EAAQ+b,iBAAmB/b,EAAQgc,gBAAkBhc,EAAQ4P,aAAU,EAE9O5P,EAAQ4P,QAAU,QAClBJ,EAAapP,EAAQ,MAAaJ,GAClCwP,EAAapP,EAAQ,MAAsBJ,GAC3C,MACMG,GAAQ,EADET,EAAgBU,EAAQ,OACdC,SAAS,oBACnC,SAAS2b,EAAgBC,GACjBA,GAAUA,EAAO7T,QAAU6T,EAAO7T,OAAO4P,QAAoD,mBAAnCiE,EAAO7T,OAAO4P,OAAOY,WAC/EsD,EAAgBD,EAAQA,EAAO7T,OAAO4P,OAAOY,YAEpD,CAiFD,SAASsD,EAAgBD,EAAQ5D,GAC7B4D,EAAO3N,GAAG,kBAAkB,CAAC6N,EAAQ5W,KACjCpF,EAAM,oBAAqBoF,GAC3B,MAAMoV,EAAOpV,EAAKoV,KAIlBtC,EAAOU,kBAAkB4B,EAAKjY,IAHc,IAA1BiY,EAAKjD,UAAUtW,YAC3B+B,EACA,CAAEwC,OAAQgV,EAAKjD,UAAU,GAAItW,OAAQuZ,EAAKjD,UAAU,GAAKiD,EAAKjD,UAAU,IAChCiD,EAAKjG,MAAOiG,EAAK7B,SAA/D,IAEJmD,EAAO3N,GAAG,iBAAiBlJ,gBACjBiT,EAAO1T,SAAb,IAEJsX,EAAO3N,GAAG,YAAY,CAAC6N,EAAQC,KAC3B,GAA0B,uBAAtBA,EAAU1P,QAAkC,CAC5C,MAAM2P,OAAqClZ,IAAjB8Y,EAAOK,MAC3BL,EAAOM,IACPN,EAAOK,MACTD,GACAhE,EAAOY,+BAA+BoD,EAAiBG,YAE9D,KAELP,EAAO3N,GAAG,WAAW,KACjBnO,EAAM,mBAGNkY,EAAOoE,qBAAP,GAEP,CA5GDzc,EAAQgc,gBAAkBA,EAU1Bhc,EAAQ+b,iBATR,SAA0BE,GACtBA,EAAO3N,GAAG,QAAQ,KACd,MAAMoO,EAAWT,EAAOU,KAAKC,qBACzBF,EAASG,OAASH,EAASG,KAAKC,qBAChCJ,EAASG,KAAKC,oBAAqB,EACnCd,EAAgBC,EAAOU,KAAKC,qBAAqBC,MACpD,GAER,EAKD7c,EAAQ8b,0BAHR,SAAmCG,GAC/BA,EAAO3N,GAAG,SAAS,KAAQ,IAAIyC,EAAI,OAAOiL,EAA+C,QAA9BjL,EAAKkL,EAAO5D,OAAO0E,aAA0B,IAAPhM,EAAgBA,EAAKkL,EAAO5D,OAAO2E,IAAjG,GACtC,EAaDhd,EAAQ6b,8BAXR,SAAuCI,GACnCA,EAAOgB,OAAM,KACT,MAAMC,EAAUjB,EAAOkB,MAAMC,SACzBF,GACAA,EAAQG,aACRH,EAAQG,YAAYrF,QAC4B,mBAAzCkF,EAAQG,YAAYrF,OAAOY,WAClCsD,EAAgBD,EAAOkB,MAAOD,EAAQG,YAAYrF,OAAOY,YAC5D,GAER,EAYD5Y,EAAQ4b,uBAVR,WACmBzY,MAAXma,SAA8Cna,MAAtBma,QAAQC,YAGpCD,QAAQC,WAAWC,QAAQ,oBAAoB,CAACC,EAAeV,KACvDA,EAAM3U,QAAU2U,EAAM3U,OAAO4P,QAAmD,mBAAlC+E,EAAM3U,OAAO4P,OAAOY,WAClEsD,EAAgBa,EAAOA,EAAM3U,OAAO4P,OAAOY,YAC9C,GAER,EAiCD5Y,EAAQ2b,yBA/BR,SAAkC+B,GAC9BA,EAAa3Y,iBAAiB,kBAAmBC,IAC7C,MAAMgY,EAAMU,EAAaC,UACzB,GAAIX,GAAOA,EAAI5U,QAAU4U,EAAI5U,OAAO4P,QAAiD,mBAAhCgF,EAAI5U,OAAO4P,OAAOY,UAA0B,CAC7F,MAAMP,EAAS2E,EAAI5U,OAAO4P,OAAOY,YACjC,GAAI5T,EAAMO,MAAQP,EAAMO,KAAKnE,OAAS,EAAG,CACrC,MAAMuZ,EAAO3V,EAAMO,KAAK,GAAGoV,KAI3BtC,EAAOU,kBAAkB4B,EAAKjY,IAHc,IAA1BiY,EAAKjD,UAAUtW,YAC3B+B,EACA,CAAEwC,OAAQgV,EAAKjD,UAAU,GAAItW,OAAQuZ,EAAKjD,UAAU,GAAKiD,EAAKjD,UAAU,IAChCiD,EAAKjG,MAAOiG,EAAK7B,SAClE,CACJ,KAEL4E,EAAa3Y,iBAAiB,iBAAiBK,UAC3C,MAAM4X,EAAMU,EAAaC,UACzB,GAAIX,GAAOA,EAAI5U,QAAU4U,EAAI5U,OAAO4P,QAAiD,mBAAhCgF,EAAI5U,OAAO4P,OAAOY,UAA0B,CAC7F,MAAMP,EAAS2E,EAAI5U,OAAO4P,OAAOY,kBAC3BP,EAAO1T,SAChB,KAEL+Y,EAAa3Y,iBAAiB,YAAaC,IACvC,MAAMgY,EAAMU,EAAaC,UACrBX,GAAOA,EAAI5U,QAAU4U,EAAI5U,OAAO4P,QAAiD,mBAAhCgF,EAAI5U,OAAO4P,OAAOY,gBAChDzV,IAAf6B,EAAMO,MAA6C,uBAAvBP,EAAMO,KAAKmH,SACxBsQ,EAAI5U,OAAO4P,OAAOY,YAC1BK,+BAA+B+D,EAAIV,MAAME,YAEvD,GAER,EAWDxc,EAAQ0b,aATR,SAAsBO,EAAQoB,GAC1B,MAAMO,EAAM1P,aAAY,KAChB+N,EAAOe,KAAOf,EAAOe,IAAI5U,SACzBkC,cAAcsT,GACd9d,OAAOmG,OAAOgW,EAAOe,IAAI5U,OAAQiV,GACjCrB,EAAgBC,EAAOe,KAC1B,GACF,IACN,qZC7GD,IAAItd,EAAmBC,MAAQA,KAAKD,iBAAoB,SAAUE,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,EACvD,EACDE,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQkY,oBAAiB,EACzB,MAAMxW,EAAUhC,EAAgBU,EAAQ,OAClCyX,EAA0BzX,EAAQ,MAClCyd,EAAgBzd,EAAQ,MACxB8Y,EAAe9Y,EAAQ,MACvB4G,EAAkB,CACpB8W,oBAAqB,GACrBC,aAAS5a,EACT6a,mBAAe7a,OAEb+U,EAAAA,WACF,WAAYF,GAAuB,IAAfnW,EAAe,uDAAJ,CAAC,EAAG,UAC/BlC,KAAKQ,OAAQ,EAAIuB,EAAQrB,SAAS,yBAClCV,KAAKse,eAAiB,KACtBte,KAAKue,iBAAmB,IAAInc,IAC5BpC,KAAKwe,eAAiB,KACtBxe,KAAKye,UAAY,GACjBze,KAAK0M,gBAAmBnK,IAChBvC,KAAKwe,gBACLxe,KAAKwe,eAAe5b,aAAeL,EAAQQ,MAC3C,EAAIwW,EAAahC,mBAAmBvX,KAAKwe,eAAeE,oBAAsBnc,EAAQe,QAEtFtD,KAAKwe,eAAe/C,UAAUlZ,EAAQqD,KAAK4N,MAAM,GAAIjR,EAAQoK,mBAC7D3M,KAAKwe,eAAiB,KACzB,EAELxe,KAAK8M,eAAiB,CAACvK,EAASgE,KACxBvG,KAAKwe,gBACLxe,KAAKwe,eAAe5b,aAAeL,EAAQQ,MAC3C,EAAIwW,EAAahC,mBAAmBvX,KAAKwe,eAAeE,oBAAsBnc,EAAQe,QACtFtD,KAAKwe,eAAe7C,QAAQpV,GAC5BvG,KAAKwe,eAAiB,KACzB,EAELxe,KAAKia,eAAkB1X,IACfvC,KAAKwe,gBACLxe,KAAKwe,eAAe5b,aAAeL,EAAQQ,MAC3C,EAAIwW,EAAahC,mBAAmBvX,KAAKwe,eAAeE,oBAAsBnc,EAAQe,QACtFtD,KAAKwe,eAAe7C,QAAQ,mCAC5B3b,KAAKwe,eAAiB,KACzB,EAELxe,KAAKkC,SAAW/B,OAAOmG,OAAOnG,OAAOmG,OAAO,CAAC,EAAGe,GAAkBnF,GAClElC,KAAKqY,OAASA,EACdrY,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOS,cAAe7M,KAAK0M,iBAClE1M,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOY,aAAchN,KAAK8M,gBACjE9M,KAAKqY,OAAO1J,GAAGuJ,EAAwB9L,OAAOoC,aAAcxO,KAAKia,eACpE,sCACD,WACI,OAAOja,KAAKkC,QACf,gCACD,SAAgBe,EAAYiY,EAAS/U,GACjC,MAAMwY,EAAS,IAAIT,EAAcU,OACjCD,EAAOxd,KAAK+Z,GACZyD,EAAO3G,MACP,MAAM6G,EAAW,IAAIC,EAAS7b,EAAYkD,EAAawY,EAAOI,UAC9D,GAAIF,EAASE,SAASC,UAAW,CAC7Bhf,KAAKse,eAAiBO,EACtB,IAAK,MAAO7I,EAAKiJ,KAAoBjf,KAAKue,iBAAkB,CACxD,MAAM,cAAEnV,EAAF,MAAiB8V,EAAjB,MAAwB9T,GAAUpL,KAAKmN,iBAAiB8R,EAAgBhc,YACzEic,GAIDD,EAAgB7V,cAAgBA,EAChC6V,EAAgB7R,SAAW,IAAMhC,EAAM4I,YAJvChU,KAAKue,iBAAiB/Z,OAAOwR,EAMpC,CACJ,KACI,CACD,MAAM,cAAE5M,EAAF,MAAiB8V,EAAjB,MAAwB9T,GAAUpL,KAAKmN,iBAAiBlK,IAC1Dic,GAAiC,OAAxBlf,KAAKse,kBAEdO,EAASzV,cAAgBA,EACzByV,EAASzR,SAAmC,OAAxBpN,KAAKse,oBAA0B9a,EAAY,IAAM4H,EAAM4I,WAC3EhU,KAAKue,iBAAiBxa,IAAId,EAAY4b,GACtC7e,KAAKmf,iBAEZ,CACJ,6BACD1Z,eAAmB1C,GACf,MAAMsb,EAAgBre,KAAKkC,SAASmc,cACpC,IAAInb,EACJ,QAAsBM,IAAlB6a,EAA6B,CAC7B,IAAI/U,EACJA,EAAgBtJ,KAAKof,wBACC5b,IAAlB8F,IACAA,EAAgBvG,EAAIkP,MAAM,KAAK,IAEnC,MAAMoN,QAAchB,EAAciB,SAASvc,OAAKS,EAAW8F,QAE7C9F,IAAV6b,EACAnc,EAAM,CACFkD,YAAaiZ,EAAME,YACnB1Z,SAAUwZ,EAAMzZ,OAIpB1C,QAAYlD,KAAKwf,YAAYzc,EAAK,QAC7Bsb,EAAcoB,WAAW,CAC1BC,kBAA2C,OAAxB1f,KAAKse,eAA0Bte,KAAKse,eAAerb,WAAaF,EACnFuG,cAAeA,EACfqW,WAAY5c,EACZwc,YAAarc,EAAIkD,YACjBR,KAAM1C,EAAI2C,WAGrB,MAEG3C,QAAYlD,KAAKwf,YAAYzc,EAAK,QAMtC,OAHAsY,QAAQuE,IAAI,qCAAsC7c,EAAKG,EAAI2C,SAAU3C,EAAIkD,aAEzEpG,KAAK6f,gBAAgB9c,EAAKG,EAAI2C,SAAU3C,EAAIkD,aACrClD,CACV,4BACDuC,eAAkB1C,EAAKgV,GAEnB,IAAI3G,EACJ,MAAM0O,EAAkB9f,KAAK+f,mBAAmBhd,EAAKgV,GAC/CiI,GAAkB,EAAIzG,EAAahC,mBAAmBQ,GAC5D,IAAK+H,EAAiB,CAClB,IAAI5E,EAEJ,MAAMmD,EAAgBre,KAAKkC,SAASmc,cACpC,QAAsB7a,IAAlB6a,EAA6B,CAC7B,IACI/U,EADAoW,EAAmD,QAA9BtO,EAAKpR,KAAKse,sBAAmC,IAAPlN,OAAgB,EAASA,EAAGnO,WAG3F,GADAqG,EAAgBtJ,KAAKof,wBACC5b,IAAlB8F,GAA8D,IAA/BtJ,KAAKue,iBAAiBxZ,KAAY,CACjE,MAAM6V,EAAS5a,KAAKue,iBAAiB5Q,SAASsS,OACzCrF,EAAOsF,OAER5W,EAAgBsR,EAAOta,MAAM2C,WAAWgP,MAAM,KAAK,GAE1D,CACD,QAA0BzO,IAAtBkc,GAAkE,IAA/B1f,KAAKue,iBAAiBxZ,KAAY,CACrE,MAAM6V,EAAS5a,KAAKue,iBAAiB5Q,SAASsS,OACzCrF,EAAOsF,OAERR,EAAoB9E,EAAOta,MAAM2C,WAExC,CACD,QAAsBO,IAAlB8F,QAAqD9F,IAAtBkc,EAAiC,CAChE,MAAML,QAAchB,EAAciB,SAASvc,EAAKid,EAAiB1W,GACjE,QAAc9F,IAAV6b,EACAnE,EAAUmE,EAAMzZ,SAEf,CACD,MAAM1C,QAAYlD,KAAKwf,YAAYzc,EAAK,cAAeid,GACvD9E,EAAUhY,EAAI2C,SACTwY,EAAcoB,WAAW,CAC1BC,kBAAmBA,EACnBpW,cAAeA,EACfqW,WAAY5c,EACZod,aAAcH,EACdT,YAAarc,EAAIkD,YACjBR,KAAMsV,GAEb,CACJ,CACJ,CAKD,YAJgB1X,IAAZ0X,IAEAA,SADkBlb,KAAKwf,YAAYzc,EAAK,cAAeid,IACzCna,UAEX,CAAEqV,UAASvO,kBAAmB,EACxC,CACD,MAAMyT,GAAmBN,EAAgBjB,SAASE,SAASsB,cAAgBP,EAAgBjB,SAASE,SAASsB,cAAgB,GACzHP,EAAgBQ,aAChBtgB,KAAKye,UAAUhd,OAAS,GACAzB,KAAKye,UAAUze,KAAKye,UAAUhd,OAAS,GAC3C2e,kBAAoBA,EAAkB,IAEtDpgB,KAAKye,UAAY,IAGrBze,KAAKwe,gBACLxe,KAAKwe,eAAe7C,QAAQ,2EAEhC,MAAM4E,EAAU,IAAIC,SAAQ,CAACC,EAASC,KAClC1gB,KAAKwe,eAAiB,IAAI/M,EAAe1O,EAAKgV,EAAWqI,EAAiBN,EAAgBjB,SAAS5b,YAAY,CAACiY,EAASvO,IAAsB8T,EAAQ,CAAEvF,UAASvO,wBAAuBpG,GAAUma,EAAOna,IAA1M,IAIJ,OAFAvG,KAAKye,UAAUtd,KAAK,CAAEyB,WAAYG,EAAK2b,iBAAkB3G,EAAWqI,gBAAiBA,IAChFpgB,KAAK2gB,aAAab,EAAgBjB,SAAUiB,EAAgBQ,cAAc,GACxEC,CACV,kCACD,SAAkBxd,EAAKgV,EAAWhD,EAAOoE,GACrC,MAAMyH,EAAW5gB,KAAKye,UAAUoC,WAAWte,GAAYA,EAAQK,aAAeG,IAAO,EAAIwW,EAAa/B,mBAAmBjV,EAAQmc,iBAAkB3G,KACnJ/X,KAAKQ,MAAM,kCAAmCogB,EAAU5gB,KAAKye,WACzDmC,GAAY,IACZ5gB,KAAKye,UAAYze,KAAKye,UAAUjL,MAAMoN,GACtC5gB,KAAKye,UAAU,GAAGqC,aAAe,CAAE/L,QAAOoE,YAC1CnZ,KAAKmf,iBAEZ,+CACD,SAA+B9F,GAC3B,GAA8B,IAA1BrZ,KAAKye,UAAUhd,SAAiBzB,KAAKye,UAAU,GAAGqC,aAClD,OAEJ,MAAMC,EAAyB/gB,KAAKye,UAAU,GAAGqC,aAC1BC,EAAuBhM,MAAQgM,EAAuB5H,SACxDE,EAAmB,KAGpCrZ,KAAKye,UAAYze,KAAKye,UAAUjL,MAAM,GACtCxT,KAAKmf,iBAEZ,6BACD,SAAapc,EAAKgV,GACV/X,KAAKwe,gBACLxe,KAAKwe,eAAe5b,aAAeG,IACnC,EAAIwW,EAAa/B,mBAAmBxX,KAAKwe,eAAeE,iBAAkB3G,KAC1E/X,KAAKwe,eAAe/C,eAAUjY,EAAW,GACzCxD,KAAKwe,eAAiB,KAE7B,oCACD,WACSxe,KAAKwe,iBAEVxe,KAAKwe,eAAe/C,eAAUjY,EAAW,GACzCxD,KAAKwe,eAAiB,KACzB,wBACD/Y,iBACQzF,KAAKwe,iBACLxe,KAAKwe,eAAe7C,QAAQ,qCAC5B3b,KAAKwe,eAAiB,MAE1Bxe,KAAKse,eAAiB,KACtBte,KAAKue,iBAAiBrZ,QACtBlF,KAAKye,UAAY,QACmBjb,IAAhCxD,KAAKkC,SAASmc,qBACRre,KAAKkC,SAASmc,cAAcrZ,gBAEhChF,KAAKqY,OAAOrT,SACrB,+BACD,WACI,IAAKhF,KAAKwe,eACN,OAEJ,MAAMsB,EAAkB9f,KAAK+f,mBAAmB/f,KAAKwe,eAAe5b,WAAY5C,KAAKwe,eAAeE,kBACpG1e,KAAKQ,MAAM,kBAAmBsf,GAC1BA,GACK9f,KAAK2gB,aAAab,EAAgBjB,SAAUiB,EAAgBQ,cAAc,EAEtF,mCACD,SAAmBvd,EAAKgV,GACpB,IAAK,MAAM8G,KAAY7e,KAAKue,iBAAiB5Q,SAAU,CACnD,MAAM2S,EAAezB,EAASmC,gBAAgBje,EAAKgV,GACnD,GAAIuI,GAAgB,EAChB,MAAO,CAAEzB,SAAUA,EAAUyB,aAAcA,EAElD,CAEJ,6BACD7a,eAAmBoZ,EAAUyB,EAAcW,GACvC,IAAI7P,EACJ,MAAMjI,EAAW,GACX+X,EAAmBrC,EAASE,SAAS5V,SACrCgY,EAA6D,QAA1C/P,EAAKyN,EAASE,SAASsB,qBAAkC,IAAPjP,EAAgBA,EAAK,EAChG,IAAIgQ,EAAgB,KAChBve,EAAWvB,KAAK+f,IAAI,EAAGrhB,KAAKye,UAAUhd,OAAS,GACnD,MAAM6H,EAAgBtJ,KAAKof,mBAC3Bpf,KAAKQ,MAAM,gBAAiBqC,EAAUyd,GACtC,IAAK,IAAIhV,EAAIgV,EAAchV,EAAI4V,EAAiBzf,QAAU0H,EAAS1H,OAASzB,KAAKkC,SAASic,sBAAuB7S,EAAG,CAChH,MAAM/I,EAAUsc,EAASE,SAAS5V,SAASmC,GACrCvI,EAAM8b,EAASyC,sBAAsB/e,EAAQgf,KAC7CxJ,EAAYxV,EAAQif,UACpBxd,EAAKhE,KAAKyhB,aAAa5C,EAAUsC,EAAkB7V,GACzDnC,EAAShI,KAAK,CACV6C,GAAIA,EACJjB,IAAKA,EACLuG,mBAAiC9F,IAAlB8F,EAA8BA,EAAgBuV,EAASzV,cACtEsW,kBAA2C,OAAxB1f,KAAKse,eAA0Bte,KAAKse,eAAerb,WAAa4b,EAAS5b,WAC5FmK,SAAUyR,EAASzR,SACnBG,UAAW4T,EAAkB7V,GAAG0I,WAChC1Q,OAAO,EAAIiW,EAAahC,mBAAmBQ,GAC3ClV,SAAUA,MAEVoe,IAAwBG,IACxBA,EAAgBpd,EAEvB,CAED,GADAhE,KAAKqY,OAAOnP,KAAKC,EAAU0V,EAASzV,eAChCgY,EAAe,CACf,MAAM7e,QAAgBvC,KAAKqY,OAAOjO,WAAWgX,GACzC7e,GAEAvC,KAAK0M,gBAAgBnK,EAE5B,CACJ,6BACD,SAAasc,EAAUuB,GACnB,MAAO,GAAP,OAAUvB,EAASzV,cAAnB,YAAoCgX,EACvC,iCACD,WACI,MAAMsB,EAAkB1hB,KAAKkC,SAASkc,SAA4C,IAAjCpe,KAAKkC,SAASkc,QAAQ3c,OAAezB,KAAKkC,SAASkc,aAAU5a,EAC9G,YAAwBA,IAApBke,EACOA,EAEoB,OAAxB1hB,KAAKse,eAA0Bte,KAAKse,eAAerb,WAAWgP,MAAM,KAAK,QAAKzO,CACxF,iCACD,SAAiBme,GACb,MAAMrY,EAAgBtJ,KAAKof,mBAC3B,GAAIpf,KAAKse,gBAAkBte,KAAKse,eAAeS,SAASC,WAAa1V,EACjE,IAAK,IAAIgC,EAAI,EAAGA,EAAItL,KAAKse,eAAeS,SAASC,UAAUvd,SAAU6J,EAEjE,GADY,IAAIsW,IAAI5hB,KAAKse,eAAeS,SAASC,UAAU1T,GAAGiW,IAAKvhB,KAAKse,eAAenY,aAAa6N,aACxF2N,EACR,MAAO,CAAEvY,cAAe,GAAF,OAAKE,EAAL,aAAuBgC,GAAK4T,OAAO,EAAM9T,MAAOE,GAIlF,MAAO,CACHlC,cAAeE,QAAqDA,EAAgBqY,EAAY1P,MAAM,KAAK,GAC3GiN,OAAO,EACP9T,OAAQ,EAEf,4BACD3F,eAAkB1C,EAAKM,EAAcC,GACjC,OAAO,IAAIkd,SAAQ,CAACC,EAASC,KACzB,MAAMxd,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOL,GAAK,GACrBG,EAAIG,aAAeA,EACfC,GACAJ,EAAIK,iBAAiB,QAASD,GAElCJ,EAAIkC,iBAAiB,oBAAoB,KACd,IAAnBlC,EAAI2e,aAEJ3e,EAAIwC,QAAU,KAAOxC,EAAIwC,OAAS,IAClC+a,EAAQvd,GAGRwd,EAAOxd,EAAI4e,YACd,IAEL,MAAMhe,EAAW9D,KAAKqY,OAAOhO,cAAcvG,SACvCA,GACAA,EAASZ,EAAKH,GAElBG,EAAIgB,MAAJ,GAEP,OA7UCqU,GA+UNlY,EAAQkY,eAAiBA,MACnBuG,EAAAA,WACF,WAAY7b,EAAYkD,EAAa4Y,GAAU,UAC3C/e,KAAKiD,WAAaA,EAClBjD,KAAKmG,YAAcA,EACnBnG,KAAK+e,SAAWA,EAChB/e,KAAKoJ,cAAgB,EACxB,0CACD,SAAgBrG,EAAKgV,GACjB,IAAK,IAAIzM,EAAI,EAAGA,EAAItL,KAAK+e,SAAS5V,SAAS1H,SAAU6J,EAAG,CACpD,MAAM/I,EAAUvC,KAAK+e,SAAS5V,SAASmC,GAEvC,GAAIvI,IADe/C,KAAKshB,sBAAsB/e,EAAQgf,OAC5B,EAAIhI,EAAa/B,mBAAmBjV,EAAQif,UAAWzJ,GAC7E,OAAOzM,CAEd,CACD,OAAQ,CACX,sCACD,SAAsB1I,GAClB,OAAO,IAAIgf,IAAIhf,EAAY5C,KAAKmG,aAAa6N,UAChD,OAnBC8K,GAqBArN,EAAAA,GACF,WAAY7O,EAAY8b,EAAkB0B,EAAiB2B,EAAoBtG,EAAWE,GAAS,UAC/F3b,KAAK4C,WAAaA,EAClB5C,KAAK0e,iBAAmBA,EACxB1e,KAAKogB,gBAAkBA,EACvBpgB,KAAK+hB,mBAAqBA,EAC1B/hB,KAAKyb,UAAYA,EACjBzb,KAAK2b,QAAUA,CAClB,iCC3YU,SAASqG,EAAgB5S,EAAGU,GAKzC,OAJAkS,EAAkB7hB,OAAO8hB,eAAiB9hB,OAAO8hB,eAAe/H,OAAS,SAAyB9K,EAAGU,GAEnG,OADAV,EAAE8S,UAAYpS,EACPV,CACR,EACM4S,EAAgB5S,EAAGU,EAC3B,CCLc,SAASqS,EAAeC,EAAUC,GAC/CD,EAASpT,UAAY7O,OAAOgP,OAAOkT,EAAWrT,WAC9CoT,EAASpT,UAAUsT,YAAcF,EACjCH,EAAeG,EAAUC,EAC1B,iECID,IAAIE,EAAsB,WACxB,SAASA,IACPviB,KAAKwiB,UAAY,CAAC,CACnB,CAUD,IAAIC,EAASF,EAAOvT,UA+FpB,OA7FAyT,EAAO9T,GAAK,SAAYgM,EAAMtD,GACvBrX,KAAKwiB,UAAU7H,KAClB3a,KAAKwiB,UAAU7H,GAAQ,IAGzB3a,KAAKwiB,UAAU7H,GAAMxZ,KAAKkW,EAC3B,EAWDoL,EAAO7G,IAAM,SAAajB,EAAMtD,GAC9B,IAAKrX,KAAKwiB,UAAU7H,GAClB,OAAO,EAGT,IAAIvP,EAAQpL,KAAKwiB,UAAU7H,GAAM7E,QAAQuB,GAWzC,OAFArX,KAAKwiB,UAAU7H,GAAQ3a,KAAKwiB,UAAU7H,GAAMnH,MAAM,GAClDxT,KAAKwiB,UAAU7H,GAAM5E,OAAO3K,EAAO,GAC5BA,GAAS,CACjB,EASDqX,EAAOC,QAAU,SAAiB/H,GAChC,IAAIhC,EAAY3Y,KAAKwiB,UAAU7H,GAE/B,GAAKhC,EAQL,GAAyB,IAArBvB,UAAU3V,OAGZ,IAFA,IAAIA,EAASkX,EAAUlX,OAEd6J,EAAI,EAAGA,EAAI7J,IAAU6J,EAC5BqN,EAAUrN,GAAG0E,KAAKhQ,KAAMoX,UAAU,SAMpC,IAHA,IAAIE,EAAOvF,MAAM/C,UAAUwE,MAAMxD,KAAKoH,UAAW,GAC7CuL,EAAUhK,EAAUlX,OAEfmhB,EAAK,EAAGA,EAAKD,IAAWC,EAC/BjK,EAAUiK,GAAIC,MAAM7iB,KAAMsX,EAG/B,EAMDmL,EAAOK,QAAU,WACf9iB,KAAKwiB,UAAY,CAAC,CACnB,EAWDC,EAAOM,KAAO,SAAcC,GAC1BhjB,KAAK2O,GAAG,QAAQ,SAAU/I,GACxBod,EAAY7hB,KAAKyE,EAClB,GACF,EAEM2c,CACR,CA7GyB,GCTX,SAASU,IActB,OAbAA,EAAW9iB,OAAOmG,OAASnG,OAAOmG,OAAO4T,OAAS,SAAUgJ,GAC1D,IAAK,IAAI5X,EAAI,EAAGA,EAAI8L,UAAU3V,OAAQ6J,IAAK,CACzC,IAAI6X,EAAS/L,UAAU9L,GAEvB,IAAK,IAAI0K,KAAOmN,EACVhjB,OAAO6O,UAAUe,eAAeC,KAAKmT,EAAQnN,KAC/CkN,EAAOlN,GAAOmN,EAAOnN,GAG1B,CAED,OAAOkN,CACR,EACMD,EAASJ,MAAM7iB,KAAMoX,UAC7B,yCCTc,SAASgM,EAAsBC,GAI5C,IAHA,IALuBtX,EAKnBuX,GALmBvX,EAKEsX,EAJlBvU,IAAAA,KAAcA,IAAAA,KAAY/C,GAAK2G,EAAOC,KAAK5G,EAAG,UAAUiI,SAAS,WAKpEuP,EAAQ,IAAIxd,WAAWud,EAAc7hB,QAEhC6J,EAAI,EAAGA,EAAIgY,EAAc7hB,OAAQ6J,IACxCiY,EAAMjY,GAAKgY,EAAcE,WAAWlY,GAGtC,OAAOiY,CACR,CCAD,IAAIE,EAA0B,SAAUC,GAGtC,SAASD,IACP,IAAIE,EAIJ,OAFAA,EAAQD,EAAQ1T,KAAKhQ,OAASA,MACxBiG,OAAS,GACR0d,CACR,CAqBD,OA7BAxB,EAAesB,EAAYC,GAgBdD,EAAWzU,UAEjB7N,KAAO,SAAcyE,GAC1B,IAAIge,EAIJ,IAHA5jB,KAAKiG,QAAUL,EACfge,EAAc5jB,KAAKiG,OAAO6P,QAAQ,MAE3B8N,GAAe,EAAGA,EAAc5jB,KAAKiG,OAAO6P,QAAQ,MACzD9V,KAAK0iB,QAAQ,OAAQ1iB,KAAKiG,OAAO4d,UAAU,EAAGD,IAC9C5jB,KAAKiG,OAASjG,KAAKiG,OAAO4d,UAAUD,EAAc,EAErD,EAEMH,CACR,CA/B6B,CA+B5BlB,GAEEuB,EAAMC,OAAOC,aAAa,GAE1BC,EAAiB,SAAwBC,GAG3C,IAAIC,EAAQ,yBAAyBC,KAAKF,GAAmB,IACzDtJ,EAAS,CAAC,EAUd,OARIuJ,EAAM,KACRvJ,EAAOnZ,OAAS8R,SAAS4Q,EAAM,GAAI,KAGjCA,EAAM,KACRvJ,EAAO5U,OAASuN,SAAS4Q,EAAM,GAAI,KAG9BvJ,CACR,EAuBGyJ,EAAkB,SAAyBC,GAO7C,IALA,IAGIC,EAHAC,EAAQF,EAAWrS,MAXhB,IAAIwS,OAAO,yCAYd7J,EAAS,CAAC,EACVtP,EAAIkZ,EAAM/iB,OAGP6J,KAEY,KAAbkZ,EAAMlZ,MAKViZ,EAAO,eAAeH,KAAKI,EAAMlZ,IAAIkI,MAAM,IAEtC,GAAK+Q,EAAK,GAAGlR,QAAQ,aAAc,IACxCkR,EAAK,GAAKA,EAAK,GAAGlR,QAAQ,aAAc,IACxCkR,EAAK,GAAKA,EAAK,GAAGlR,QAAQ,kBAAmB,MAC7CuH,EAAO2J,EAAK,IAAMA,EAAK,IAGzB,OAAO3J,CACR,EA2BG8J,EAA2B,SAAUhB,GAGvC,SAASgB,IACP,IAAIf,EAKJ,OAHAA,EAAQD,EAAQ1T,KAAKhQ,OAASA,MACxB2kB,cAAgB,GACtBhB,EAAMiB,WAAa,GACZjB,CACR,CATDxB,EAAeuC,EAAahB,GAiB5B,IAAIjB,EAASiC,EAAY1V,UA6nBzB,OA3nBAyT,EAAOthB,KAAO,SAAc0jB,GAC1B,IAEIV,EACA9e,EAHAyf,EAAS9kB,KAOO,KAFpB6kB,EAAOA,EAAKE,QAEHtjB,SAMO,MAAZojB,EAAK,GASM7kB,KAAK4kB,WAAWI,QAAO,SAAUC,EAAKC,GACnD,IAAIC,EAAaD,EAAOL,GAExB,OAAIM,IAAeN,EACVI,EAGFA,EAAIG,OAAO,CAACD,GACpB,GAAE,CAACN,IACK5f,SAAQ,SAAUogB,GACzB,IAAK,IAAI/Z,EAAI,EAAGA,EAAIwZ,EAAOH,cAAcljB,OAAQ6J,IAC/C,GAAIwZ,EAAOH,cAAcrZ,GAAG0E,KAAK8U,EAAQO,GACvC,OAKJ,GAAgC,IAA5BA,EAAQvP,QAAQ,QAepB,GAJAuP,EAAUA,EAAQhS,QAAQ,KAAM,IAEhC8Q,EAAQ,WAAWC,KAAKiB,GAGtBP,EAAOpC,QAAQ,OAAQ,CACrB/H,KAAM,MACN2K,QAAS,YAHb,CAWA,GAFAnB,EAAQ,gCAAgCC,KAAKiB,GAkB3C,OAfAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,OAGPnB,EAAM,KACR9e,EAAM8T,SAAWoM,WAAWpB,EAAM,KAGhCA,EAAM,KACR9e,EAAMmgB,MAAQrB,EAAM,SAGtBW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,qCAAqCC,KAAKiB,GAchD,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,kBAGPnB,EAAM,KACR9e,EAAM8T,SAAW5F,SAAS4Q,EAAM,GAAI,UAGtCW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,8BAA8BC,KAAKiB,GAczC,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,WAGPnB,EAAM,KACR9e,EAAM4K,QAAUsD,SAAS4Q,EAAM,GAAI,UAGrCW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,wCAAwCC,KAAKiB,GAcnD,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,kBAGPnB,EAAM,KACR9e,EAAMogB,OAASlS,SAAS4Q,EAAM,GAAI,UAGpCW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,gDAAgDC,KAAKiB,GAc3D,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,0BAGPnB,EAAM,KACR9e,EAAMogB,OAASlS,SAAS4Q,EAAM,GAAI,UAGpCW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,gCAAgCC,KAAKiB,GAc3C,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,iBAGPnB,EAAM,KACR9e,EAAMqgB,aAAevB,EAAM,SAG7BW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,4BAA4BC,KAAKiB,GAUvC,OAPAhgB,EAAQ4d,EAASgB,EAAeE,EAAM,IAAK,CACzCxJ,KAAM,MACN2K,QAAS,mBAGXR,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,iCAAiCC,KAAKiB,GAc5C,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,eAGPnB,EAAM,KACR9e,EAAMsgB,SAAW,KAAKC,KAAKzB,EAAM,UAGnCW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,qBAAqBC,KAAKiB,GAElC,CAME,GALAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,OAGPnB,EAAM,GAAI,CACZ,IAAIG,EAAaD,EAAgBF,EAAM,IAEnCG,EAAWuB,MACbxgB,EAAMkc,IAAM+C,EAAWuB,KAGrBvB,EAAWwB,YACbzgB,EAAMmc,UAAYyC,EAAeK,EAAWwB,WAE/C,CAEDhB,EAAOpC,QAAQ,OAAQrd,EAGxB,MAID,GAFA8e,EAAQ,4BAA4BC,KAAKiB,GAEzC,CAME,GALAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,cAGPnB,EAAM,GAAI,CAGZ,GAFA9e,EAAMif,WAAaD,EAAgBF,EAAM,IAErC9e,EAAMif,WAAWyB,WAAY,CAC/B,IAAI9T,EAAQ5M,EAAMif,WAAWyB,WAAW9T,MAAM,KAC1C+T,EAAa,CAAC,EAEd/T,EAAM,KACR+T,EAAWC,MAAQ1S,SAAStB,EAAM,GAAI,KAGpCA,EAAM,KACR+T,EAAWE,OAAS3S,SAAStB,EAAM,GAAI,KAGzC5M,EAAMif,WAAWyB,WAAaC,CAC/B,CAEG3gB,EAAMif,WAAW6B,YACnB9gB,EAAMif,WAAW6B,UAAY5S,SAASlO,EAAMif,WAAW6B,UAAW,KAGhE9gB,EAAMif,WAAW,gBACnBjf,EAAMif,WAAW,cAAgB/Q,SAASlO,EAAMif,WAAW,cAAe,IAE7E,CAEDQ,EAAOpC,QAAQ,OAAQrd,EAGxB,KApCD,CAwCA,GAFA8e,EAAQ,uBAAuBC,KAAKiB,GAclC,OAXAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,SAGPnB,EAAM,KACR9e,EAAMif,WAAaD,EAAgBF,EAAM,UAG3CW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,kBAAkBC,KAAKiB,GAG7BP,EAAOpC,QAAQ,OAAQ,CACrB/H,KAAM,MACN2K,QAAS,iBAQb,GAFAnB,EAAQ,wBAAwBC,KAAKiB,GAGnCP,EAAOpC,QAAQ,OAAQ,CACrB/H,KAAM,MACN2K,QAAS,sBAHb,CAWA,GAFAnB,EAAQ,mCAAmCC,KAAKiB,GAe9C,OAZAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,qBAGPnB,EAAM,KACR9e,EAAM+gB,eAAiBjC,EAAM,GAC7B9e,EAAMghB,eAAiB,IAAIC,KAAKnC,EAAM,UAGxCW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,qBAAqBC,KAAKiB,GA2BhC,OAxBAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,OAGPnB,EAAM,KACR9e,EAAMif,WAAaD,EAAgBF,EAAM,IAErC9e,EAAMif,WAAWiC,KACuC,OAAtDlhB,EAAMif,WAAWiC,GAAG1C,UAAU,EAAG,GAAG2C,gBACtCnhB,EAAMif,WAAWiC,GAAKlhB,EAAMif,WAAWiC,GAAG1C,UAAU,IAGtDxe,EAAMif,WAAWiC,GAAKlhB,EAAMif,WAAWiC,GAAGpC,MAAM,SAChD9e,EAAMif,WAAWiC,GAAG,GAAKhT,SAASlO,EAAMif,WAAWiC,GAAG,GAAI,IAC1DlhB,EAAMif,WAAWiC,GAAG,GAAKhT,SAASlO,EAAMif,WAAWiC,GAAG,GAAI,IAC1DlhB,EAAMif,WAAWiC,GAAG,GAAKhT,SAASlO,EAAMif,WAAWiC,GAAG,GAAI,IAC1DlhB,EAAMif,WAAWiC,GAAG,GAAKhT,SAASlO,EAAMif,WAAWiC,GAAG,GAAI,IAC1DlhB,EAAMif,WAAWiC,GAAK,IAAIE,YAAYphB,EAAMif,WAAWiC,WAI3DzB,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,uBAAuBC,KAAKiB,GAgBlC,OAbAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,SAGPnB,EAAM,KACR9e,EAAMif,WAAaD,EAAgBF,EAAM,IACzC9e,EAAMif,WAAW,eAAiBiB,WAAWlgB,EAAMif,WAAW,gBAC9Djf,EAAMif,WAAWoC,QAAU,MAAMd,KAAKvgB,EAAMif,WAAWoC,eAGzD5B,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,+BAA+BC,KAAKiB,GAgB1C,OAbAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,iBAIH1f,KADJue,EAAM,GACKA,EAAM,GAEN,QAGfW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,0BAA0BC,KAAKiB,GAgBrC,OAbAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,YAIH1f,KADJue,EAAM,GACKA,EAAM,GAEN,QAGfW,EAAOpC,QAAQ,OAAQrd,GAOzB,GAFA8e,EAAQ,yBAAyBC,KAAKiB,GAgBpC,OAbAhgB,EAAQ,CACNsV,KAAM,MACN2K,QAAS,WAIH1f,KADJue,EAAM,GACKA,EAAM,GAEN,QAGfW,EAAOpC,QAAQ,OAAQrd,GAOzB,IAFA8e,EAAQ,qBAAqBC,KAAKiB,KAErBlB,EAAM,GAiBjB,OAhBA9e,EAAQ,CACNsV,KAAM,MACN2K,QAAS,SAELhB,WAAaD,EAAgBF,EAAM,IAErC9e,EAAMif,WAAWvU,eAAe,sBAClC1K,EAAMif,WAAW,oBAAsB/Q,SAASlO,EAAMif,WAAW,oBAAqB,KAGpFjf,EAAMif,WAAWvU,eAAe,iCAClC1K,EAAMif,WAAW,+BAAiCjf,EAAMif,WAAW,+BAA+BrS,MAAM6R,SAG1GgB,EAAOpC,QAAQ,OAAQrd,GAOzB,IAFA8e,EAAQ,qBAAqBC,KAAKiB,KAErBlB,EAAM,GAuBjB,OAtBA9e,EAAQ,CACNsV,KAAM,MACN2K,QAAS,SAELhB,WAAaD,EAAgBF,EAAM,IACzC,CAAC,YAAYlf,SAAQ,SAAU+Q,GACzB3Q,EAAMif,WAAWvU,eAAeiG,KAClC3Q,EAAMif,WAAWtO,GAAOuP,WAAWlgB,EAAMif,WAAWtO,IAEvD,IACD,CAAC,cAAe,OAAO/Q,SAAQ,SAAU+Q,GACnC3Q,EAAMif,WAAWvU,eAAeiG,KAClC3Q,EAAMif,WAAWtO,GAAO,MAAM4P,KAAKvgB,EAAMif,WAAWtO,IAEvD,IAEG3Q,EAAMif,WAAWvU,eAAe,eAClC1K,EAAMif,WAAW9C,UAAYyC,EAAe5e,EAAMif,WAAWwB,iBAG/DhB,EAAOpC,QAAQ,OAAQrd,GAOzB,IAFA8e,EAAQ,+BAA+BC,KAAKiB,KAE/BlB,EAAM,GAmBjB,OAlBA9e,EAAQ,CACNsV,KAAM,MACN2K,QAAS,mBAELhB,WAAaD,EAAgBF,EAAM,IACzC,CAAC,iBAAkB,iBAAkB,aAAalf,SAAQ,SAAU+Q,GAC9D3Q,EAAMif,WAAWvU,eAAeiG,KAClC3Q,EAAMif,WAAWtO,GAAOuP,WAAWlgB,EAAMif,WAAWtO,IAEvD,IACD,CAAC,sBAAuB,oBAAoB/Q,SAAQ,SAAU+Q,GACxD3Q,EAAMif,WAAWvU,eAAeiG,KAClC3Q,EAAMif,WAAWtO,GAAO,MAAM4P,KAAKvgB,EAAMif,WAAWtO,IAEvD,SAED8O,EAAOpC,QAAQ,OAAQrd,GAOzB,IAFA8e,EAAQ,yBAAyBC,KAAKiB,KAEzBlB,EAAM,GAcjB,OAbA9e,EAAQ,CACNsV,KAAM,MACN2K,QAAS,aAELhB,WAAaD,EAAgBF,EAAM,IACzC,CAAC,eAAelf,SAAQ,SAAU+Q,GAC5B3Q,EAAMif,WAAWvU,eAAeiG,KAClC3Q,EAAMif,WAAWtO,GAAOuP,WAAWlgB,EAAMif,WAAWtO,IAEvD,SAED8O,EAAOpC,QAAQ,OAAQrd,GAOzB,IAFA8e,EAAQ,6BAA6BC,KAAKiB,KAE7BlB,EAAM,GAmBjB,OAlBA9e,EAAQ,CACNsV,KAAM,MACN2K,QAAS,iBAELhB,WAAaD,EAAgBF,EAAM,IACzC,CAAC,kBAAmB,oBAAoBlf,SAAQ,SAAU+Q,GACxD,GAAI3Q,EAAMif,WAAWvU,eAAeiG,GAAM,CACxC3Q,EAAMif,WAAWtO,GAAOzC,SAASlO,EAAMif,WAAWtO,GAAM,IACxD,IAAI2Q,EAAiB,qBAAR3Q,EAA6B,SAAW,SACrD3Q,EAAMif,WAAW9C,UAAYnc,EAAMif,WAAW9C,WAAa,CAAC,EAC5Dnc,EAAMif,WAAW9C,UAAUmF,GAAUthB,EAAMif,WAAWtO,UAE/C3Q,EAAMif,WAAWtO,EACzB,CACF,SAED8O,EAAOpC,QAAQ,OAAQrd,GAOzB,IAFA8e,EAAQ,iCAAiCC,KAAKiB,KAEjClB,EAAM,GAcjB,OAbA9e,EAAQ,CACNsV,KAAM,MACN2K,QAAS,qBAELhB,WAAaD,EAAgBF,EAAM,IACzC,CAAC,WAAY,aAAalf,SAAQ,SAAU+Q,GACtC3Q,EAAMif,WAAWvU,eAAeiG,KAClC3Q,EAAMif,WAAWtO,GAAOzC,SAASlO,EAAMif,WAAWtO,GAAM,IAE3D,SAED8O,EAAOpC,QAAQ,OAAQrd,GAMzByf,EAAOpC,QAAQ,OAAQ,CACrB/H,KAAM,MACN/U,KAAMyf,EAAQ7R,MAAM,IAzQrB,CAvCA,CAzMA,MArBCsR,EAAOpC,QAAQ,OAAQ,CACrB/H,KAAM,UACNiM,KAAMvB,EAAQ7R,MAAM,IA8gBzB,IA1iBCxT,KAAK0iB,QAAQ,OAAQ,CACnB/H,KAAM,MACN4G,IAAKsD,IAyiBV,EAYDpC,EAAOoE,UAAY,SAAmBC,GACpC,IAAIC,EAAS/mB,KAETgnB,EAAaF,EAAKE,WAClBC,EAAaH,EAAKG,WAClBC,EAAaJ,EAAKI,WAClB3kB,EAAUukB,EAAKvkB,QAEO,mBAAf2kB,IACTA,EAAa,SAAoBrC,GAC/B,OAAOA,CACR,GAGH7kB,KAAK2kB,cAAcxjB,MAAK,SAAU0jB,GAGhC,GAFYmC,EAAW5C,KAAKS,GAU1B,OAPAkC,EAAOrE,QAAQ,OAAQ,CACrB/H,KAAM,SACN/U,KAAMshB,EAAWrC,GACjBoC,WAAYA,EACZ1kB,QAASA,KAGJ,CAEV,GACF,EAUDkgB,EAAO0E,aAAe,SAAsBC,GAC1C,IAAIJ,EAAaI,EAAMJ,WACnBxO,EAAM4O,EAAM5O,IAUhBxY,KAAK4kB,WAAWzjB,MARJ,SAAe0jB,GACzB,OAAImC,EAAWpB,KAAKf,GACXrM,EAAIqM,GAGNA,CACR,GAGF,EAEMH,CACR,CAhpB8B,CAgpB7BnC,GAQE8E,EAAgB,SAAuB/C,GACzC,IAAI1J,EAAS,CAAC,EAId,OAHAza,OAAO0R,KAAKyS,GAAYrf,SAAQ,SAAU+Q,GAR5B,IAAmBsR,EAS/B1M,GAT+B0M,EASdtR,EARZsR,EAAId,cAAcnT,QAAQ,UAAU,SAAU6D,GACnD,OAAOA,EAAE,GAAGqQ,aACb,MAM0BjD,EAAWtO,EACrC,IACM4E,CACR,EAMG4M,EAAc,SAAqBzI,GACrC,IAAI0I,EAAgB1I,EAAS0I,cACzBC,EAAiB3I,EAAS2I,eAC1BC,EAAqB5I,EAAS4I,mBAElC,GAAKF,EAAL,CAIA,IAAIG,EAAM,wBACNC,EAAK,WACLC,EAAM,eACNC,EAAoBL,GAAmC,EAAjBA,EACtCM,EAAkBL,GAA2C,EAArBA,EAExCD,IAAmBD,EAAc1X,eAAe8X,KAClDJ,EAAcI,GAAME,EACpB/nB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAASL,EAAM,gDAAkDG,EAAoB,QAIrFA,GAAqBN,EAAcI,GAAME,IAC3C/nB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAASL,EAAM,wBAA0BH,EAAcI,GAAM,4BAA8BE,EAAoB,MAEjHN,EAAcI,GAAME,GAIlBJ,IAAuBF,EAAc1X,eAAe+X,KACtDL,EAAcK,GAA4B,EAArBH,EACrB3nB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAASL,EAAM,yDAA2DH,EAAcK,GAAO,QAK/FH,GAAsBF,EAAcK,GAAOE,IAC7ChoB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAASL,EAAM,6BAA+BH,EAAcK,GAAO,gCAAkCE,EAAkB,OAEzHP,EAAcK,GAAOE,EAnCtB,CAqCF,EAwBGpJ,EAAsB,SAAU8E,GAGlC,SAAS9E,IACP,IAAI+E,GAEJA,EAAQD,EAAQ1T,KAAKhQ,OAASA,MACxBkoB,WAAa,IAAIzE,EACvBE,EAAMwE,YAAc,IAAIzD,EAExBf,EAAMuE,WAAWnF,KAAKY,EAAMwE,aAI5B,IAOIC,EAEAC,EATAC,ECh4BO,SAAgCA,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,CACR,CD03BcE,CAAuB7E,GAI9B8E,EAAO,GACPC,EAAa,CAAC,EAMdC,GAAW,EAEXC,EAAO,WAAkB,EAEzBC,EAAqB,CACvB,MAAS,CAAC,EACV,MAAS,CAAC,EACV,kBAAmB,CAAC,EACpB,UAAa,CAAC,GAMZC,EAAkB,EAEtBnF,EAAM5E,SAAW,CACfgK,YAAY,EACZC,oBAAqB,GACrB7f,SAAU,IAKZ,IAAI8f,EAAmB,EAEnBC,EAAuB,EAqhB3B,OAnhBAvF,EAAMhV,GAAG,OAAO,WAGV+Z,EAAWnH,MAAQmH,EAAWS,QAAUT,EAAWU,gBAIlDV,EAAWlQ,KAAO4P,IACrBM,EAAWlQ,IAAM4P,IAGdM,EAAW1S,KAAOqS,IACrBK,EAAW1S,IAAMqS,GAGdK,EAAWW,UAAuC,iBAApBP,IACjCJ,EAAWW,SAAWP,GAGxBnF,EAAM5E,SAASuK,eAAiBZ,EACjC,IAGD/E,EAAMwE,YAAYxZ,GAAG,QAAQ,SAAU4a,GACrC,IAAIC,EACAC,GACJ,CACE7B,IAAK,YAEF,CACC3X,QAAS,WACHsZ,EAAMtZ,UACRjQ,KAAK+e,SAAS9O,QAAUsZ,EAAMtZ,QAEjC,EACD,cAAe,WACbjQ,KAAK+e,SAASgK,WAAaQ,EAAM5D,QAE3B,YAAa4D,IACjBvpB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,iCAEXjoB,KAAK+e,SAASgK,YAAa,EAE9B,EACDvH,UAAW,WACT,IAAIA,EAAY,CAAC,EAEb,WAAY+H,IACdb,EAAWlH,UAAYA,EACvBA,EAAU/f,OAAS8nB,EAAM9nB,OAEnB,WAAY8nB,IAWhBA,EAAMvjB,OAASijB,IAIf,WAAYM,IACdb,EAAWlH,UAAYA,EACvBA,EAAUxb,OAASujB,EAAMvjB,QAG3BijB,EAAmBzH,EAAUxb,OAASwb,EAAU/f,MACjD,EACDioB,QAAS,WACP1pB,KAAK+e,SAAS4K,SAAU,CACzB,EACDC,IAAK,WACG,kBAAmB5pB,KAAK+e,WAC5B/e,KAAK+e,SAASsB,cAAgB,EAC9BrgB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,uCAIP,0BAA2BjoB,KAAK+e,WACpC/e,KAAK+e,SAAS8K,sBAAwB,EACtC7pB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,+CAITsB,EAAMpQ,SAAW,IACnBuP,EAAWvP,SAAWoQ,EAAMpQ,UAGP,IAAnBoQ,EAAMpQ,WACRuP,EAAWvP,SAAW,IACtBnZ,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,qDAIbjoB,KAAK+e,SAAS5V,SAAWsf,CAC1B,EACDzS,IAAK,WACH,GAAKuT,EAAMjF,WAQX,GAAgC,SAA5BiF,EAAMjF,WAAWwF,OAKrB,GAAKP,EAAMjF,WAAWuB,IAAtB,CAOA,GAAmC,mCAA/B0D,EAAMjF,WAAWyF,UAMnB,OALA/pB,KAAK+e,SAASiL,kBAAoBhqB,KAAK+e,SAASiL,mBAAqB,CAAC,OAEtEhqB,KAAK+e,SAASiL,kBAAkB,qBAAuB,CACrD1F,WAAYiF,EAAMjF,aAKtB,GAAmC,4BAA/BiF,EAAMjF,WAAWyF,UAMnB,OALA/pB,KAAK+e,SAASiL,kBAAoBhqB,KAAK+e,SAASiL,mBAAqB,CAAC,OAEtEhqB,KAAK+e,SAASiL,kBAAkB,2BAA6B,CAC3DzI,IAAKgI,EAAMjF,WAAWuB,MAO1B,GAlKS,kDAkKL0D,EAAMjF,WAAWyF,UAGnB,OAAwD,IAFpC,CAAC,aAAc,iBAAkB,mBAEnCjU,QAAQyT,EAAMjF,WAAWwF,aACzC9pB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,8CAKmB,oBAA5BsB,EAAMjF,WAAWwF,QACnB9pB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,qEAIiC,4BAA1CsB,EAAMjF,WAAWuB,IAAIhC,UAAU,EAAG,SACpC7jB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,0CAKPsB,EAAMjF,WAAW2F,OAAoD,OAA3CV,EAAMjF,WAAW2F,MAAMpG,UAAU,EAAG,IASpE7jB,KAAK+e,SAASiL,kBAAoBhqB,KAAK+e,SAASiL,mBAAqB,CAAC,OACtEhqB,KAAK+e,SAASiL,kBAAkB,sBAAwB,CACtD1F,WAAY,CACV4F,YAAaX,EAAMjF,WAAWyF,UAE9BI,MAAOZ,EAAMjF,WAAW2F,MAAMpG,UAAU,IAG1CuG,KAAMhH,EAAsBmG,EAAMjF,WAAWuB,IAAI5T,MAAM,KAAK,YAhB5DjS,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,0CAoBVsB,EAAMjF,WAAWwF,QACpB9pB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,qCAKbI,EAAO,CACLlc,OAAQod,EAAMjF,WAAWwF,QAAU,UACnCvI,IAAKgI,EAAMjF,WAAWuB,UAGW,IAAxB0D,EAAMjF,WAAWiC,KAC1B8B,EAAKgC,GAAKd,EAAMjF,WAAWiC,GAhF5B,MAJCvmB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,8CANXI,EAAO,UARProB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,mDAkGd,EACD,iBAAkB,WACXqC,SAASf,EAAM9D,QAOpBzlB,KAAK+e,SAASsB,cAAgBkJ,EAAM9D,OANlCzlB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,oCAAsCsB,EAAM9D,QAM1D,EACD,yBAA0B,WACnB6E,SAASf,EAAM9D,SAOpBzlB,KAAK+e,SAAS8K,sBAAwBN,EAAM9D,OAC5CqD,EAAkBS,EAAM9D,QAPtBzlB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,4CAA8CsB,EAAM9D,QAOlE,EACD,gBAAiB,WACV,YAAYG,KAAK2D,EAAM7D,cAO5B1lB,KAAK+e,SAAS2G,aAAe6D,EAAM7D,aANjC1lB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,mCAAqCsB,EAAM1K,UAMzD,EACDrG,IAAK,WACH4P,EAAa,CAAC,EAEVmB,EAAMhI,MACR6G,EAAW7G,IAAMgI,EAAMhI,KAGrBgI,EAAM/H,YACR4G,EAAW5G,UAAY+H,EAAM/H,WAG3B6G,IACFD,EAAWpS,IAAMqS,EAEpB,EACD,aAAc,WACZroB,KAAK+e,SAASC,UAAYyJ,EAC1BzoB,KAAK+e,SAASwL,YAAcvqB,KAAK+e,SAASwL,aAAe1B,EAEpDU,EAAMjF,YAONoE,EAAWpE,aACdoE,EAAWpE,WAAa,CAAC,GAG3BrB,EAASyF,EAAWpE,WAAYiF,EAAMjF,aAVpCtkB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,wCAUd,EACDtL,MAAO,WAGL,GAFA3c,KAAK+e,SAASwL,YAAcvqB,KAAK+e,SAASwL,aAAe1B,EAEnDU,EAAMjF,YAAciF,EAAMjF,WAAWkG,MAAQjB,EAAMjF,WAAW,aAAeiF,EAAMjF,WAAWmG,KAApG,CAQA,IAAIC,EAAiB1qB,KAAK+e,SAASwL,YAAYhB,EAAMjF,WAAWkG,MAChEE,EAAenB,EAAMjF,WAAW,aAAeoG,EAAenB,EAAMjF,WAAW,cAAgB,CAAC,EAChGkF,EAAakB,EAAenB,EAAMjF,WAAW,cAE7CmF,EAAY,CACV/oB,QAAS,OAAOklB,KAAK2D,EAAMjF,WAAWqG,WAI5BC,aADRnB,EAAU/oB,SAGW,OAAOklB,KAAK2D,EAAMjF,WAAWuG,YAGlDtB,EAAMjF,WAAWwG,WACnBrB,EAAUsB,SAAWxB,EAAMjF,WAAWwG,UAGpCvB,EAAMjF,WAAWuB,MACnB4D,EAAUlI,IAAMgI,EAAMjF,WAAWuB,KAG/B0D,EAAMjF,WAAW,iBACnBmF,EAAUuB,WAAazB,EAAMjF,WAAW,gBAGtCiF,EAAMjF,WAAW2G,kBACnBxB,EAAUyB,gBAAkB3B,EAAMjF,WAAW2G,iBAG3C1B,EAAMjF,WAAW6G,SACnB1B,EAAU2B,OAAS,OAAOxF,KAAK2D,EAAMjF,WAAW6G,SAIlD3B,EAAWD,EAAMjF,WAAWmG,MAAQhB,CAtCnC,MAJCzpB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,8CA0Cd,EACDoD,cAAe,WACbvC,GAAmB,EACnBJ,EAAW2C,eAAgB,EAC3BrrB,KAAK+e,SAASiK,oBAAoB7nB,KAAKsnB,EAAKhnB,OAC7C,EACD,oBAAqB,gBACyB,IAAjCzB,KAAK+e,SAASqH,iBAKvBpmB,KAAK+e,SAASqH,eAAiBmD,EAAMnD,eACrCpmB,KAAK+e,SAASsH,eAAiBkD,EAAMlD,gBAGvCqC,EAAWtC,eAAiBmD,EAAMnD,eAClCsC,EAAWrC,eAAiBkD,EAAMlD,cACnC,EACDiF,eAAgB,YACThB,SAASf,EAAMpQ,WAAaoQ,EAAMpQ,SAAW,EAChDnZ,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,qCAAuCsB,EAAMpQ,YAK1DnZ,KAAK+e,SAAS2I,eAAiB6B,EAAMpQ,SACrCqO,EAAYxX,KAAKhQ,KAAMA,KAAK+e,UAC7B,EACDhK,MAAO,WACAwU,EAAMjF,aAAciH,MAAMhC,EAAMjF,WAAW,gBAOhDtkB,KAAK+e,SAAShK,MAAQ,CACpByW,WAAYjC,EAAMjF,WAAW,eAC7BmH,QAASlC,EAAMjF,WAAWoC,SAR1B1mB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,iEASd,EACD,UAAW,WACTS,EAAWgD,OAASnC,EAAM3jB,IAC3B,EACD,eAAgB,WACd8iB,EAAWiD,WAAapC,EAAM3jB,IAC/B,EACD,SAAU,WACR8iB,EAAWkD,MAAQrC,EAAM3jB,IAC1B,EACD,KAAQ,WACN5F,KAAK+e,SAAS8M,KAAOxE,EAAckC,EAAMjF,YACzCtkB,KAAK8rB,yBAAyB,cAAevC,EAAMjF,WAAY,CAAC,oBACjE,EACD,KAAQ,WACN,IAAIQ,EAAS9kB,KAEb2oB,GAAW,EAEX,IAAIrI,EAAetgB,KAAK+e,SAAS5V,SAAS1H,OACtCsqB,EAAO1E,EAAckC,EAAMjF,YAC/BoE,EAAWS,MAAQT,EAAWS,OAAS,GACvCT,EAAWS,MAAMhoB,KAAK4qB,GAElBA,EAAKvK,YACFuK,EAAKvK,UAAUzR,eAAe,YACjCgc,EAAKvK,UAAUxb,OAASkjB,GAG1BA,EAAuB6C,EAAKvK,UAAUxb,OAAS+lB,EAAKvK,UAAU/f,QAIhEzB,KAAK8rB,yBAAyB,iBADdpD,EAAWS,MAAM1nB,OAAS,GACkB,iBAAmB6e,EAAciJ,EAAMjF,WAAY,CAAC,MAAO,aAEnHtkB,KAAK+e,SAASiN,kBAChBhsB,KAAK+e,SAASiN,iBAAiB/mB,SAAQ,SAAUgnB,EAAG3gB,GAC7C2gB,EAAElc,eAAe,aACpB+U,EAAOpC,QAAQ,OAAQ,CACrBuF,QAAS,4BAA8B3c,EAAI,2CAGhD,GAEJ,EACD,iBAAkB,WAChB,IAAIkZ,EAAQxkB,KAAK+e,SAAS0I,cAAgBJ,EAAckC,EAAMjF,YAEzDE,EAAMzU,eAAe,oBACxByU,EAAM0H,gBAAiB,EACvBlsB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,gEAIbT,EAAYxX,KAAKhQ,KAAMA,KAAK+e,UAExByF,EAAM2H,oBAAsB3H,EAAMzU,eAAe,iBACnD/P,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,mHAGd,EACD,eAAgB,WAEd,IAAI3H,EAAetgB,KAAK+e,SAAS5V,SAAS1H,OACtC2qB,EAAO/E,EAAckC,EAAMjF,YAC3B+H,EAASD,EAAKzR,MAAsB,SAAdyR,EAAKzR,KAC/B+N,EAAWU,aAAeV,EAAWU,cAAgB,GACrDV,EAAWU,aAAajoB,KAAKirB,GAEzBA,EAAK5K,YACF4K,EAAK5K,UAAUzR,eAAe,YAEjCqc,EAAK5K,UAAUxb,OAASqmB,EAASnD,EAAuB,EAEpDmD,IACFnD,EAAuBkD,EAAK5K,UAAUxb,OAASomB,EAAK5K,UAAU/f,UAKpE,IAAI2J,EAAQsd,EAAWU,aAAa3nB,OAAS,EAG7C,GAFAzB,KAAK8rB,yBAAyB,wBAA0B1gB,EAAQ,iBAAmBkV,EAAciJ,EAAMjF,WAAY,CAAC,OAAQ,QAEvH8H,EAAKzR,KAMV,IAAK,IAAIrP,EAAI,EAAGA,EAAIod,EAAWU,aAAa3nB,OAAS,EAAG6J,IAAK,CAC3D,IAAIghB,EAAY5D,EAAWU,aAAa9d,GAEnCghB,EAAU3R,MAIX2R,EAAU3R,OAASyR,EAAKzR,MAC1B3a,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,wBAA0B7c,EAAQ,iBAAmBkV,EAAe,sBAAwB8L,EAAKzR,KAAO,qBAAuBrP,GAG7I,CACF,EACD,mBAAoB,WAClB,IAAIihB,EAASlF,EAAckC,EAAMjF,YACjCtkB,KAAK+e,SAASiN,iBAAmBhsB,KAAK+e,SAASiN,kBAAoB,GACnEhsB,KAAK+e,SAASiN,iBAAiB7qB,KAAKorB,GACpC,IAAInhB,EAAQpL,KAAK+e,SAASiN,iBAAiBvqB,OAAS,EAChD+qB,EAAW,CAAC,WAAY,OAExB7D,GACF6D,EAASrrB,KAAK,aAGhBnB,KAAK8rB,yBAAyB,4BAA8B1gB,EAAOme,EAAMjF,WAAYkI,EACtF,EACD,WAAY,WACVxsB,KAAK+e,SAAS0N,QAAUpF,EAAckC,EAAMjF,YAC5CtkB,KAAK8rB,yBAAyB,kBAAmBvC,EAAMjF,WAAY,CAAC,gBAEhEtkB,KAAK+e,SAAS0N,QAAQC,aACxB1sB,KAAK+e,SAAS4I,mBAAqB3nB,KAAK+e,SAAS0N,QAAQC,YAG3DlF,EAAYxX,KAAKhQ,KAAMA,KAAK+e,SAC7B,GACAwK,EAAMjE,UAAYsD,GAAM5Y,KAAKsY,EACjC,EACD/G,IAAK,WACHmH,EAAWnH,IAAMgI,EAAMhI,IACvBkH,EAAKtnB,KAAKunB,GAEN1oB,KAAK+e,SAAS2I,kBAAoB,aAAcgB,KAClD1oB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS,uDAEXS,EAAWvP,SAAWnZ,KAAK+e,SAAS2I,gBAIlCW,IACFK,EAAW1S,IAAMqS,GAGnBK,EAAWW,SAAWP,EAElBV,IACFM,EAAWlQ,IAAM4P,GAInBc,EAAuB,EAEvBR,EAAa,CAAC,CACf,EACDiE,QAAS,WACR,EACDC,OAAQ,WAEFrD,EAAMhnB,SACRmmB,EAAWkE,OAASlE,EAAWkE,QAAU,CAAC,EAC1ClE,EAAWkE,OAAOrD,EAAMtC,YAAcsC,EAAM3jB,OAE5C5F,KAAK+e,SAAS6N,OAAS5sB,KAAK+e,SAAS6N,QAAU,CAAC,EAChD5sB,KAAK+e,SAAS6N,OAAOrD,EAAMtC,YAAcsC,EAAM3jB,KAElD,IACA2jB,EAAM5O,MAAM3K,KAAKsY,EACrB,IAEM3E,CACR,CAxkBDxB,EAAevD,EAAQ8E,GA0kBvB,IAAIjB,EAAS7D,EAAO5P,UAiEpB,OA/DAyT,EAAOqJ,yBAA2B,SAAkCe,EAAYvI,EAAYkI,GAC1F,IAAIM,EAAU,GACdN,EAASvnB,SAAQ,SAAU+Q,GACpBsO,EAAWvU,eAAeiG,IAC7B8W,EAAQ3rB,KAAK6U,EAEhB,IAEG8W,EAAQrrB,QACVzB,KAAK0iB,QAAQ,OAAQ,CACnBuF,QAAS4E,EAAa,iCAAmCC,EAAQC,KAAK,OAG3E,EAQDtK,EAAOthB,KAAO,SAAc6rB,GAC1BhtB,KAAKkoB,WAAW/mB,KAAK6rB,EACtB,EAQDvK,EAAOzK,IAAM,WAEXhY,KAAKkoB,WAAW/mB,KAAK,MACrBnB,KAAK0iB,QAAQ,MACd,EAYDD,EAAOoE,UAAY,SAAmBtJ,GACpCvd,KAAKmoB,YAAYtB,UAAUtJ,EAC5B,EAUDkF,EAAO0E,aAAe,SAAsB5J,GAC1Cvd,KAAKmoB,YAAYhB,aAAa5J,EAC/B,EAEMqB,CACR,CA7oByB,CA6oBxB2D,mBE//CF,IAAI7P,EAASjS,EAAAA,MAAAA,OAGb,SAASwsB,EAAMC,EAAWC,GACxBntB,KAAKotB,OAAS1a,EAAO2a,MAAMH,GAC3BltB,KAAKstB,WAAaH,EAClBntB,KAAKutB,WAAaL,EAClBltB,KAAKwtB,KAAO,CACb,CAEDP,EAAKje,UAAUmF,OAAS,SAAUvO,EAAM6nB,GAClB,iBAAT7nB,IAETA,EAAO8M,EAAOC,KAAK/M,EADnB6nB,EAAMA,GAAO,SASf,IALA,IAAIC,EAAQ1tB,KAAKotB,OACbF,EAAYltB,KAAKutB,WACjB9rB,EAASmE,EAAKnE,OACdksB,EAAQ3tB,KAAKwtB,KAERxnB,EAAS,EAAGA,EAASvE,GAAS,CAIrC,IAHA,IAAImsB,EAAWD,EAAQT,EACnBW,EAAYvsB,KAAKC,IAAIE,EAASuE,EAAQknB,EAAYU,GAE7CtiB,EAAI,EAAGA,EAAIuiB,EAAWviB,IAC7BoiB,EAAME,EAAWtiB,GAAK1F,EAAKI,EAASsF,GAItCtF,GAAU6nB,GADVF,GAASE,GAGIX,GAAe,GAC1BltB,KAAK8tB,QAAQJ,EAEhB,CAGD,OADA1tB,KAAKwtB,MAAQ/rB,EACNzB,IACR,EAEDitB,EAAKje,UAAUoF,OAAS,SAAUqZ,GAChC,IAAIM,EAAM/tB,KAAKwtB,KAAOxtB,KAAKutB,WAE3BvtB,KAAKotB,OAAOW,GAAO,IAInB/tB,KAAKotB,OAAOY,KAAK,EAAGD,EAAM,GAEtBA,GAAO/tB,KAAKstB,aACdttB,KAAK8tB,QAAQ9tB,KAAKotB,QAClBptB,KAAKotB,OAAOY,KAAK,IAGnB,IAAIC,EAAmB,EAAZjuB,KAAKwtB,KAGhB,GAAIS,GAAQ,WACVjuB,KAAKotB,OAAOc,cAAcD,EAAMjuB,KAAKutB,WAAa,OAG7C,CACL,IAAIY,GAAkB,WAAPF,KAAuB,EAGtCjuB,KAAKotB,OAAOc,eAFID,EAAOE,GAAW,WAEEnuB,KAAKutB,WAAa,GACtDvtB,KAAKotB,OAAOc,cAAcC,EAASnuB,KAAKutB,WAAa,EACtD,CAEDvtB,KAAK8tB,QAAQ9tB,KAAKotB,QAClB,IAAIgB,EAAOpuB,KAAKquB,QAEhB,OAAOZ,EAAMW,EAAKpa,SAASyZ,GAAOW,CACnC,EAEDnB,EAAKje,UAAU8e,QAAU,WACvB,MAAM,IAAIxpB,MAAM,0CACjB,EAEDgqB,EAAOjuB,QAAU4sB,iBCvEjB,IAAIsB,EAAW9tB,EAAQ,MACnBwsB,EAAOxsB,EAAQ,MACfiS,EAASjS,EAAAA,MAAAA,OAET+tB,EAAI,CACN,WAAY,YAAY,YAAgB,WAGtCC,EAAI,IAAI1c,MAAM,IAElB,SAAS2c,IACP1uB,KAAK2uB,OACL3uB,KAAK4uB,GAAKH,EAEVxB,EAAKjd,KAAKhQ,KAAM,GAAI,GACrB,CAkBD,SAAS6uB,EAAOC,GACd,OAAQA,GAAO,EAAMA,IAAQ,EAC9B,CAED,SAASC,EAAQD,GACf,OAAQA,GAAO,GAAOA,IAAQ,CAC/B,CAED,SAASE,EAAIjjB,EAAGoL,EAAG5F,EAAG0d,GACpB,OAAU,IAANljB,EAAiBoL,EAAI5F,GAAQ4F,EAAK8X,EAC5B,IAANljB,EAAiBoL,EAAI5F,EAAM4F,EAAI8X,EAAM1d,EAAI0d,EACtC9X,EAAI5F,EAAI0d,CAChB,CA5BDV,EAASG,EAAMzB,GAEfyB,EAAK1f,UAAU2f,KAAO,WAOpB,OANA3uB,KAAKoR,GAAK,WACVpR,KAAKkvB,GAAK,WACVlvB,KAAKmvB,GAAK,WACVnvB,KAAKovB,GAAK,UACVpvB,KAAKqvB,GAAK,WAEHrvB,IACR,EAoBD0uB,EAAK1f,UAAU8e,QAAU,SAAUwB,GASjC,IARA,IAnBcR,EAmBVL,EAAIzuB,KAAK4uB,GAET1X,EAAc,EAAVlX,KAAKoR,GACT+F,EAAc,EAAVnX,KAAKkvB,GACT3d,EAAc,EAAVvR,KAAKmvB,GACTF,EAAc,EAAVjvB,KAAKovB,GACTrU,EAAc,EAAV/a,KAAKqvB,GAEJ/jB,EAAI,EAAGA,EAAI,KAAMA,EAAGmjB,EAAEnjB,GAAKgkB,EAAEC,YAAgB,EAAJjkB,GAClD,KAAOA,EAAI,KAAMA,EAAGmjB,EAAEnjB,IA5BRwjB,EA4BmBL,EAAEnjB,EAAI,GAAKmjB,EAAEnjB,EAAI,GAAKmjB,EAAEnjB,EAAI,IAAMmjB,EAAEnjB,EAAI,MA3B1D,EAAMwjB,IAAQ,GA6B7B,IAAK,IAAIU,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,IAAIzjB,KAAOyjB,EAAI,IACXC,EAAKZ,EAAM3X,GAAK8X,EAAGjjB,EAAGoL,EAAG5F,EAAG0d,GAAKlU,EAAI0T,EAAEe,GAAKhB,EAAEziB,GAAM,EAExDgP,EAAIkU,EACJA,EAAI1d,EACJA,EAAIwd,EAAO5X,GACXA,EAAID,EACJA,EAAIuY,CACL,CAEDzvB,KAAKoR,GAAM8F,EAAIlX,KAAKoR,GAAM,EAC1BpR,KAAKkvB,GAAM/X,EAAInX,KAAKkvB,GAAM,EAC1BlvB,KAAKmvB,GAAM5d,EAAIvR,KAAKmvB,GAAM,EAC1BnvB,KAAKovB,GAAMH,EAAIjvB,KAAKovB,GAAM,EAC1BpvB,KAAKqvB,GAAMtU,EAAI/a,KAAKqvB,GAAM,CAC3B,EAEDX,EAAK1f,UAAUqf,MAAQ,WACrB,IAAIqB,EAAIhd,EAAOid,YAAY,IAQ3B,OANAD,EAAEE,aAAuB,EAAV5vB,KAAKoR,GAAQ,GAC5Bse,EAAEE,aAAuB,EAAV5vB,KAAKkvB,GAAQ,GAC5BQ,EAAEE,aAAuB,EAAV5vB,KAAKmvB,GAAQ,GAC5BO,EAAEE,aAAuB,EAAV5vB,KAAKovB,GAAQ,IAC5BM,EAAEE,aAAuB,EAAV5vB,KAAKqvB,GAAQ,IAErBK,CACR,EAEDpB,EAAOjuB,QAAUquB","sources":["webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/bandwidth-approximator.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/http-media-manager.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/hybrid-loader.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/index.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/loader-interface.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/media-peer.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/p2p-media-manager.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/segments-memory-storage.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-core/dist/stringly-typed-event-emitter.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-hlsjs/dist/byte-range.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-hlsjs/dist/engine.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-hlsjs/dist/hlsjs-loader.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-hlsjs/dist/index.js","webpack://peertube-client/./node_modules/@peertube/p2p-media-loader-hlsjs/dist/segment-manager.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://peertube-client/./node_modules/@videojs/vhs-utils/es/stream.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://peertube-client/./node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js","webpack://peertube-client/./node_modules/m3u8-parser/dist/m3u8-parser.es.js","webpack://peertube-client/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://peertube-client/./node_modules/sha.js/hash.js","webpack://peertube-client/./node_modules/sha.js/sha1.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BandwidthApproximator = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"p2pml:bandwidth-approximator\");\nconst SMOOTH_INTERVAL = 2 * 1000;\nconst MEASURE_INTERVAL = 40 * 1000;\nclass NumberWithTime {\n    constructor(value, timeStamp) {\n        this.value = value;\n        this.timeStamp = timeStamp;\n    }\n}\nclass BandwidthApproximator {\n    constructor() {\n        this.lastBytes = [];\n        this.currentBytesSum = 0;\n        this.lastBandwidth = [];\n        this.addBytes = (bytes, timeStamp) => {\n            debug(\"Add %d bytes.\", bytes);\n            this.lastBytes.push(new NumberWithTime(bytes, timeStamp));\n            this.currentBytesSum += bytes;\n            while (timeStamp - this.lastBytes[0].timeStamp > SMOOTH_INTERVAL) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.currentBytesSum -= this.lastBytes.shift().value;\n            }\n            const interval = Math.min(SMOOTH_INTERVAL, timeStamp);\n            this.lastBandwidth.push(new NumberWithTime(this.currentBytesSum / interval, timeStamp));\n        };\n        // in bytes per millisecond\n        this.getBandwidth = (timeStamp) => {\n            while (this.lastBandwidth.length !== 0 && timeStamp - this.lastBandwidth[0].timeStamp > MEASURE_INTERVAL) {\n                this.lastBandwidth.shift();\n            }\n            let maxBandwidth = 0;\n            for (const bandwidth of this.lastBandwidth) {\n                if (bandwidth.value > maxBandwidth) {\n                    maxBandwidth = bandwidth.value;\n                }\n            }\n            debug(\"Max bandwidth: %d.\", maxBandwidth);\n            return maxBandwidth;\n        };\n        this.getSmoothInterval = () => {\n            return SMOOTH_INTERVAL;\n        };\n        this.getMeasureInterval = () => {\n            return MEASURE_INTERVAL;\n        };\n    }\n}\nexports.BandwidthApproximator = BandwidthApproximator;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpMediaManager = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\nclass FilteredEmitter extends stringly_typed_event_emitter_1.STEEmitter {\n}\nclass HttpMediaManager extends FilteredEmitter {\n    constructor(settings) {\n        super();\n        this.settings = settings;\n        this.xhrRequests = new Map();\n        this.failedSegments = new Map();\n        this.debug = (0, debug_1.default)(\"p2pml:http-media-manager\");\n        this.download = (segment, downloadedPieces) => {\n            if (this.isDownloading(segment)) {\n                return;\n            }\n            this.cleanTimedOutFailedSegments();\n            this.emit(\"segment-start-load\", segment);\n            const segmentUrl = segment.priority <= this.settings.skipSegmentBuilderPriority\n                ? segment.url\n                : this.buildSegmentUrl(segment);\n            this.debug(\"http segment download\", segmentUrl);\n            segment.requestUrl = segmentUrl;\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", segmentUrl, true);\n            xhr.responseType = \"arraybuffer\";\n            if (segment.range) {\n                xhr.setRequestHeader(\"Range\", segment.range);\n                downloadedPieces = undefined; // TODO: process downloadedPieces for segments with range headers too\n            }\n            else if (downloadedPieces !== undefined && this.settings.httpUseRanges) {\n                let bytesDownloaded = 0;\n                for (const piece of downloadedPieces) {\n                    bytesDownloaded += piece.byteLength;\n                }\n                xhr.setRequestHeader(\"Range\", `bytes=${bytesDownloaded}-`);\n                this.debug(\"continue download from\", bytesDownloaded);\n            }\n            else {\n                downloadedPieces = undefined;\n            }\n            this.setupXhrEvents(xhr, segment, downloadedPieces);\n            if (this.settings.xhrSetup) {\n                this.settings.xhrSetup(xhr, segmentUrl);\n            }\n            this.xhrRequests.set(segment.id, { xhr, segment, initialPriority: segment.priority, segmentUrl });\n            xhr.send();\n        };\n        this.updatePriority = (segment) => {\n            const request = this.xhrRequests.get(segment.id);\n            if (!request) {\n                throw new Error(\"Cannot update priority of not downloaded segment \" + segment.id);\n            }\n            // Segment is now in high priority\n            // If the segment URL changed, retry the request with the new URL\n            if (segment.priority <= this.settings.skipSegmentBuilderPriority &&\n                request.initialPriority > this.settings.skipSegmentBuilderPriority &&\n                request.segmentUrl !== segment.url) {\n                this.debug(\"aborting http segment because the segment is now in a high priority\", segment.id);\n                this.abort(segment);\n                this.download(segment);\n            }\n        };\n        this.abort = (segment) => {\n            const request = this.xhrRequests.get(segment.id);\n            if (request) {\n                request.xhr.abort();\n                this.xhrRequests.delete(segment.id);\n                this.debug(\"http segment abort\", segment.id);\n            }\n        };\n        this.isDownloading = (segment) => {\n            return this.xhrRequests.has(segment.id);\n        };\n        this.isFailed = (segment) => {\n            const time = this.failedSegments.get(segment.id);\n            return time !== undefined && time > this.now();\n        };\n        this.getActiveDownloads = () => {\n            return this.xhrRequests;\n        };\n        this.getActiveDownloadsCount = () => {\n            return this.xhrRequests.size;\n        };\n        this.destroy = () => {\n            this.xhrRequests.forEach((request) => request.xhr.abort());\n            this.xhrRequests.clear();\n        };\n        this.setupXhrEvents = (xhr, segment, downloadedPieces) => {\n            let prevBytesLoaded = 0;\n            xhr.addEventListener(\"progress\", (event) => {\n                const bytesLoaded = event.loaded - prevBytesLoaded;\n                this.emit(\"bytes-downloaded\", segment, bytesLoaded);\n                prevBytesLoaded = event.loaded;\n                if (event.lengthComputable) {\n                    this.emit(\"segment-size\", segment, event.total);\n                }\n            });\n            xhr.addEventListener(\"load\", async (event) => {\n                if (xhr.status < 200 || xhr.status >= 300) {\n                    this.segmentFailure(segment, event, xhr);\n                    return;\n                }\n                let data = xhr.response;\n                if (downloadedPieces !== undefined && xhr.status === 206) {\n                    let bytesDownloaded = 0;\n                    for (const piece of downloadedPieces) {\n                        bytesDownloaded += piece.byteLength;\n                    }\n                    const segmentData = new Uint8Array(bytesDownloaded + data.byteLength);\n                    let offset = 0;\n                    for (const piece of downloadedPieces) {\n                        segmentData.set(new Uint8Array(piece), offset);\n                        offset += piece.byteLength;\n                    }\n                    segmentData.set(new Uint8Array(data), offset);\n                    data = segmentData.buffer;\n                }\n                await this.segmentDownloadFinished(segment, data, xhr);\n            });\n            xhr.addEventListener(\"error\", (event) => {\n                this.segmentFailure(segment, event, xhr);\n            });\n            xhr.addEventListener(\"timeout\", (event) => {\n                this.segmentFailure(segment, event, xhr);\n            });\n        };\n        this.segmentDownloadFinished = async (segment, data, xhr) => {\n            segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\n            if (this.settings.segmentValidator) {\n                try {\n                    await this.settings.segmentValidator(Object.assign(Object.assign({}, segment), { data: data }), \"http\");\n                }\n                catch (error) {\n                    this.debug(\"segment validator failed\", error);\n                    this.segmentFailure(segment, error, xhr);\n                    return;\n                }\n            }\n            this.xhrRequests.delete(segment.id);\n            this.emit(\"segment-loaded\", segment, data);\n        };\n        this.segmentFailure = (segment, error, xhr) => {\n            segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\n            this.xhrRequests.delete(segment.id);\n            this.failedSegments.set(segment.id, this.now() + this.settings.httpFailedSegmentTimeout);\n            this.emit(\"segment-error\", segment, error);\n        };\n        this.cleanTimedOutFailedSegments = () => {\n            const now = this.now();\n            const candidates = [];\n            this.failedSegments.forEach((time, id) => {\n                if (time < now) {\n                    candidates.push(id);\n                }\n            });\n            candidates.forEach((id) => this.failedSegments.delete(id));\n        };\n        this.now = () => performance.now();\n    }\n    buildSegmentUrl(segment) {\n        if (this.settings.segmentUrlBuilder) {\n            return this.settings.segmentUrlBuilder(segment);\n        }\n        return segment.url;\n    }\n}\nexports.HttpMediaManager = HttpMediaManager;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HybridLoader = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst events_1 = require(\"events\");\nconst simple_peer_1 = __importDefault(require(\"simple-peer\"));\nconst loader_interface_1 = require(\"./loader-interface\");\nconst http_media_manager_1 = require(\"./http-media-manager\");\nconst p2p_media_manager_1 = require(\"./p2p-media-manager\");\nconst media_peer_1 = require(\"./media-peer\");\nconst bandwidth_approximator_1 = require(\"./bandwidth-approximator\");\nconst segments_memory_storage_1 = require(\"./segments-memory-storage\");\nconst defaultSettings = {\n    cachedSegmentExpiration: 5 * 60 * 1000,\n    cachedSegmentsCount: 30,\n    useP2P: true,\n    consumeOnly: false,\n    requiredSegmentsPriority: 1,\n    skipSegmentBuilderPriority: 1,\n    simultaneousHttpDownloads: 2,\n    httpDownloadProbability: 0.1,\n    httpDownloadProbabilityInterval: 1000,\n    httpDownloadProbabilitySkipIfNoPeers: false,\n    httpFailedSegmentTimeout: 10000,\n    httpDownloadMaxPriority: 20,\n    httpDownloadInitialTimeout: 0,\n    httpDownloadInitialTimeoutPerSegment: 4000,\n    httpUseRanges: false,\n    simultaneousP2PDownloads: 3,\n    p2pDownloadMaxPriority: 20,\n    p2pSegmentDownloadTimeout: 60000,\n    webRtcMaxMessageSize: 64 * 1024 - 1,\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\n    peerRequestsPerAnnounce: 10,\n    rtcConfig: simple_peer_1.default.config,\n};\nclass HybridLoader extends events_1.EventEmitter {\n    constructor(settings = {}) {\n        super();\n        this.debug = (0, debug_1.default)(\"p2pml:hybrid-loader\");\n        this.debugSegments = (0, debug_1.default)(\"p2pml:hybrid-loader-segments\");\n        this.segmentsQueue = [];\n        this.bandwidthApproximator = new bandwidth_approximator_1.BandwidthApproximator();\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n        this.createHttpManager = () => {\n            return new http_media_manager_1.HttpMediaManager(this.settings);\n        };\n        this.createP2PManager = () => {\n            return new p2p_media_manager_1.P2PMediaManager(this.segmentsStorage, this.settings);\n        };\n        this.load = async (segments, streamSwarmId) => {\n            this.initRandomDownloadIntervalIfNeeded();\n            if (segments.length > 0) {\n                this.masterSwarmId = segments[0].masterSwarmId;\n            }\n            if (this.masterSwarmId !== undefined) {\n                this.p2pManager.setStreamSwarmId(streamSwarmId, this.masterSwarmId);\n            }\n            this.debug(\"load segments\");\n            // stop all http requests and p2p downloads for segments that are not in the new load\n            let updateSegmentsMap = this.abortUnknownSegments(segments);\n            if (this.debug.enabled) {\n                for (const segment of segments) {\n                    if (!this.segmentsQueue.find((f) => f.id === segment.id)) {\n                        this.debug(\"add segment\", segment.id);\n                    }\n                }\n            }\n            this.segmentsQueue = segments;\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            let storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            updateSegmentsMap = this.processSegmentsQueue(storageSegments) || updateSegmentsMap;\n            if (await this.cleanSegmentsStorage()) {\n                storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                updateSegmentsMap = true;\n            }\n            if (updateSegmentsMap && !this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        };\n        this.getSegment = async (id) => {\n            return this.masterSwarmId === undefined ? undefined : this.segmentsStorage.getSegment(id, this.masterSwarmId);\n        };\n        this.getSettings = () => {\n            return this.settings;\n        };\n        this.getDetails = () => {\n            return {\n                peerId: this.p2pManager.getPeerId(),\n            };\n        };\n        this.getBandwidthEstimate = () => {\n            return this.bandwidthApproximator.getBandwidth(this.now());\n        };\n        this.destroy = async () => {\n            if (this.httpRandomDownloadInterval !== undefined) {\n                clearInterval(this.httpRandomDownloadInterval);\n                this.httpRandomDownloadInterval = undefined;\n            }\n            this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n            this.segmentsQueue = [];\n            this.httpManager.destroy();\n            this.p2pManager.destroy();\n            this.masterSwarmId = undefined;\n            await this.segmentsStorage.destroy();\n        };\n        this.processInitialSegmentTimeout = async () => {\n            if (this.httpRandomDownloadInterval === undefined) {\n                return; // Instance destroyed\n            }\n            if (this.masterSwarmId !== undefined) {\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                }\n            }\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\n                // Set one more timeout for a next segment\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment);\n            }\n        };\n        this.processSegmentsQueue = (storageSegments) => {\n            const currentPriority = this.segmentsQueue.length > 0 ? this.segmentsQueue[0].priority : 0;\n            this.debugSegments(`process segments queue. priority: ${currentPriority}, queue length: ${this.segmentsQueue.length}`);\n            if (this.masterSwarmId === undefined || this.segmentsQueue.length === 0) {\n                return false;\n            }\n            let updateSegmentsMap = false;\n            let segmentsMap;\n            let httpAllowed = true;\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\n                let firstNotDownloadePriority;\n                for (const segment of this.segmentsQueue) {\n                    if (!storageSegments.has(segment.id)) {\n                        firstNotDownloadePriority = segment.priority;\n                        break;\n                    }\n                }\n                const httpTimeout = this.now() - this.httpDownloadInitialTimeoutTimestamp;\n                httpAllowed =\n                    httpTimeout >= this.settings.httpDownloadInitialTimeout ||\n                        (firstNotDownloadePriority !== undefined &&\n                            httpTimeout > this.settings.httpDownloadInitialTimeoutPerSegment &&\n                            firstNotDownloadePriority <= 0);\n                if (httpAllowed) {\n                    this.debugSegments(\"cancel initial HTTP download timeout - timed out\");\n                    this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n                }\n            }\n            let scheduleNewProcessQueue = false;\n            for (let index = 0; index < this.segmentsQueue.length; index++) {\n                const segment = this.segmentsQueue[index];\n                if (storageSegments.has(segment.id)) {\n                    continue;\n                }\n                // Segment priority changed, notify http manager\n                if (this.httpManager.isDownloading(segment)) {\n                    this.httpManager.updatePriority(segment);\n                    continue;\n                }\n                const tryHTTP = httpAllowed && segment.priority <= this.settings.requiredSegmentsPriority;\n                if (tryHTTP && !this.httpManager.isFailed(segment)) {\n                    // Download required segments over HTTP\n                    if (this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads) {\n                        // Not enough HTTP download resources. Abort one of the HTTP downloads.\n                        for (let i = this.segmentsQueue.length - 1; i > index; i--) {\n                            const segmentToAbort = this.segmentsQueue[i];\n                            if (this.httpManager.isDownloading(segmentToAbort)) {\n                                this.debugSegments(\"cancel HTTP download\", segmentToAbort.priority, segmentToAbort.id);\n                                this.httpManager.abort(segmentToAbort);\n                                break;\n                            }\n                        }\n                    }\n                    if (this.httpManager.getActiveDownloadsCount() < this.settings.simultaneousHttpDownloads) {\n                        // Abort P2P download of the required segment if any and force HTTP download\n                        const downloadedPieces = this.p2pManager.abort(segment);\n                        this.httpManager.download(segment, downloadedPieces);\n                        this.debugSegments(\"HTTP download (priority)\", segment.priority, segment.id);\n                        updateSegmentsMap = true;\n                        continue;\n                    }\n                }\n                // We wanted to download a failed segment through HTTP, but we could not because of the timeout.\n                // Then we need to schedule another processing queue task\n                if (tryHTTP && this.httpManager.isFailed(segment)) {\n                    scheduleNewProcessQueue = true;\n                }\n                if (this.p2pManager.isDownloading(segment)) {\n                    continue;\n                }\n                if (segment.priority <= this.settings.requiredSegmentsPriority) {\n                    // Download required segments over P2P\n                    segmentsMap = segmentsMap ? segmentsMap : this.p2pManager.getOverallSegmentsMap();\n                    if (segmentsMap.get(segment.id) !== media_peer_1.MediaPeerSegmentStatus.Loaded) {\n                        continue;\n                    }\n                    if (this.p2pManager.getActiveDownloadsCount() >= this.settings.simultaneousP2PDownloads) {\n                        // Not enough P2P download resources. Abort one of the P2P downloads.\n                        for (let i = this.segmentsQueue.length - 1; i > index; i--) {\n                            const segmentToAbort = this.segmentsQueue[i];\n                            if (this.p2pManager.isDownloading(segmentToAbort)) {\n                                this.debugSegments(\"cancel P2P download\", segmentToAbort.priority, segmentToAbort.id);\n                                this.p2pManager.abort(segmentToAbort);\n                                break;\n                            }\n                        }\n                    }\n                    if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads) {\n                        if (this.p2pManager.download(segment)) {\n                            this.debugSegments(\"P2P download (priority)\", segment.priority, segment.id);\n                            continue;\n                        }\n                    }\n                    continue;\n                }\n                if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads &&\n                    segment.priority <= this.settings.p2pDownloadMaxPriority) {\n                    if (this.p2pManager.download(segment)) {\n                        this.debugSegments(\"P2P download\", segment.priority, segment.id);\n                    }\n                }\n            }\n            if (scheduleNewProcessQueue) {\n                setTimeout(async () => {\n                    if (this.masterSwarmId === undefined)\n                        return;\n                    const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                    this.processSegmentsQueue(storageSegments);\n                }, this.settings.httpFailedSegmentTimeout);\n            }\n            return updateSegmentsMap;\n        };\n        this.downloadRandomSegmentOverHttp = async () => {\n            if (this.masterSwarmId === undefined ||\n                this.httpRandomDownloadInterval === undefined ||\n                this.httpDownloadInitialTimeoutTimestamp !== -Infinity ||\n                this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads ||\n                (this.settings.httpDownloadProbabilitySkipIfNoPeers && this.p2pManager.getPeers().size === 0) ||\n                this.settings.consumeOnly) {\n                return;\n            }\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            const segmentsMap = this.p2pManager.getOverallSegmentsMap();\n            const pendingQueue = this.segmentsQueue.filter((s) => !this.p2pManager.isDownloading(s) &&\n                !this.httpManager.isDownloading(s) &&\n                !segmentsMap.has(s.id) &&\n                !this.httpManager.isFailed(s) &&\n                s.priority <= this.settings.httpDownloadMaxPriority &&\n                !storageSegments.has(s.id));\n            if (pendingQueue.length === 0) {\n                return;\n            }\n            if (Math.random() > this.settings.httpDownloadProbability * pendingQueue.length) {\n                return;\n            }\n            const segment = pendingQueue[Math.floor(Math.random() * pendingQueue.length)];\n            this.debugSegments(\"HTTP download (random)\", segment.priority, segment.id);\n            this.httpManager.download(segment);\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n        };\n        this.onSegmentStartLoad = (method, segment) => {\n            this.emit(loader_interface_1.Events.SegmentStartLoad, method, segment);\n        };\n        this.onPieceBytesDownloaded = (method, segment, bytes, peerId) => {\n            this.bandwidthApproximator.addBytes(bytes, this.now());\n            this.emit(loader_interface_1.Events.PieceBytesDownloaded, method, segment, bytes, peerId);\n        };\n        this.onPieceBytesUploaded = (method, segment, bytes, peerId) => {\n            this.emit(loader_interface_1.Events.PieceBytesUploaded, method, segment, bytes, peerId);\n        };\n        this.onSegmentLoaded = async (segment, data, peerId) => {\n            this.debugSegments(\"segment loaded\", segment.id, segment.id);\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            segment.data = data;\n            segment.downloadBandwidth = this.bandwidthApproximator.getBandwidth(this.now());\n            await this.segmentsStorage.storeSegment(segment);\n            this.emit(loader_interface_1.Events.SegmentLoaded, segment, peerId);\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            this.processSegmentsQueue(storageSegments);\n            if (!this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        };\n        this.onSegmentError = async (segment, details, peerId) => {\n            this.debugSegments(\"segment error\", segment.id, segment.id, peerId, details);\n            this.emit(loader_interface_1.Events.SegmentError, segment, details, peerId);\n            if (this.masterSwarmId !== undefined) {\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                }\n            }\n        };\n        this.onSegmentSize = async (segment, size) => {\n            this.debugSegments(\"segment size\", segment.id, size);\n            this.emit(loader_interface_1.Events.SegmentSize, segment, size);\n        };\n        this.getStreamSwarmId = (segment) => {\n            return segment.streamId === undefined ? segment.masterSwarmId : `${segment.masterSwarmId}+${segment.streamId}`;\n        };\n        this.createSegmentsMap = (storageSegments) => {\n            const segmentsMap = {};\n            const addSegmentToMap = (segment, status) => {\n                const streamSwarmId = this.getStreamSwarmId(segment);\n                const segmentId = segment.sequence;\n                let segmentsIdsAndStatuses = segmentsMap[streamSwarmId];\n                if (segmentsIdsAndStatuses === undefined) {\n                    segmentsIdsAndStatuses = [\"\", []];\n                    segmentsMap[streamSwarmId] = segmentsIdsAndStatuses;\n                }\n                const segmentsStatuses = segmentsIdsAndStatuses[1];\n                segmentsIdsAndStatuses[0] += segmentsStatuses.length === 0 ? segmentId : `|${segmentId}`;\n                segmentsStatuses.push(status);\n            };\n            for (const storageSegment of storageSegments.values()) {\n                addSegmentToMap(storageSegment.segment, media_peer_1.MediaPeerSegmentStatus.Loaded);\n            }\n            for (const download of this.httpManager.getActiveDownloads().values()) {\n                addSegmentToMap(download.segment, media_peer_1.MediaPeerSegmentStatus.LoadingByHttp);\n            }\n            return segmentsMap;\n        };\n        this.onPeerConnect = async (peer) => {\n            this.emit(loader_interface_1.Events.PeerConnect, peer);\n            if (!this.settings.consumeOnly && this.masterSwarmId !== undefined) {\n                this.p2pManager.sendSegmentsMap(peer.id, this.createSegmentsMap(await this.segmentsStorage.getSegmentsMap(this.masterSwarmId)));\n            }\n        };\n        this.onPeerClose = (peerId) => {\n            this.emit(loader_interface_1.Events.PeerClose, peerId);\n        };\n        this.onTrackerUpdate = async (data) => {\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity &&\n                data.incomplete !== undefined &&\n                data.incomplete <= 1) {\n                this.debugSegments(\"cancel initial HTTP download timeout - no peers\");\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n                if (this.masterSwarmId !== undefined) {\n                    const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                    if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                        this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                    }\n                }\n            }\n        };\n        this.cleanSegmentsStorage = async () => {\n            if (this.masterSwarmId === undefined) {\n                return false;\n            }\n            return this.segmentsStorage.clean(this.masterSwarmId, (id) => this.segmentsQueue.find((queueSegment) => queueSegment.id === id) !== undefined);\n        };\n        this.now = () => {\n            return performance.now();\n        };\n        this.initRandomDownloadIntervalIfNeeded = () => {\n            if (this.httpRandomDownloadInterval !== undefined)\n                return;\n            // Do once on first call\n            this.httpRandomDownloadInterval = setInterval(this.downloadRandomSegmentOverHttp, this.settings.httpDownloadProbabilityInterval);\n            if (this.settings.httpDownloadInitialTimeout > 0 &&\n                this.settings.httpDownloadInitialTimeoutPerSegment > 0) {\n                // Initialize initial HTTP download timeout (i.e. download initial segments over P2P)\n                this.debugSegments(\"enable initial HTTP download timeout\", this.settings.httpDownloadInitialTimeout, \"per segment\", this.settings.httpDownloadInitialTimeoutPerSegment);\n                this.httpDownloadInitialTimeoutTimestamp = this.now();\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment + 100);\n            }\n        };\n        this.abortUnknownSegments = (segments) => {\n            let updateSegmentsMap = false;\n            for (const segment of this.segmentsQueue) {\n                if (!segments.find((f) => f.id === segment.id)) {\n                    this.debug(\"remove segment\", segment.id);\n                    if (this.httpManager.isDownloading(segment)) {\n                        updateSegmentsMap = true;\n                        this.httpManager.abort(segment);\n                    }\n                    else {\n                        this.p2pManager.abort(segment);\n                    }\n                    this.emit(loader_interface_1.Events.SegmentAbort, segment);\n                }\n            }\n            return updateSegmentsMap;\n        };\n        this.settings = Object.assign(Object.assign({}, defaultSettings), settings);\n        const { bufferedSegmentsCount } = settings;\n        if (typeof bufferedSegmentsCount === \"number\") {\n            if (settings.p2pDownloadMaxPriority === undefined) {\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\n            }\n            if (settings.httpDownloadMaxPriority === undefined) {\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\n            }\n        }\n        this.segmentsStorage =\n            this.settings.segmentsStorage === undefined\n                ? new segments_memory_storage_1.SegmentsMemoryStorage(this.settings)\n                : this.settings.segmentsStorage;\n        this.debug(\"loader settings\", this.settings);\n        this.httpManager = this.createHttpManager();\n        this.httpManager.on(\"segment-start-load\", (segment) => this.onSegmentStartLoad(\"http\", segment));\n        this.httpManager.on(\"segment-loaded\", this.onSegmentLoaded);\n        this.httpManager.on(\"segment-error\", this.onSegmentError);\n        this.httpManager.on(\"segment-size\", this.onSegmentSize);\n        this.httpManager.on(\"bytes-downloaded\", (segment, bytes) => {\n            this.onPieceBytesDownloaded(\"http\", segment, bytes);\n        });\n        this.p2pManager = this.createP2PManager();\n        this.p2pManager.on(\"segment-start-load\", (segment) => this.onSegmentStartLoad(\"p2p\", segment));\n        this.p2pManager.on(\"segment-loaded\", this.onSegmentLoaded);\n        this.p2pManager.on(\"segment-error\", this.onSegmentError);\n        this.p2pManager.on(\"segment-size\", this.onSegmentSize);\n        this.p2pManager.on(\"peer-data-updated\", async () => {\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        });\n        this.p2pManager.on(\"bytes-downloaded\", (segment, bytes, peerId) => this.onPieceBytesDownloaded(\"p2p\", segment, bytes, peerId));\n        this.p2pManager.on(\"bytes-uploaded\", (segment, bytes, peerId) => this.onPieceBytesUploaded(\"p2p\", segment, bytes, peerId));\n        this.p2pManager.on(\"peer-connected\", this.onPeerConnect);\n        this.p2pManager.on(\"peer-closed\", this.onPeerClose);\n        this.p2pManager.on(\"tracker-update\", this.onTrackerUpdate);\n    }\n}\nexports.HybridLoader = HybridLoader;\nHybridLoader.isSupported = () => {\n    return window.RTCPeerConnection.prototype.createDataChannel !== undefined;\n};\n","\"use strict\";\n/**\n * @license Apache-2.0\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\nexports.version = \"0.6.2\";\n__exportStar(require(\"./loader-interface\"), exports);\n__exportStar(require(\"./hybrid-loader\"), exports);\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Events = void 0;\nvar Events;\n(function (Events) {\n    /**\n     * Emitted when segment has been downloaded.\n     * Args: segment\n     */\n    Events[\"SegmentLoaded\"] = \"segment_loaded\";\n    /**\n     * Emitted when an error occurred while loading the segment.\n     * Args: segment, error\n     */\n    Events[\"SegmentError\"] = \"segment_error\";\n    /**\n     * Emitter when we the segment size is known\n     * Args: segment, size\n     */\n    Events[\"SegmentSize\"] = \"segment_size\";\n    /**\n     * Emitted for each segment that does not hit into a new segments queue when the load() method is called.\n     * Args: segment\n     */\n    Events[\"SegmentAbort\"] = \"segment_abort\";\n    /**\n     * Emitted when the loader started to load a segment\n     * Args: method, segment\n     */\n    Events[\"SegmentStartLoad\"] = \"segment_start_load\";\n    /**\n     * Emitted when a peer is connected.\n     * Args: peer\n     */\n    Events[\"PeerConnect\"] = \"peer_connect\";\n    /**\n     * Emitted when a peer is disconnected.\n     * Args: peerId\n     */\n    Events[\"PeerClose\"] = \"peer_close\";\n    /**\n     * Emitted when a segment piece has been downloaded.\n     * Args: method (can be \"http\" or \"p2p\" only), bytes\n     */\n    Events[\"PieceBytesDownloaded\"] = \"piece_bytes_downloaded\";\n    /**\n     * Emitted when a segment piece has been uploaded.\n     * Args: method (can be \"p2p\" only), bytes\n     */\n    Events[\"PieceBytesUploaded\"] = \"piece_bytes_uploaded\";\n})(Events = exports.Events || (exports.Events = {}));\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediaPeer = exports.MediaPeerSegmentStatus = void 0;\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nconst debug_1 = __importDefault(require(\"debug\"));\nconst buffer_1 = require(\"buffer\");\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\nvar MediaPeerCommands;\n(function (MediaPeerCommands) {\n    MediaPeerCommands[MediaPeerCommands[\"SegmentData\"] = 0] = \"SegmentData\";\n    MediaPeerCommands[MediaPeerCommands[\"SegmentAbsent\"] = 1] = \"SegmentAbsent\";\n    MediaPeerCommands[MediaPeerCommands[\"SegmentsMap\"] = 2] = \"SegmentsMap\";\n    MediaPeerCommands[MediaPeerCommands[\"SegmentRequest\"] = 3] = \"SegmentRequest\";\n    MediaPeerCommands[MediaPeerCommands[\"CancelSegmentRequest\"] = 4] = \"CancelSegmentRequest\";\n})(MediaPeerCommands || (MediaPeerCommands = {}));\nvar MediaPeerSegmentStatus;\n(function (MediaPeerSegmentStatus) {\n    MediaPeerSegmentStatus[MediaPeerSegmentStatus[\"Loaded\"] = 0] = \"Loaded\";\n    MediaPeerSegmentStatus[MediaPeerSegmentStatus[\"LoadingByHttp\"] = 1] = \"LoadingByHttp\";\n})(MediaPeerSegmentStatus = exports.MediaPeerSegmentStatus || (exports.MediaPeerSegmentStatus = {}));\nclass DownloadingSegment {\n    constructor(id, size) {\n        this.id = id;\n        this.size = size;\n        this.bytesDownloaded = 0;\n        this.pieces = [];\n    }\n}\nclass MediaPeer extends stringly_typed_event_emitter_1.STEEmitter {\n    constructor(\n    // eslint-disable-next-line\n    peer, settings) {\n        super();\n        this.peer = peer;\n        this.settings = settings;\n        this.remoteAddress = \"\";\n        this.downloadingSegmentId = null;\n        this.downloadingSegment = null;\n        this.segmentsMap = new Map();\n        this.debug = (0, debug_1.default)(\"p2pml:media-peer\");\n        this.timer = null;\n        this.onPeerConnect = () => {\n            this.debug(\"peer connect\", this.id, this);\n            this.remoteAddress = this.peer.remoteAddress;\n            this.emit(\"connect\", this);\n        };\n        this.onPeerClose = () => {\n            this.debug(\"peer close\", this.id, this);\n            this.terminateSegmentRequest();\n            this.emit(\"close\", this);\n        };\n        this.onPeerError = (error) => {\n            this.debug(\"peer error\", this.id, error, this);\n        };\n        this.receiveSegmentPiece = (data) => {\n            if (!this.downloadingSegment) {\n                // The segment was not requested or canceled\n                this.debug(\"peer segment not requested\", this.id, this);\n                return;\n            }\n            this.downloadingSegment.bytesDownloaded += data.byteLength;\n            this.downloadingSegment.pieces.push(data);\n            const segmentId = this.downloadingSegment.id;\n            this.emit(\"bytes-downloaded\", this, segmentId, data.byteLength);\n            if (this.downloadingSegment.bytesDownloaded === this.downloadingSegment.size) {\n                const segmentData = new Uint8Array(this.downloadingSegment.size);\n                let offset = 0;\n                for (const piece of this.downloadingSegment.pieces) {\n                    segmentData.set(new Uint8Array(piece), offset);\n                    offset += piece.byteLength;\n                }\n                this.debug(\"peer segment download done\", this.id, segmentId, this);\n                this.terminateSegmentRequest();\n                this.emit(\"segment-loaded\", this, segmentId, segmentData.buffer);\n            }\n            else if (this.downloadingSegment.bytesDownloaded > this.downloadingSegment.size) {\n                this.debug(\"peer segment download bytes mismatch\", this.id, segmentId, this);\n                this.terminateSegmentRequest();\n                this.emit(\"segment-error\", this, segmentId, \"Too many bytes received for segment\");\n            }\n        };\n        this.getJsonCommand = (data) => {\n            const bytes = new Uint8Array(data);\n            // Serialized JSON string check by first, second and last characters: '{\" .... }'\n            if (bytes[0] === 123 && bytes[1] === 34 && bytes[data.byteLength - 1] === 125) {\n                try {\n                    return JSON.parse(new TextDecoder().decode(data));\n                }\n                catch (_a) {\n                    return null;\n                }\n            }\n            return null;\n        };\n        this.onPeerData = (data) => {\n            const command = this.getJsonCommand(data);\n            if (command === null) {\n                this.receiveSegmentPiece(data);\n                return;\n            }\n            if (this.downloadingSegment) {\n                this.debug(\"peer segment download is interrupted by a command\", this.id, this);\n                const segmentId = this.downloadingSegment.id;\n                this.terminateSegmentRequest();\n                this.emit(\"segment-error\", this, segmentId, \"Segment download is interrupted by a command\");\n                return;\n            }\n            this.debug(\"peer receive command\", this.id, command, this);\n            switch (command.c) {\n                case MediaPeerCommands.SegmentsMap:\n                    this.segmentsMap = this.createSegmentsMap(command.m);\n                    this.emit(\"data-updated\");\n                    break;\n                case MediaPeerCommands.SegmentRequest:\n                    this.emit(\"segment-request\", this, command.i);\n                    break;\n                case MediaPeerCommands.SegmentData:\n                    if (this.downloadingSegmentId &&\n                        this.downloadingSegmentId === command.i &&\n                        typeof command.s === \"number\" &&\n                        command.s >= 0) {\n                        this.downloadingSegment = new DownloadingSegment(command.i, command.s);\n                        this.emit(\"segment-start-load\", this.downloadingSegment.id);\n                        this.emit(\"segment-size\", this.downloadingSegment.id, this.downloadingSegment.size);\n                        this.cancelResponseTimeoutTimer();\n                    }\n                    break;\n                case MediaPeerCommands.SegmentAbsent:\n                    if (this.downloadingSegmentId && this.downloadingSegmentId === command.i) {\n                        this.terminateSegmentRequest();\n                        this.segmentsMap.delete(command.i);\n                        this.emit(\"segment-absent\", this, command.i);\n                    }\n                    break;\n                case MediaPeerCommands.CancelSegmentRequest:\n                    // TODO: peer stop sending buffer\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.createSegmentsMap = (segments) => {\n            if (!(segments instanceof Object)) {\n                return new Map();\n            }\n            const segmentsMap = new Map();\n            for (const streamSwarmId of Object.keys(segments)) {\n                const swarmData = segments[streamSwarmId];\n                if (!(swarmData instanceof Array) ||\n                    swarmData.length !== 2 ||\n                    typeof swarmData[0] !== \"string\" ||\n                    !(swarmData[1] instanceof Array)) {\n                    return new Map();\n                }\n                const segmentsIds = swarmData[0].split(\"|\");\n                const segmentsStatuses = swarmData[1];\n                if (segmentsIds.length !== segmentsStatuses.length) {\n                    return new Map();\n                }\n                for (let i = 0; i < segmentsIds.length; i++) {\n                    const segmentStatus = segmentsStatuses[i];\n                    if (typeof segmentStatus !== \"number\" || MediaPeerSegmentStatus[segmentStatus] === undefined) {\n                        return new Map();\n                    }\n                    segmentsMap.set(`${streamSwarmId}+${segmentsIds[i]}`, segmentStatus);\n                }\n            }\n            return segmentsMap;\n        };\n        this.sendCommand = (command) => {\n            this.debug(\"peer send command\", this.id, command, this);\n            this.peer.write(JSON.stringify(command));\n        };\n        this.destroy = () => {\n            this.debug(\"peer destroy\", this.id, this);\n            this.terminateSegmentRequest();\n            this.peer.destroy();\n        };\n        this.getDownloadingSegmentId = () => {\n            return this.downloadingSegmentId;\n        };\n        this.getSegmentsMap = () => {\n            return this.segmentsMap;\n        };\n        this.sendSegmentsMap = (segmentsMap) => {\n            this.sendCommand({ c: MediaPeerCommands.SegmentsMap, m: segmentsMap });\n        };\n        this.sendSegmentData = (segmentId, data) => {\n            this.sendCommand({\n                c: MediaPeerCommands.SegmentData,\n                i: segmentId,\n                s: data.byteLength,\n            });\n            let bytesLeft = data.byteLength;\n            while (bytesLeft > 0) {\n                const bytesToSend = bytesLeft >= this.settings.webRtcMaxMessageSize ? this.settings.webRtcMaxMessageSize : bytesLeft;\n                const buffer = buffer_1.Buffer.from(data, data.byteLength - bytesLeft, bytesToSend);\n                this.peer.write(buffer);\n                bytesLeft -= bytesToSend;\n            }\n            this.emit(\"bytes-uploaded\", this, segmentId, data.byteLength);\n        };\n        this.sendSegmentAbsent = (segmentId) => {\n            this.sendCommand({ c: MediaPeerCommands.SegmentAbsent, i: segmentId });\n        };\n        this.requestSegment = (segmentId) => {\n            if (this.downloadingSegmentId) {\n                throw new Error(\"A segment is already downloading: \" + this.downloadingSegmentId);\n            }\n            this.sendCommand({ c: MediaPeerCommands.SegmentRequest, i: segmentId });\n            this.downloadingSegmentId = segmentId;\n            this.runResponseTimeoutTimer();\n        };\n        this.cancelSegmentRequest = () => {\n            let downloadingSegment;\n            if (this.downloadingSegmentId) {\n                const segmentId = this.downloadingSegmentId;\n                downloadingSegment = this.downloadingSegment ? this.downloadingSegment.pieces : undefined;\n                this.terminateSegmentRequest();\n                this.sendCommand({ c: MediaPeerCommands.CancelSegmentRequest, i: segmentId });\n            }\n            return downloadingSegment;\n        };\n        this.runResponseTimeoutTimer = () => {\n            this.timer = setTimeout(() => {\n                this.timer = null;\n                if (!this.downloadingSegmentId) {\n                    return;\n                }\n                const segmentId = this.downloadingSegmentId;\n                this.cancelSegmentRequest();\n                this.emit(\"segment-timeout\", this, segmentId); // TODO: send peer not responding event\n            }, this.settings.p2pSegmentDownloadTimeout);\n        };\n        this.cancelResponseTimeoutTimer = () => {\n            if (this.timer) {\n                clearTimeout(this.timer);\n                this.timer = null;\n            }\n        };\n        this.terminateSegmentRequest = () => {\n            this.downloadingSegmentId = null;\n            this.downloadingSegment = null;\n            this.cancelResponseTimeoutTimer();\n        };\n        this.peer.on(\"connect\", this.onPeerConnect);\n        this.peer.on(\"close\", this.onPeerClose);\n        this.peer.on(\"error\", this.onPeerError);\n        this.peer.on(\"data\", this.onPeerData);\n        this.id = peer.id;\n    }\n}\nexports.MediaPeer = MediaPeer;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.P2PMediaManager = void 0;\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nconst debug_1 = __importDefault(require(\"debug\"));\nconst client_1 = __importDefault(require(\"bittorrent-tracker/client\"));\nconst buffer_1 = require(\"buffer\");\nconst sha1_1 = __importDefault(require(\"sha.js/sha1\"));\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\nconst media_peer_1 = require(\"./media-peer\");\nconst index_1 = require(\"./index\");\nconst PEER_PROTOCOL_VERSION = 2;\nconst PEER_ID_VERSION_STRING = index_1.version.replace(/\\d*./g, (v) => `0${parseInt(v, 10) % 100}`.slice(-2)).slice(0, 4);\nconst PEER_ID_VERSION_PREFIX = `-WW${PEER_ID_VERSION_STRING}-`; // Using WebTorrent client ID in order to not be banned by websocket trackers\nclass PeerSegmentRequest {\n    constructor(peerId, segment) {\n        this.peerId = peerId;\n        this.segment = segment;\n    }\n}\nfunction generatePeerId() {\n    const PEER_ID_SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const PEER_ID_LENGTH = 20;\n    let peerId = PEER_ID_VERSION_PREFIX;\n    for (let i = 0; i < PEER_ID_LENGTH - PEER_ID_VERSION_PREFIX.length; i++) {\n        peerId += PEER_ID_SYMBOLS.charAt(Math.floor(Math.random() * PEER_ID_SYMBOLS.length));\n    }\n    return new TextEncoder().encode(peerId).buffer;\n}\nclass P2PMediaManager extends stringly_typed_event_emitter_1.STEEmitter {\n    constructor(segmentsStorage, settings) {\n        super();\n        this.segmentsStorage = segmentsStorage;\n        this.settings = settings;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.trackerClient = null;\n        this.peers = new Map();\n        this.peerCandidates = new Map();\n        this.peerSegmentRequests = new Map();\n        this.streamSwarmId = null;\n        this.debug = (0, debug_1.default)(\"p2pml:p2p-media-manager\");\n        this.pendingTrackerClient = null;\n        this.getPeers = () => {\n            return this.peers;\n        };\n        this.getPeerId = () => {\n            return buffer_1.Buffer.from(this.peerId).toString(\"hex\");\n        };\n        this.setStreamSwarmId = (streamSwarmId, masterSwarmId) => {\n            if (this.streamSwarmId === streamSwarmId) {\n                return;\n            }\n            this.destroy(true);\n            this.streamSwarmId = streamSwarmId;\n            this.masterSwarmId = masterSwarmId;\n            this.debug(\"stream swarm ID\", this.streamSwarmId);\n            this.pendingTrackerClient = {\n                isDestroyed: false,\n            };\n            const pendingTrackerClient = this.pendingTrackerClient;\n            // TODO: native browser 'crypto.subtle' implementation doesn't work in Chrome in insecure pages\n            // TODO: Edge doesn't support SHA-1. Change to SHA-256 once Edge support is required.\n            // const infoHash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(PEER_PROTOCOL_VERSION + this.streamSwarmId));\n            const infoHash = new sha1_1.default().update(`${PEER_PROTOCOL_VERSION}${this.streamSwarmId}`).digest();\n            // destroy may be called while waiting for the hash to be calculated\n            if (!pendingTrackerClient.isDestroyed) {\n                this.pendingTrackerClient = null;\n                this.createClient(infoHash);\n            }\n            else if (this.trackerClient !== null) {\n                this.trackerClient.destroy();\n                this.trackerClient = null;\n            }\n        };\n        this.createClient = (infoHash) => {\n            if (!this.settings.useP2P) {\n                return;\n            }\n            const clientOptions = {\n                infoHash: buffer_1.Buffer.from(infoHash, 0, 20),\n                peerId: buffer_1.Buffer.from(this.peerId, 0, 20),\n                announce: this.settings.trackerAnnounce,\n                rtcConfig: this.settings.rtcConfig,\n                port: 6881,\n                getAnnounceOpts: () => {\n                    return { numwant: this.settings.peerRequestsPerAnnounce };\n                },\n            };\n            let oldTrackerClient = this.trackerClient;\n            this.trackerClient = new client_1.default(clientOptions);\n            this.trackerClient.on(\"error\", this.onTrackerError);\n            this.trackerClient.on(\"warning\", this.onTrackerWarning);\n            this.trackerClient.on(\"update\", this.onTrackerUpdate);\n            this.trackerClient.on(\"peer\", this.onTrackerPeer);\n            this.trackerClient.start();\n            if (oldTrackerClient !== null) {\n                oldTrackerClient.destroy();\n                oldTrackerClient = null;\n            }\n        };\n        this.onTrackerError = (error) => {\n            this.debug(\"tracker error\", error);\n        };\n        this.onTrackerWarning = (warning) => {\n            this.debug(\"tracker warning\", warning);\n        };\n        this.onTrackerUpdate = (data) => {\n            this.debug(\"tracker update\", data);\n            this.emit(\"tracker-update\", data);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.onTrackerPeer = (trackerPeer) => {\n            this.debug(\"tracker peer\", trackerPeer.id, trackerPeer);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            if (this.peers.has(trackerPeer.id)) {\n                this.debug(\"tracker peer already connected\", trackerPeer.id, trackerPeer);\n                trackerPeer.destroy();\n                return;\n            }\n            const peer = new media_peer_1.MediaPeer(trackerPeer, this.settings);\n            peer.on(\"connect\", this.onPeerConnect);\n            peer.on(\"close\", this.onPeerClose);\n            peer.on(\"data-updated\", this.onPeerDataUpdated);\n            peer.on(\"segment-request\", this.onSegmentRequest);\n            peer.on(\"segment-loaded\", this.onSegmentLoaded);\n            peer.on(\"segment-absent\", this.onSegmentAbsent);\n            peer.on(\"segment-error\", this.onSegmentError);\n            peer.on(\"segment-size\", this.onSegmentSize);\n            peer.on(\"segment-start-load\", this.onSegmentStartLoad);\n            peer.on(\"segment-timeout\", this.onSegmentTimeout);\n            peer.on(\"bytes-downloaded\", this.onPieceBytesDownloaded);\n            peer.on(\"bytes-uploaded\", this.onPieceBytesUploaded);\n            let peerCandidatesById = this.peerCandidates.get(peer.id);\n            if (!peerCandidatesById) {\n                peerCandidatesById = [];\n                this.peerCandidates.set(peer.id, peerCandidatesById);\n            }\n            peerCandidatesById.push(peer);\n        };\n        this.download = (segment) => {\n            if (this.isDownloading(segment)) {\n                return false;\n            }\n            const candidates = [];\n            for (const peer of this.peers.values()) {\n                if (peer.getDownloadingSegmentId() === null &&\n                    peer.getSegmentsMap().get(segment.id) === media_peer_1.MediaPeerSegmentStatus.Loaded) {\n                    candidates.push(peer);\n                }\n            }\n            if (candidates.length === 0) {\n                return false;\n            }\n            const peer = candidates[Math.floor(Math.random() * candidates.length)];\n            peer.requestSegment(segment.id);\n            this.peerSegmentRequests.set(segment.id, new PeerSegmentRequest(peer.id, segment));\n            return true;\n        };\n        this.abort = (segment) => {\n            let downloadingSegment;\n            const peerSegmentRequest = this.peerSegmentRequests.get(segment.id);\n            if (peerSegmentRequest) {\n                const peer = this.peers.get(peerSegmentRequest.peerId);\n                if (peer) {\n                    downloadingSegment = peer.cancelSegmentRequest();\n                }\n                this.peerSegmentRequests.delete(segment.id);\n            }\n            return downloadingSegment;\n        };\n        this.isDownloading = (segment) => {\n            return this.peerSegmentRequests.has(segment.id);\n        };\n        this.getActiveDownloadsCount = () => {\n            return this.peerSegmentRequests.size;\n        };\n        this.destroy = (swarmChange = false) => {\n            this.streamSwarmId = null;\n            if (this.trackerClient) {\n                this.trackerClient.stop();\n                if (swarmChange) {\n                    // Don't destroy trackerClient to reuse its WebSocket connection to the tracker server\n                    this.trackerClient.removeAllListeners(\"error\");\n                    this.trackerClient.removeAllListeners(\"warning\");\n                    this.trackerClient.removeAllListeners(\"update\");\n                    this.trackerClient.removeAllListeners(\"peer\");\n                }\n                else {\n                    this.trackerClient.destroy();\n                    this.trackerClient = null;\n                }\n            }\n            if (this.pendingTrackerClient) {\n                this.pendingTrackerClient.isDestroyed = true;\n                this.pendingTrackerClient = null;\n            }\n            this.peers.forEach((peer) => peer.destroy());\n            this.peers.clear();\n            this.peerSegmentRequests.clear();\n            for (const peerCandidateById of this.peerCandidates.values()) {\n                for (const peerCandidate of peerCandidateById) {\n                    peerCandidate.destroy();\n                }\n            }\n            this.peerCandidates.clear();\n        };\n        this.sendSegmentsMapToAll = (segmentsMap) => {\n            this.peers.forEach((peer) => peer.sendSegmentsMap(segmentsMap));\n        };\n        this.sendSegmentsMap = (peerId, segmentsMap) => {\n            const peer = this.peers.get(peerId);\n            if (peer) {\n                peer.sendSegmentsMap(segmentsMap);\n            }\n        };\n        this.getOverallSegmentsMap = () => {\n            const overallSegmentsMap = new Map();\n            for (const peer of this.peers.values()) {\n                for (const [segmentId, segmentStatus] of peer.getSegmentsMap()) {\n                    if (segmentStatus === media_peer_1.MediaPeerSegmentStatus.Loaded) {\n                        overallSegmentsMap.set(segmentId, media_peer_1.MediaPeerSegmentStatus.Loaded);\n                    }\n                    else if (!overallSegmentsMap.get(segmentId)) {\n                        overallSegmentsMap.set(segmentId, media_peer_1.MediaPeerSegmentStatus.LoadingByHttp);\n                    }\n                }\n            }\n            return overallSegmentsMap;\n        };\n        this.onPieceBytesDownloaded = (peer, segmentId, bytes) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.emit(\"bytes-downloaded\", peerSegmentRequest.segment, bytes, peer.id);\n            }\n        };\n        this.onPieceBytesUploaded = async (peer, segmentId, bytes) => {\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\n            if (segment) {\n                this.emit(\"bytes-uploaded\", segment, bytes, peer.id);\n            }\n        };\n        this.onPeerConnect = (peer) => {\n            const connectedPeer = this.peers.get(peer.id);\n            if (connectedPeer) {\n                this.debug(\"tracker peer already connected (in peer connect)\", peer.id, peer);\n                peer.destroy();\n                return;\n            }\n            // First peer with the ID connected\n            this.peers.set(peer.id, peer);\n            // Destroy all other peer candidates\n            const peerCandidatesById = this.peerCandidates.get(peer.id);\n            if (peerCandidatesById) {\n                for (const peerCandidate of peerCandidatesById) {\n                    if (peerCandidate !== peer) {\n                        peerCandidate.destroy();\n                    }\n                }\n                this.peerCandidates.delete(peer.id);\n            }\n            this.emit(\"peer-connected\", { id: peer.id, remoteAddress: peer.remoteAddress });\n        };\n        this.onPeerClose = (peer) => {\n            if (this.peers.get(peer.id) !== peer) {\n                // Try to delete the peer candidate\n                const peerCandidatesById = this.peerCandidates.get(peer.id);\n                if (!peerCandidatesById) {\n                    return;\n                }\n                const index = peerCandidatesById.indexOf(peer);\n                if (index !== -1) {\n                    peerCandidatesById.splice(index, 1);\n                }\n                if (peerCandidatesById.length === 0) {\n                    this.peerCandidates.delete(peer.id);\n                }\n                return;\n            }\n            for (const [key, value] of this.peerSegmentRequests) {\n                if (value.peerId === peer.id) {\n                    this.peerSegmentRequests.delete(key);\n                }\n            }\n            this.peers.delete(peer.id);\n            this.emit(\"peer-data-updated\");\n            this.emit(\"peer-closed\", peer.id);\n        };\n        this.onPeerDataUpdated = () => {\n            this.emit(\"peer-data-updated\");\n        };\n        this.onSegmentRequest = async (peer, segmentId) => {\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\n            if (segment && segment.data) {\n                peer.sendSegmentData(segmentId, segment.data);\n            }\n            else {\n                peer.sendSegmentAbsent(segmentId);\n            }\n        };\n        this.onSegmentLoaded = async (peer, segmentId, data) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (!peerSegmentRequest) {\n                return;\n            }\n            const segment = peerSegmentRequest.segment;\n            if (this.settings.segmentValidator) {\n                try {\n                    await this.settings.segmentValidator(Object.assign(Object.assign({}, segment), { data: data }), \"p2p\", peer.id);\n                }\n                catch (error) {\n                    this.debug(\"segment validator failed\", error);\n                    this.peerSegmentRequests.delete(segmentId);\n                    this.emit(\"segment-error\", segment, error, peer.id);\n                    this.onPeerClose(peer);\n                    return;\n                }\n            }\n            this.peerSegmentRequests.delete(segmentId);\n            this.emit(\"segment-loaded\", segment, data, peer.id);\n        };\n        this.onSegmentAbsent = (peer, segmentId) => {\n            this.peerSegmentRequests.delete(segmentId);\n            this.emit(\"peer-data-updated\");\n        };\n        this.onSegmentError = (peer, segmentId, description) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.peerSegmentRequests.delete(segmentId);\n                this.emit(\"segment-error\", peerSegmentRequest.segment, description, peer.id);\n            }\n        };\n        this.onSegmentSize = (segmentId, size) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.emit(\"segment-size\", peerSegmentRequest.segment, size);\n            }\n        };\n        this.onSegmentStartLoad = (segmentId, size) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.emit(\"segment-start-load\", peerSegmentRequest.segment, size);\n            }\n        };\n        this.onSegmentTimeout = (peer, segmentId) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.peerSegmentRequests.delete(segmentId);\n                peer.destroy();\n                if (this.peers.delete(peerSegmentRequest.peerId)) {\n                    this.emit(\"peer-data-updated\");\n                }\n            }\n        };\n        this.peerId = settings.useP2P ? generatePeerId() : new ArrayBuffer(0);\n        if (this.debug.enabled) {\n            this.debug(\"peer ID\", this.getPeerId(), new TextDecoder().decode(this.peerId));\n        }\n    }\n}\nexports.P2PMediaManager = P2PMediaManager;\n","\"use strict\";\n/**\n * Copyright 2019 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SegmentsMemoryStorage = void 0;\nclass SegmentsMemoryStorage {\n    constructor(settings) {\n        this.settings = settings;\n        this.cache = new Map();\n        this.storeSegment = async (segment) => {\n            this.cache.set(segment.id, { segment, lastAccessed: performance.now() });\n        };\n        this.getSegmentsMap = async () => {\n            return this.cache;\n        };\n        this.getSegment = async (id) => {\n            const cacheItem = this.cache.get(id);\n            if (cacheItem === undefined) {\n                return undefined;\n            }\n            cacheItem.lastAccessed = performance.now();\n            return cacheItem.segment;\n        };\n        this.hasSegment = async (id) => {\n            return this.cache.has(id);\n        };\n        this.clean = async (masterSwarmId, lockedSegmentsFilter) => {\n            const segmentsToDelete = [];\n            const remainingSegments = [];\n            // Delete old segments\n            const now = performance.now();\n            for (const cachedSegment of this.cache.values()) {\n                if (now - cachedSegment.lastAccessed > this.settings.cachedSegmentExpiration) {\n                    segmentsToDelete.push(cachedSegment.segment.id);\n                }\n                else {\n                    remainingSegments.push(cachedSegment);\n                }\n            }\n            // Delete segments over cached count\n            let countOverhead = remainingSegments.length - this.settings.cachedSegmentsCount;\n            if (countOverhead > 0) {\n                remainingSegments.sort((a, b) => a.lastAccessed - b.lastAccessed);\n                for (const cachedSegment of remainingSegments) {\n                    if (lockedSegmentsFilter === undefined || !lockedSegmentsFilter(cachedSegment.segment.id)) {\n                        segmentsToDelete.push(cachedSegment.segment.id);\n                        countOverhead--;\n                        if (countOverhead === 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n            segmentsToDelete.forEach((id) => this.cache.delete(id));\n            return segmentsToDelete.length > 0;\n        };\n        this.destroy = async () => {\n            this.cache.clear();\n        };\n    }\n}\nexports.SegmentsMemoryStorage = SegmentsMemoryStorage;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.STEEmitter = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst events_1 = require(\"events\");\nclass STEEmitter extends events_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.on = (event, listener) => super.on(event, listener);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        this.emit = (event, ...args) => super.emit(event, ...args);\n    }\n}\nexports.STEEmitter = STEEmitter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.byteRangeToString = exports.compareByteRanges = exports.getByteRange = void 0;\nfunction getByteRange(context) {\n    return context.rangeEnd && context.rangeStart !== undefined\n        ? { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart }\n        : undefined;\n}\nexports.getByteRange = getByteRange;\nfunction compareByteRanges(b1, b2) {\n    return b1 === undefined ? b2 === undefined : b2 !== undefined && b1.length === b2.length && b1.offset === b2.offset;\n}\nexports.compareByteRanges = compareByteRanges;\nfunction byteRangeToString(byteRange) {\n    if (byteRange === undefined) {\n        return undefined;\n    }\n    const end = byteRange.offset + byteRange.length - 1;\n    return `bytes=${byteRange.offset}-${end}`;\n}\nexports.byteRangeToString = byteRangeToString;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Engine = void 0;\nconst events_1 = require(\"events\");\nconst p2p_media_loader_core_1 = require(\"@peertube/p2p-media-loader-core\");\nconst segment_manager_1 = require(\"./segment-manager\");\nconst hlsjs_loader_1 = require(\"./hlsjs-loader\");\nclass Engine extends events_1.EventEmitter {\n    constructor(settings = {}) {\n        super();\n        this.loader = new p2p_media_loader_core_1.HybridLoader(settings.loader);\n        this.segmentManager = new segment_manager_1.SegmentManager(this.loader, settings.segments);\n        Object.keys(p2p_media_loader_core_1.Events)\n            .map((eventKey) => p2p_media_loader_core_1.Events[eventKey])\n            .forEach((event) => this.loader.on(event, (...args) => this.emit(event, ...args)));\n    }\n    static isSupported() {\n        return p2p_media_loader_core_1.HybridLoader.isSupported();\n    }\n    createLoaderClass() {\n        var _a;\n        const engine = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const loader = (_a = class {\n                constructor() {\n                    this.load = async (context, config, callbacks) => {\n                        this.context = context;\n                        this.callbacks = callbacks;\n                        await this.impl.load(context, config, callbacks);\n                    };\n                    this.abort = () => {\n                        if (this.context) {\n                            this.impl.abort(this.context, this.callbacks);\n                        }\n                    };\n                    this.destroy = () => {\n                        if (this.context) {\n                            this.impl.abort(this.context);\n                        }\n                    };\n                    this.getResponseHeader = () => undefined;\n                    this.impl = new hlsjs_loader_1.HlsJsLoader(engine.segmentManager);\n                    engine.setLatestLoaderImpl(this);\n                    this.stats = this.impl.stats;\n                }\n            },\n            _a.getEngine = () => {\n                return engine;\n            },\n            _a);\n        return loader;\n    }\n    async destroy() {\n        await this.segmentManager.destroy();\n    }\n    abortCurrentRequest() {\n        if (this.latestLoaderImpl) {\n            this.latestLoaderImpl.abort();\n            this.latestLoaderImpl = undefined;\n        }\n    }\n    getSettings() {\n        return {\n            segments: this.segmentManager.getSettings(),\n            loader: this.loader.getSettings(),\n        };\n    }\n    getDetails() {\n        return {\n            loader: this.loader.getDetails(),\n        };\n    }\n    setPlayingSegment(url, byteRange, start, duration) {\n        this.segmentManager.setPlayingSegment(url, byteRange, start, duration);\n    }\n    setPlayingSegmentByCurrentTime(playheadPosition) {\n        this.segmentManager.setPlayingSegmentByCurrentTime(playheadPosition);\n    }\n    setLatestLoaderImpl(loader) {\n        this.latestLoaderImpl = loader;\n    }\n}\nexports.Engine = Engine;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HlsJsLoader = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst p2p_media_loader_core_1 = require(\"@peertube/p2p-media-loader-core\");\nconst byte_range_1 = require(\"./byte-range\");\nclass HlsJsLoader {\n    constructor(segmentManager) {\n        this.segmentManager = segmentManager;\n        this.debug = (0, debug_1.default)(\"p2pml:hlsjs-loader\");\n        this.stats = {\n            loaded: 0,\n            total: 0,\n            aborted: false,\n            retry: 0,\n            chunkCount: 0,\n            bwEstimate: 0,\n            loading: {\n                start: 0,\n                end: 0,\n                first: 0,\n            },\n            parsing: {\n                start: 0,\n                end: 0,\n            },\n            buffering: {\n                start: 0,\n                end: 0,\n                first: 0,\n            },\n        };\n        this.boundOnSegmentAbort = this.onSegmentAbort.bind(this);\n        this.boundOnUpdateSegmentSize = this.onUpdateSegmentSize.bind(this);\n        this.boundOnUpdateLoaded = this.onUpdateLoaded.bind(this);\n        this.boundOnSegmentStartLoad = this.onSegmentStartLoad.bind(this);\n        this.debugId = \"\";\n    }\n    async load(context, _config, callbacks) {\n        this.context = context;\n        this.callbacks = callbacks;\n        HlsJsLoader.updateStatsToStartLoading(this.stats);\n        if (this.context.type) {\n            this.debug(`Loading playlist ${this.context.url}.`);\n            try {\n                const result = await this.segmentManager.loadPlaylist(this.context.url);\n                this.debug(`Playlist ${this.context.url} loaded.`);\n                this.successPlaylist(result, this.context, this.callbacks);\n            }\n            catch (e) {\n                this.error(e, this.context, this.callbacks);\n            }\n        }\n        else if (this.context.frag) {\n            this.loader = this.segmentManager.loader;\n            this.byteRange = (0, byte_range_1.getByteRange)(this.context);\n            this.debugId = this.byteRange\n                ? `${this.context.url} / ${this.byteRange.offset}`\n                : this.context.url;\n            this.debug(`Loading fragment ${this.debugId}.`);\n            // We may be downloading the segment by P2P, so we don\"t care about the stats sent to HLS ABR\n            this.interval = setInterval(() => HlsJsLoader.updateStatsToStartLoading(this.stats), 200);\n            this.loader.on(p2p_media_loader_core_1.Events.SegmentAbort, this.boundOnSegmentAbort);\n            this.loader.on(p2p_media_loader_core_1.Events.SegmentSize, this.boundOnUpdateSegmentSize);\n            this.loader.on(p2p_media_loader_core_1.Events.SegmentStartLoad, this.boundOnSegmentStartLoad);\n            try {\n                const result = await this.segmentManager.loadSegment(this.context.url, this.byteRange);\n                const { content } = result;\n                if (content) {\n                    this.successSegment(content, this.context, this.callbacks);\n                    this.debug(`Loaded fragment ${this.debugId}.`);\n                }\n                else {\n                    this.cleanup();\n                    this.debug(`Loaded empty fragment ${this.debugId} (aborted?).`);\n                }\n            }\n            catch (e) {\n                setTimeout(() => this.error(e, this.context, this.callbacks), 0);\n                this.debug(`Error in fragment ${this.debugId} loading.`, e);\n            }\n        }\n        else {\n            console.warn(\"Unknown load request\", this.context);\n        }\n    }\n    abort(context, callbacks) {\n        if (this.stats.loaded || this.stats.aborted)\n            return;\n        this.debug(`Aborting by hls.js fragment ${this.debugId} loading.`);\n        this.cleanup();\n        this.segmentManager.abortSegment(context.url, (0, byte_range_1.getByteRange)(context));\n        this.stats.aborted = true;\n        const onAbort = callbacks === null || callbacks === void 0 ? void 0 : callbacks.onAbort;\n        if (onAbort) {\n            onAbort(this.stats, context, undefined);\n        }\n    }\n    successPlaylist(xhr, context, callbacks) {\n        this.cleanup();\n        const now = performance.now();\n        this.stats.loading.end = now;\n        this.stats.loaded = xhr.response.length;\n        this.stats.total = xhr.response.length;\n        callbacks.onSuccess({\n            url: xhr.responseURL,\n            data: xhr.response,\n        }, this.stats, context, undefined);\n    }\n    successSegment(content, context, callbacks) {\n        this.cleanup();\n        const now = performance.now();\n        this.stats.loading.end = now;\n        this.stats.loaded = content.byteLength;\n        this.stats.total = content.byteLength;\n        if (callbacks.onProgress) {\n            callbacks.onProgress(this.stats, context, content, undefined);\n        }\n        callbacks.onSuccess({\n            url: context.url,\n            data: content,\n        }, this.stats, context, undefined);\n    }\n    error(error, context, callbacks) {\n        this.cleanup();\n        callbacks.onError(error, context, undefined);\n    }\n    cleanup() {\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = undefined;\n        }\n        if (this.loader) {\n            this.loader.off(p2p_media_loader_core_1.Events.SegmentStartLoad, this.boundOnSegmentStartLoad);\n            this.loader.off(p2p_media_loader_core_1.Events.SegmentSize, this.boundOnUpdateSegmentSize);\n            this.loader.off(p2p_media_loader_core_1.Events.PieceBytesDownloaded, this.boundOnUpdateLoaded);\n            this.loader.off(p2p_media_loader_core_1.Events.SegmentAbort, this.boundOnSegmentAbort);\n        }\n    }\n    onSegmentAbort(segment) {\n        var _a;\n        if (!this.isSegment(segment))\n            return;\n        this.debug(`Aborting by p2p-media-loader fragment ${this.debugId || \"\"}.`);\n        this.stats.aborted = true;\n        const onAbort = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onAbort;\n        if (onAbort) {\n            onAbort(this.stats, this.context, undefined);\n        }\n        this.cleanup();\n    }\n    onUpdateSegmentSize(segment, size) {\n        if (!this.isSegment(segment))\n            return;\n        this.stats.total = size;\n    }\n    onUpdateLoaded(_type, segment, bytes) {\n        if (!this.isSegment(segment))\n            return;\n        this.stats.loaded += bytes;\n    }\n    onSegmentStartLoad(method, segment) {\n        if (!this.interval || method !== \"http\" || !this.isSegment(segment))\n            return;\n        clearInterval(this.interval);\n        this.interval = undefined;\n        HlsJsLoader.updateStatsToStartLoading(this.stats);\n        this.loader.on(p2p_media_loader_core_1.Events.PieceBytesDownloaded, this.boundOnUpdateLoaded);\n    }\n    ;\n    isSegment(segment) {\n        return segment.url === this.context.url && segment.range === (0, byte_range_1.byteRangeToString)(this.byteRange);\n    }\n    static updateStatsToStartLoading(stats) {\n        if (stats.aborted)\n            return;\n        const start = performance.now();\n        stats.loading.start = start;\n        stats.loading.first = start;\n    }\n}\nexports.HlsJsLoader = HlsJsLoader;\n","\"use strict\";\n/**\n * @license Apache-2.0\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initJwPlayer = exports.initMediaElementJsPlayer = exports.initVideoJsHlsJsPlugin = exports.initVideoJsContribHlsJsPlayer = exports.initFlowplayerHlsJsPlayer = exports.initClapprPlayer = exports.initHlsJsPlayer = exports.version = void 0;\n/* eslint-disable */\nexports.version = \"0.6.2\";\n__exportStar(require(\"./engine\"), exports);\n__exportStar(require(\"./segment-manager\"), exports);\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)(\"p2pml:hlsjs-init\");\nfunction initHlsJsPlayer(player) {\n    if (player && player.config && player.config.loader && typeof player.config.loader.getEngine === \"function\") {\n        initHlsJsEvents(player, player.config.loader.getEngine());\n    }\n}\nexports.initHlsJsPlayer = initHlsJsPlayer;\nfunction initClapprPlayer(player) {\n    player.on(\"play\", () => {\n        const playback = player.core.getCurrentPlayback();\n        if (playback._hls && !playback._hls._p2pm_linitialized) {\n            playback._hls._p2pm_linitialized = true;\n            initHlsJsPlayer(player.core.getCurrentPlayback()._hls);\n        }\n    });\n}\nexports.initClapprPlayer = initClapprPlayer;\nfunction initFlowplayerHlsJsPlayer(player) {\n    player.on(\"ready\", () => { var _a; return initHlsJsPlayer((_a = player.engine.hlsjs) !== null && _a !== void 0 ? _a : player.engine.hls); });\n}\nexports.initFlowplayerHlsJsPlayer = initFlowplayerHlsJsPlayer;\nfunction initVideoJsContribHlsJsPlayer(player) {\n    player.ready(() => {\n        const options = player.tech_.options_;\n        if (options &&\n            options.hlsjsConfig &&\n            options.hlsjsConfig.loader &&\n            typeof options.hlsjsConfig.loader.getEngine === \"function\") {\n            initHlsJsEvents(player.tech_, options.hlsjsConfig.loader.getEngine());\n        }\n    });\n}\nexports.initVideoJsContribHlsJsPlayer = initVideoJsContribHlsJsPlayer;\nfunction initVideoJsHlsJsPlugin() {\n    if (videojs == undefined || videojs.Html5Hlsjs == undefined) {\n        return;\n    }\n    videojs.Html5Hlsjs.addHook(\"beforeinitialize\", (videojsPlayer, hlsjs) => {\n        if (hlsjs.config && hlsjs.config.loader && typeof hlsjs.config.loader.getEngine === \"function\") {\n            initHlsJsEvents(hlsjs, hlsjs.config.loader.getEngine());\n        }\n    });\n}\nexports.initVideoJsHlsJsPlugin = initVideoJsHlsJsPlugin;\nfunction initMediaElementJsPlayer(mediaElement) {\n    mediaElement.addEventListener(\"hlsFragChanged\", (event) => {\n        const hls = mediaElement.hlsPlayer;\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\n            const engine = hls.config.loader.getEngine();\n            if (event.data && event.data.length > 1) {\n                const frag = event.data[1].frag;\n                const byteRange = frag.byteRange.length !== 2\n                    ? undefined\n                    : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\n                engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\n            }\n        }\n    });\n    mediaElement.addEventListener(\"hlsDestroying\", async () => {\n        const hls = mediaElement.hlsPlayer;\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\n            const engine = hls.config.loader.getEngine();\n            await engine.destroy();\n        }\n    });\n    mediaElement.addEventListener(\"hlsError\", (event) => {\n        const hls = mediaElement.hlsPlayer;\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\n            if (event.data !== undefined && event.data.details === \"bufferStalledError\") {\n                const engine = hls.config.loader.getEngine();\n                engine.setPlayingSegmentByCurrentTime(hls.media.currentTime);\n            }\n        }\n    });\n}\nexports.initMediaElementJsPlayer = initMediaElementJsPlayer;\nfunction initJwPlayer(player, hlsjsConfig) {\n    const iid = setInterval(() => {\n        if (player.hls && player.hls.config) {\n            clearInterval(iid);\n            Object.assign(player.hls.config, hlsjsConfig);\n            initHlsJsPlayer(player.hls);\n        }\n    }, 200);\n}\nexports.initJwPlayer = initJwPlayer;\nfunction initHlsJsEvents(player, engine) {\n    player.on(\"hlsFragChanged\", (_event, data) => {\n        debug(\"HLS Frag changed.\", data);\n        const frag = data.frag;\n        const byteRange = frag.byteRange.length !== 2\n            ? undefined\n            : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\n        engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\n    });\n    player.on(\"hlsDestroying\", async () => {\n        await engine.destroy();\n    });\n    player.on(\"hlsError\", (_event, errorData) => {\n        if (errorData.details === \"bufferStalledError\") {\n            const htmlMediaElement = (player.media === undefined\n                ? player.el_ // videojs-contrib-hlsjs\n                : player.media); // all others\n            if (htmlMediaElement) {\n                engine.setPlayingSegmentByCurrentTime(htmlMediaElement.currentTime);\n            }\n        }\n    });\n    player.on('seeking', () => {\n        debug(\"Player seeking.\");\n        // Abort current HTTP/P2P request so HLS is not stuck with a P2P request when moving current video player time\n        // to a previously loaded fragment\n        engine.abortCurrentRequest();\n    });\n}\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SegmentManager = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst p2p_media_loader_core_1 = require(\"@peertube/p2p-media-loader-core\");\nconst m3u8_parser_1 = require(\"m3u8-parser\");\nconst byte_range_1 = require(\"./byte-range\");\nconst defaultSettings = {\n    forwardSegmentCount: 20,\n    swarmId: undefined,\n    assetsStorage: undefined,\n};\nclass SegmentManager {\n    constructor(loader, settings = {}) {\n        this.debug = (0, debug_1.default)(\"p2pml:segment-manager\");\n        this.masterPlaylist = null;\n        this.variantPlaylists = new Map();\n        this.segmentRequest = null;\n        this.playQueue = [];\n        this.onSegmentLoaded = (segment) => {\n            if (this.segmentRequest &&\n                this.segmentRequest.segmentUrl === segment.url &&\n                (0, byte_range_1.byteRangeToString)(this.segmentRequest.segmentByteRange) === segment.range) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.segmentRequest.onSuccess(segment.data.slice(0), segment.downloadBandwidth);\n                this.segmentRequest = null;\n            }\n        };\n        this.onSegmentError = (segment, error) => {\n            if (this.segmentRequest &&\n                this.segmentRequest.segmentUrl === segment.url &&\n                (0, byte_range_1.byteRangeToString)(this.segmentRequest.segmentByteRange) === segment.range) {\n                this.segmentRequest.onError(error);\n                this.segmentRequest = null;\n            }\n        };\n        this.onSegmentAbort = (segment) => {\n            if (this.segmentRequest &&\n                this.segmentRequest.segmentUrl === segment.url &&\n                (0, byte_range_1.byteRangeToString)(this.segmentRequest.segmentByteRange) === segment.range) {\n                this.segmentRequest.onError(\"Loading aborted: internal abort\");\n                this.segmentRequest = null;\n            }\n        };\n        this.settings = Object.assign(Object.assign({}, defaultSettings), settings);\n        this.loader = loader;\n        this.loader.on(p2p_media_loader_core_1.Events.SegmentLoaded, this.onSegmentLoaded);\n        this.loader.on(p2p_media_loader_core_1.Events.SegmentError, this.onSegmentError);\n        this.loader.on(p2p_media_loader_core_1.Events.SegmentAbort, this.onSegmentAbort);\n    }\n    getSettings() {\n        return this.settings;\n    }\n    processPlaylist(requestUrl, content, responseUrl) {\n        const parser = new m3u8_parser_1.Parser();\n        parser.push(content);\n        parser.end();\n        const playlist = new Playlist(requestUrl, responseUrl, parser.manifest);\n        if (playlist.manifest.playlists) {\n            this.masterPlaylist = playlist;\n            for (const [key, variantPlaylist] of this.variantPlaylists) {\n                const { streamSwarmId, found, index } = this.getStreamSwarmId(variantPlaylist.requestUrl);\n                if (!found) {\n                    this.variantPlaylists.delete(key);\n                }\n                else {\n                    variantPlaylist.streamSwarmId = streamSwarmId;\n                    variantPlaylist.streamId = \"V\" + index.toString();\n                }\n            }\n        }\n        else {\n            const { streamSwarmId, found, index } = this.getStreamSwarmId(requestUrl);\n            if (found || this.masterPlaylist === null) {\n                // do not add audio and subtitles to variants\n                playlist.streamSwarmId = streamSwarmId;\n                playlist.streamId = this.masterPlaylist === null ? undefined : \"V\" + index.toString();\n                this.variantPlaylists.set(requestUrl, playlist);\n                this.updateSegments();\n            }\n        }\n    }\n    async loadPlaylist(url) {\n        const assetsStorage = this.settings.assetsStorage;\n        let xhr;\n        if (assetsStorage !== undefined) {\n            let masterSwarmId;\n            masterSwarmId = this.getMasterSwarmId();\n            if (masterSwarmId === undefined) {\n                masterSwarmId = url.split(\"?\")[0];\n            }\n            const asset = await assetsStorage.getAsset(url, undefined, masterSwarmId);\n\n            if (asset !== undefined) {\n                xhr = {\n                    responseURL: asset.responseUri,\n                    response: asset.data,\n                };\n            }\n            else {\n                xhr = await this.loadContent(url, \"text\");\n                void assetsStorage.storeAsset({\n                    masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : url,\n                    masterSwarmId: masterSwarmId,\n                    requestUri: url,\n                    responseUri: xhr.responseURL,\n                    data: xhr.response,\n                });\n            }\n        }\n        else {\n            xhr = await this.loadContent(url, \"text\");\n        }\n\n        console.log('url, xhr.response, xhr.responseURL', url, xhr.response, xhr.responseURL)\n\n        this.processPlaylist(url, xhr.response, xhr.responseURL);\n        return xhr;\n    }\n    async loadSegment(url, byteRange) {\n\n        var _a;\n        const segmentLocation = this.getSegmentLocation(url, byteRange);\n        const byteRangeString = (0, byte_range_1.byteRangeToString)(byteRange);\n        if (!segmentLocation) {\n            let content;\n            // Not a segment from variants; usually can be: init, audio or subtitles segment, encryption key etc.\n            const assetsStorage = this.settings.assetsStorage;\n            if (assetsStorage !== undefined) {\n                let masterManifestUri = (_a = this.masterPlaylist) === null || _a === void 0 ? void 0 : _a.requestUrl;\n                let masterSwarmId;\n                masterSwarmId = this.getMasterSwarmId();\n                if (masterSwarmId === undefined && this.variantPlaylists.size === 1) {\n                    const result = this.variantPlaylists.values().next();\n                    if (!result.done) {\n                        // always true\n                        masterSwarmId = result.value.requestUrl.split(\"?\")[0];\n                    }\n                }\n                if (masterManifestUri === undefined && this.variantPlaylists.size === 1) {\n                    const result = this.variantPlaylists.values().next();\n                    if (!result.done) {\n                        // always true\n                        masterManifestUri = result.value.requestUrl;\n                    }\n                }\n                if (masterSwarmId !== undefined && masterManifestUri !== undefined) {\n                    const asset = await assetsStorage.getAsset(url, byteRangeString, masterSwarmId);\n                    if (asset !== undefined) {\n                        content = asset.data;\n                    }\n                    else {\n                        const xhr = await this.loadContent(url, \"arraybuffer\", byteRangeString);\n                        content = xhr.response;\n                        void assetsStorage.storeAsset({\n                            masterManifestUri: masterManifestUri,\n                            masterSwarmId: masterSwarmId,\n                            requestUri: url,\n                            requestRange: byteRangeString,\n                            responseUri: xhr.responseURL,\n                            data: content,\n                        });\n                    }\n                }\n            }\n            if (content === undefined) {\n                const xhr = await this.loadContent(url, \"arraybuffer\", byteRangeString);\n                content = xhr.response;\n            }\n            return { content, downloadBandwidth: 0 };\n        }\n        const segmentSequence = (segmentLocation.playlist.manifest.mediaSequence ? segmentLocation.playlist.manifest.mediaSequence : 0) +\n            segmentLocation.segmentIndex;\n        if (this.playQueue.length > 0) {\n            const previousSegment = this.playQueue[this.playQueue.length - 1];\n            if (previousSegment.segmentSequence !== segmentSequence - 1) {\n                // Reset play queue in case of segment loading out of sequence\n                this.playQueue = [];\n            }\n        }\n        if (this.segmentRequest) {\n            this.segmentRequest.onError(\"Cancel segment request: simultaneous segment requests are not supported\");\n        }\n        const promise = new Promise((resolve, reject) => {\n            this.segmentRequest = new SegmentRequest(url, byteRange, segmentSequence, segmentLocation.playlist.requestUrl, (content, downloadBandwidth) => resolve({ content, downloadBandwidth }), (error) => reject(error));\n        });\n        this.playQueue.push({ segmentUrl: url, segmentByteRange: byteRange, segmentSequence: segmentSequence });\n        void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, true);\n        return promise;\n    }\n    setPlayingSegment(url, byteRange, start, duration) {\n        const urlIndex = this.playQueue.findIndex((segment) => segment.segmentUrl === url && (0, byte_range_1.compareByteRanges)(segment.segmentByteRange, byteRange));\n        this.debug(\"Set playing segment to index %d\", urlIndex, this.playQueue);\n        if (urlIndex >= 0) {\n            this.playQueue = this.playQueue.slice(urlIndex);\n            this.playQueue[0].playPosition = { start, duration };\n            this.updateSegments();\n        }\n    }\n    setPlayingSegmentByCurrentTime(playheadPosition) {\n        if (this.playQueue.length === 0 || !this.playQueue[0].playPosition) {\n            return;\n        }\n        const currentSegmentPosition = this.playQueue[0].playPosition;\n        const segmentEndTime = currentSegmentPosition.start + currentSegmentPosition.duration;\n        if (segmentEndTime - playheadPosition < 0.2) {\n            // means that current segment is (almost) finished playing\n            // remove it from queue\n            this.playQueue = this.playQueue.slice(1);\n            this.updateSegments();\n        }\n    }\n    abortSegment(url, byteRange) {\n        if (this.segmentRequest &&\n            this.segmentRequest.segmentUrl === url &&\n            (0, byte_range_1.compareByteRanges)(this.segmentRequest.segmentByteRange, byteRange)) {\n            this.segmentRequest.onSuccess(undefined, 0);\n            this.segmentRequest = null;\n        }\n    }\n    abortCurrentSegment() {\n        if (!this.segmentRequest)\n            return;\n        this.segmentRequest.onSuccess(undefined, 0);\n        this.segmentRequest = null;\n    }\n    async destroy() {\n        if (this.segmentRequest) {\n            this.segmentRequest.onError(\"Loading aborted: object destroyed\");\n            this.segmentRequest = null;\n        }\n        this.masterPlaylist = null;\n        this.variantPlaylists.clear();\n        this.playQueue = [];\n        if (this.settings.assetsStorage !== undefined) {\n            await this.settings.assetsStorage.destroy();\n        }\n        await this.loader.destroy();\n    }\n    updateSegments() {\n        if (!this.segmentRequest) {\n            return;\n        }\n        const segmentLocation = this.getSegmentLocation(this.segmentRequest.segmentUrl, this.segmentRequest.segmentByteRange);\n        this.debug(\"update segments\", segmentLocation);\n        if (segmentLocation) {\n            void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, false);\n        }\n    }\n    getSegmentLocation(url, byteRange) {\n        for (const playlist of this.variantPlaylists.values()) {\n            const segmentIndex = playlist.getSegmentIndex(url, byteRange);\n            if (segmentIndex >= 0) {\n                return { playlist: playlist, segmentIndex: segmentIndex };\n            }\n        }\n        return undefined;\n    }\n    async loadSegments(playlist, segmentIndex, requestFirstSegment) {\n        var _a;\n        const segments = [];\n        const playlistSegments = playlist.manifest.segments;\n        const initialSequence = (_a = playlist.manifest.mediaSequence) !== null && _a !== void 0 ? _a : 0;\n        let loadSegmentId = null;\n        let priority = Math.max(0, this.playQueue.length - 1);\n        const masterSwarmId = this.getMasterSwarmId();\n        this.debug(\"load segments\", priority, segmentIndex);\n        for (let i = segmentIndex; i < playlistSegments.length && segments.length < this.settings.forwardSegmentCount; ++i) {\n            const segment = playlist.manifest.segments[i];\n            const url = playlist.getSegmentAbsoluteUrl(segment.uri);\n            const byteRange = segment.byterange;\n            const id = this.getSegmentId(playlist, initialSequence + i);\n            segments.push({\n                id: id,\n                url: url,\n                masterSwarmId: masterSwarmId !== undefined ? masterSwarmId : playlist.streamSwarmId,\n                masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : playlist.requestUrl,\n                streamId: playlist.streamId,\n                sequence: (initialSequence + i).toString(),\n                range: (0, byte_range_1.byteRangeToString)(byteRange),\n                priority: priority++,\n            });\n            if (requestFirstSegment && !loadSegmentId) {\n                loadSegmentId = id;\n            }\n        }\n        this.loader.load(segments, playlist.streamSwarmId);\n        if (loadSegmentId) {\n            const segment = await this.loader.getSegment(loadSegmentId);\n            if (segment) {\n                // Segment already loaded by loader\n                this.onSegmentLoaded(segment);\n            }\n        }\n    }\n    getSegmentId(playlist, segmentSequence) {\n        return `${playlist.streamSwarmId}+${segmentSequence}`;\n    }\n    getMasterSwarmId() {\n        const settingsSwarmId = this.settings.swarmId && this.settings.swarmId.length !== 0 ? this.settings.swarmId : undefined;\n        if (settingsSwarmId !== undefined) {\n            return settingsSwarmId;\n        }\n        return this.masterPlaylist !== null ? this.masterPlaylist.requestUrl.split(\"?\")[0] : undefined;\n    }\n    getStreamSwarmId(playlistUrl) {\n        const masterSwarmId = this.getMasterSwarmId();\n        if (this.masterPlaylist && this.masterPlaylist.manifest.playlists && masterSwarmId) {\n            for (let i = 0; i < this.masterPlaylist.manifest.playlists.length; ++i) {\n                const url = new URL(this.masterPlaylist.manifest.playlists[i].uri, this.masterPlaylist.responseUrl).toString();\n                if (url === playlistUrl) {\n                    return { streamSwarmId: `${masterSwarmId}+V${i}`, found: true, index: i };\n                }\n            }\n        }\n        return {\n            streamSwarmId: masterSwarmId !== null && masterSwarmId !== void 0 ? masterSwarmId : playlistUrl.split(\"?\")[0],\n            found: false,\n            index: -1,\n        };\n    }\n    async loadContent(url, responseType, range) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url, true);\n            xhr.responseType = responseType;\n            if (range) {\n                xhr.setRequestHeader(\"Range\", range);\n            }\n            xhr.addEventListener(\"readystatechange\", () => {\n                if (xhr.readyState !== 4)\n                    return;\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr);\n                }\n                else {\n                    reject(xhr.statusText);\n                }\n            });\n            const xhrSetup = this.loader.getSettings().xhrSetup;\n            if (xhrSetup) {\n                xhrSetup(xhr, url);\n            }\n            xhr.send();\n        });\n    }\n}\nexports.SegmentManager = SegmentManager;\nclass Playlist {\n    constructor(requestUrl, responseUrl, manifest) {\n        this.requestUrl = requestUrl;\n        this.responseUrl = responseUrl;\n        this.manifest = manifest;\n        this.streamSwarmId = \"\";\n    }\n    getSegmentIndex(url, byteRange) {\n        for (let i = 0; i < this.manifest.segments.length; ++i) {\n            const segment = this.manifest.segments[i];\n            const segmentUrl = this.getSegmentAbsoluteUrl(segment.uri);\n            if (url === segmentUrl && (0, byte_range_1.compareByteRanges)(segment.byterange, byteRange)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    getSegmentAbsoluteUrl(segmentUrl) {\n        return new URL(segmentUrl, this.responseUrl).toString();\n    }\n}\nclass SegmentRequest {\n    constructor(segmentUrl, segmentByteRange, segmentSequence, playlistRequestUrl, onSuccess, onError) {\n        this.segmentUrl = segmentUrl;\n        this.segmentByteRange = segmentByteRange;\n        this.segmentSequence = segmentSequence;\n        this.playlistRequestUrl = playlistRequestUrl;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","/**\n * @file stream.js\n */\n\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = /*#__PURE__*/function () {\n  function Stream() {\n    this.listeners = {};\n  }\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  var _proto = Stream.prototype;\n\n  _proto.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  }\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {boolean} if we could turn it off or not\n   */\n  ;\n\n  _proto.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n    // In Video.js we slice listener functions\n    // on trigger so that it does not mess up the order\n    // while we loop through.\n    //\n    // Here we slice on off so that the loop in trigger\n    // can continue using it's old reference to loop without\n    // messing up the order.\n\n    this.listeners[type] = this.listeners[type].slice(0);\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {string} type the event name\n   */\n  ;\n\n  _proto.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    } // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n\n\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  }\n  /**\n   * Destroys the stream and cleans up.\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    this.listeners = {};\n  }\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n  ;\n\n  _proto.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\nexport { Stream as default };","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import window from 'global/window';\n\nvar atob = function atob(s) {\n  return window.atob ? window.atob(s) : Buffer.from(s, 'base64').toString('binary');\n};\n\nexport default function decodeB64ToUint8Array(b64Text) {\n  var decodedString = atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n\n  return array;\n}","/*! @name m3u8-parser @version 4.7.1 @license Apache-2.0 */\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport Stream from '@videojs/vhs-utils/es/stream.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array.js';\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(LineStream, _Stream);\n\n  function LineStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.buffer = '';\n    return _this;\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n\n  var _proto = LineStream.prototype;\n\n  _proto.push = function push(data) {\n    var nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\nvar TAB = String.fromCharCode(0x09);\n\nvar parseByterange = function parseByterange(byterangeString) {\n  // optionally match and capture 0+ digits before `@`\n  // optionally match and capture 0+ digits after `@`\n  var match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\n  var result = {};\n\n  if (match[1]) {\n    result.length = parseInt(match[1], 10);\n  }\n\n  if (match[2]) {\n    result.offset = parseInt(match[2], 10);\n  }\n\n  return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\n\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\n\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\n\nvar ParseStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(ParseStream, _Stream);\n\n  function ParseStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.customParsers = [];\n    _this.tagMappers = [];\n    return _this;\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n\n  var _proto = ParseStream.prototype;\n\n  _proto.push = function push(line) {\n    var _this2 = this;\n\n    var match;\n    var event; // strip whitespace\n\n    line = line.trim();\n\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n\n    var newLines = this.tagMappers.reduce(function (acc, mapper) {\n      var mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(function (newLine) {\n      for (var i = 0; i < _this2.customParsers.length; i++) {\n        if (_this2.customParsers[i].call(_this2, newLine)) {\n          return;\n        }\n      } // Comments\n\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        _this2.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n\n        return;\n      }\n\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n\n        if (match[2]) {\n          event.title = match[2];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-BYTERANGE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = _extends(parseByterange(match[1]), {\n          type: 'tag',\n          tagType: 'byterange'\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n\n          if (attributes.BYTERANGE) {\n            event.byterange = parseByterange(attributes.BYTERANGE);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n\n            event.attributes.RESOLUTION = resolution;\n          }\n\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-START:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'skip'\n        };\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\n          event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\n        }\n\n        if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\n          event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['INDEPENDENT', 'GAP'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        if (event.attributes.hasOwnProperty('BYTERANGE')) {\n          event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'server-control'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part-inf'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['PART-TARGET'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'preload-hint'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n            var subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\n            event.attributes.byterange = event.attributes.byterange || {};\n            event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n\n            delete event.attributes[key];\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'rendition-report'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      } // unknown tag type\n\n\n      _this2.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  }\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n  ;\n\n  _proto.addParser = function addParser(_ref) {\n    var _this3 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this3.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n\n        return true;\n      }\n    });\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n  ;\n\n  _proto.addTagMapper = function addTagMapper(_ref2) {\n    var expression = _ref2.expression,\n        map = _ref2.map;\n\n    var mapFn = function mapFn(line) {\n      if (expression.test(line)) {\n        return map(line);\n      }\n\n      return line;\n    };\n\n    this.tagMappers.push(mapFn);\n  };\n\n  return ParseStream;\n}(Stream);\n\nvar camelCase = function camelCase(str) {\n  return str.toLowerCase().replace(/-(\\w)/g, function (a) {\n    return a[1].toUpperCase();\n  });\n};\n\nvar camelCaseKeys = function camelCaseKeys(attributes) {\n  var result = {};\n  Object.keys(attributes).forEach(function (key) {\n    result[camelCase(key)] = attributes[key];\n  });\n  return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\n\n\nvar setHoldBack = function setHoldBack(manifest) {\n  var serverControl = manifest.serverControl,\n      targetDuration = manifest.targetDuration,\n      partTargetDuration = manifest.partTargetDuration;\n\n  if (!serverControl) {\n    return;\n  }\n\n  var tag = '#EXT-X-SERVER-CONTROL';\n  var hb = 'holdBack';\n  var phb = 'partHoldBack';\n  var minTargetDuration = targetDuration && targetDuration * 3;\n  var minPartDuration = partTargetDuration && partTargetDuration * 2;\n\n  if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n    serverControl[hb] = minTargetDuration;\n    this.trigger('info', {\n      message: tag + \" defaulting HOLD-BACK to targetDuration * 3 (\" + minTargetDuration + \").\"\n    });\n  }\n\n  if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n    this.trigger('warn', {\n      message: tag + \" clamping HOLD-BACK (\" + serverControl[hb] + \") to targetDuration * 3 (\" + minTargetDuration + \")\"\n    });\n    serverControl[hb] = minTargetDuration;\n  } // default no part hold back to part target duration * 3\n\n\n  if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n    serverControl[phb] = partTargetDuration * 3;\n    this.trigger('info', {\n      message: tag + \" defaulting PART-HOLD-BACK to partTargetDuration * 3 (\" + serverControl[phb] + \").\"\n    });\n  } // if part hold back is too small default it to part target duration * 2\n\n\n  if (partTargetDuration && serverControl[phb] < minPartDuration) {\n    this.trigger('warn', {\n      message: tag + \" clamping PART-HOLD-BACK (\" + serverControl[phb] + \") to partTargetDuration * 2 (\" + minPartDuration + \").\"\n    });\n    serverControl[phb] = minPartDuration;\n  }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\n\nvar Parser = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(Parser, _Stream);\n\n  function Parser() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n\n\n    var self = _assertThisInitialized(_this);\n    /* eslint-enable consistent-this */\n\n\n    var uris = [];\n    var currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    var currentMap; // if specified, the active decryption key\n\n    var _key;\n\n    var hasParts = false;\n\n    var noop = function noop() {};\n\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n    // used in MPDs with Widevine encrypted streams.\n\n    var widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\n\n    var currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    }; // keep track of the last seen segment's byte range end, as segments are not required\n    // to provide the offset, in which case it defaults to the next byte after the\n    // previous segment\n\n    var lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n\n    var lastPartByterangeEnd = 0;\n\n    _this.on('end', function () {\n      // only add preloadSegment if we don't yet have a uri for it.\n      // and we actually have parts/preloadHints\n      if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n        return;\n      }\n\n      if (!currentUri.map && currentMap) {\n        currentUri.map = currentMap;\n      }\n\n      if (!currentUri.key && _key) {\n        currentUri.key = _key;\n      }\n\n      if (!currentUri.timeline && typeof currentTimeline === 'number') {\n        currentUri.timeline = currentTimeline;\n      }\n\n      _this.manifest.preloadSegment = currentUri;\n    }); // update the manifest with the m3u8 entry from the parse stream\n\n\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup;\n      var rendition;\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            version: function version() {\n              if (entry.version) {\n                this.manifest.version = entry.version;\n              }\n            },\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */\n                  entry.offset = lastByterangeEnd;\n                }\n              }\n\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n\n              lastByterangeEnd = byterange.offset + byterange.length;\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.apple.streamingkeydelivery') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.apple.fps.1_0'] = {\n                  attributes: entry.attributes\n                };\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.microsoft.playready') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.microsoft.playready'] = {\n                  uri: entry.attributes.URI\n                };\n                return;\n              } // check if the content is encrypted for Widevine\n              // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n\n\n              if (entry.attributes.KEYFORMAT === widevineUuid) {\n                var VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n\n                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                  this.trigger('warn', {\n                    message: 'invalid key method provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\n                  this.trigger('warn', {\n                    message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\n                  });\n                }\n\n                if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\n                  this.trigger('warn', {\n                    message: 'invalid key URI provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\n                  this.trigger('warn', {\n                    message: 'invalid key ID provided for Widevine'\n                  });\n                  return;\n                } // if Widevine key attributes are valid, store them as `contentProtection`\n                // on the manifest to emulate Widevine tag structure in a DASH mpd\n\n\n                this.manifest.contentProtection = this.manifest.contentProtection || {};\n                this.manifest.contentProtection['com.widevine.alpha'] = {\n                  attributes: {\n                    schemeIdUri: entry.attributes.KEYFORMAT,\n                    // remove '0x' from the key id string\n                    keyId: entry.attributes.KEYID.substring(2)\n                  },\n                  // decode the base64-encoded PSSH box\n                  pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\n                };\n                return;\n              }\n\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n\n              if (_key) {\n                currentMap.key = _key;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.targetDuration = entry.duration;\n              setHoldBack.call(this, this.manifest);\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            },\n            'skip': function skip() {\n              this.manifest.skip = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\n            },\n            'part': function part() {\n              var _this2 = this;\n\n              hasParts = true; // parts are always specifed before a segment\n\n              var segmentIndex = this.manifest.segments.length;\n              var part = camelCaseKeys(entry.attributes);\n              currentUri.parts = currentUri.parts || [];\n              currentUri.parts.push(part);\n\n              if (part.byterange) {\n                if (!part.byterange.hasOwnProperty('offset')) {\n                  part.byterange.offset = lastPartByterangeEnd;\n                }\n\n                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n              }\n\n              var partIndex = currentUri.parts.length - 1;\n              this.warnOnMissingAttributes_(\"#EXT-X-PART #\" + partIndex + \" for segment #\" + segmentIndex, entry.attributes, ['URI', 'DURATION']);\n\n              if (this.manifest.renditionReports) {\n                this.manifest.renditionReports.forEach(function (r, i) {\n                  if (!r.hasOwnProperty('lastPart')) {\n                    _this2.trigger('warn', {\n                      message: \"#EXT-X-RENDITION-REPORT #\" + i + \" lacks required attribute(s): LAST-PART\"\n                    });\n                  }\n                });\n              }\n            },\n            'server-control': function serverControl() {\n              var attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n\n              if (!attrs.hasOwnProperty('canBlockReload')) {\n                attrs.canBlockReload = false;\n                this.trigger('info', {\n                  message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\n                });\n              }\n\n              setHoldBack.call(this, this.manifest);\n\n              if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\n                this.trigger('warn', {\n                  message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\n                });\n              }\n            },\n            'preload-hint': function preloadHint() {\n              // parts are always specifed before a segment\n              var segmentIndex = this.manifest.segments.length;\n              var hint = camelCaseKeys(entry.attributes);\n              var isPart = hint.type && hint.type === 'PART';\n              currentUri.preloadHints = currentUri.preloadHints || [];\n              currentUri.preloadHints.push(hint);\n\n              if (hint.byterange) {\n                if (!hint.byterange.hasOwnProperty('offset')) {\n                  // use last part byterange end or zero if not a part.\n                  hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n\n                  if (isPart) {\n                    lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                  }\n                }\n              }\n\n              var index = currentUri.preloadHints.length - 1;\n              this.warnOnMissingAttributes_(\"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex, entry.attributes, ['TYPE', 'URI']);\n\n              if (!hint.type) {\n                return;\n              } // search through all preload hints except for the current one for\n              // a duplicate type.\n\n\n              for (var i = 0; i < currentUri.preloadHints.length - 1; i++) {\n                var otherHint = currentUri.preloadHints[i];\n\n                if (!otherHint.type) {\n                  continue;\n                }\n\n                if (otherHint.type === hint.type) {\n                  this.trigger('warn', {\n                    message: \"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex + \" has the same TYPE \" + hint.type + \" as preload hint #\" + i\n                  });\n                }\n              }\n            },\n            'rendition-report': function renditionReport() {\n              var report = camelCaseKeys(entry.attributes);\n              this.manifest.renditionReports = this.manifest.renditionReports || [];\n              this.manifest.renditionReports.push(report);\n              var index = this.manifest.renditionReports.length - 1;\n              var required = ['LAST-MSN', 'URI'];\n\n              if (hasParts) {\n                required.push('LAST-PART');\n              }\n\n              this.warnOnMissingAttributes_(\"#EXT-X-RENDITION-REPORT #\" + index, entry.attributes, required);\n            },\n            'part-inf': function partInf() {\n              this.manifest.partInf = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\n\n              if (this.manifest.partInf.partTarget) {\n                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n              }\n\n              setHoldBack.call(this, this.manifest);\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n\n          if (_key) {\n            currentUri.key = _key;\n          }\n\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // reset the last byterange end as it needs to be 0 between parts\n\n\n          lastPartByterangeEnd = 0; // prepare for the next URI\n\n          currentUri = {};\n        },\n        comment: function comment() {// comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto.warnOnMissingAttributes_ = function warnOnMissingAttributes_(identifier, attributes, required) {\n    var missing = [];\n    required.forEach(function (key) {\n      if (!attributes.hasOwnProperty(key)) {\n        missing.push(key);\n      }\n    });\n\n    if (missing.length) {\n      this.trigger('warn', {\n        message: identifier + \" lacks required attribute(s): \" + missing.join(', ')\n      });\n    }\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n  ;\n\n  _proto.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  }\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n  ;\n\n  _proto.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n    this.trigger('end');\n  }\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n  ;\n\n  _proto.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n  ;\n\n  _proto.addTagMapper = function addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  };\n\n  return Parser;\n}(Stream);\n\nexport { LineStream, ParseStream, Parser };\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","BandwidthApproximator","debug","require","default","SMOOTH_INTERVAL","NumberWithTime","timeStamp","lastBytes","currentBytesSum","lastBandwidth","addBytes","bytes","push","shift","interval","Math","min","getBandwidth","length","maxBandwidth","bandwidth","getSmoothInterval","getMeasureInterval","HttpMediaManager","debug_1","FilteredEmitter","STEEmitter","settings","xhrRequests","Map","failedSegments","download","segment","downloadedPieces","isDownloading","cleanTimedOutFailedSegments","emit","segmentUrl","priority","skipSegmentBuilderPriority","url","buildSegmentUrl","requestUrl","xhr","XMLHttpRequest","open","responseType","range","setRequestHeader","undefined","httpUseRanges","bytesDownloaded","piece","byteLength","setupXhrEvents","xhrSetup","set","id","initialPriority","send","updatePriority","request","get","Error","abort","delete","has","isFailed","time","now","getActiveDownloads","getActiveDownloadsCount","size","destroy","forEach","clear","prevBytesLoaded","addEventListener","event","loaded","lengthComputable","total","async","status","segmentFailure","data","response","segmentData","Uint8Array","offset","buffer","segmentDownloadFinished","responseUrl","responseURL","segmentValidator","assign","error","httpFailedSegmentTimeout","candidates","performance","segmentUrlBuilder","HybridLoader","events_1","simple_peer_1","loader_interface_1","http_media_manager_1","p2p_media_manager_1","media_peer_1","bandwidth_approximator_1","segments_memory_storage_1","defaultSettings","cachedSegmentExpiration","cachedSegmentsCount","useP2P","consumeOnly","requiredSegmentsPriority","simultaneousHttpDownloads","httpDownloadProbability","httpDownloadProbabilityInterval","httpDownloadProbabilitySkipIfNoPeers","httpDownloadMaxPriority","httpDownloadInitialTimeout","httpDownloadInitialTimeoutPerSegment","simultaneousP2PDownloads","p2pDownloadMaxPriority","p2pSegmentDownloadTimeout","webRtcMaxMessageSize","trackerAnnounce","peerRequestsPerAnnounce","rtcConfig","config","debugSegments","segmentsQueue","bandwidthApproximator","httpDownloadInitialTimeoutTimestamp","createHttpManager","createP2PManager","P2PMediaManager","segmentsStorage","load","segments","streamSwarmId","initRandomDownloadIntervalIfNeeded","masterSwarmId","p2pManager","setStreamSwarmId","updateSegmentsMap","abortUnknownSegments","enabled","find","f","storageSegments","getSegmentsMap","processSegmentsQueue","cleanSegmentsStorage","sendSegmentsMapToAll","createSegmentsMap","getSegment","getSettings","getDetails","peerId","getPeerId","getBandwidthEstimate","httpRandomDownloadInterval","clearInterval","httpManager","processInitialSegmentTimeout","setTimeout","segmentsMap","httpAllowed","firstNotDownloadePriority","httpTimeout","scheduleNewProcessQueue","index","tryHTTP","i","segmentToAbort","getOverallSegmentsMap","MediaPeerSegmentStatus","Loaded","downloadRandomSegmentOverHttp","getPeers","pendingQueue","filter","s","random","floor","onSegmentStartLoad","method","Events","SegmentStartLoad","onPieceBytesDownloaded","PieceBytesDownloaded","onPieceBytesUploaded","PieceBytesUploaded","onSegmentLoaded","downloadBandwidth","storeSegment","SegmentLoaded","onSegmentError","details","SegmentError","onSegmentSize","SegmentSize","getStreamSwarmId","streamId","addSegmentToMap","segmentId","sequence","segmentsIdsAndStatuses","segmentsStatuses","storageSegment","values","LoadingByHttp","onPeerConnect","PeerConnect","peer","sendSegmentsMap","onPeerClose","PeerClose","onTrackerUpdate","incomplete","clean","queueSegment","setInterval","SegmentAbort","bufferedSegmentsCount","SegmentsMemoryStorage","on","EventEmitter","isSupported","window","RTCPeerConnection","prototype","createDataChannel","__createBinding","create","o","m","k","k2","desc","getOwnPropertyDescriptor","writable","configurable","enumerable","__exportStar","p","hasOwnProperty","call","version","MediaPeer","buffer_1","stringly_typed_event_emitter_1","MediaPeerCommands","DownloadingSegment","pieces","remoteAddress","downloadingSegmentId","downloadingSegment","timer","terminateSegmentRequest","onPeerError","receiveSegmentPiece","getJsonCommand","JSON","parse","TextDecoder","decode","_a","onPeerData","command","c","SegmentsMap","SegmentRequest","SegmentData","cancelResponseTimeoutTimer","SegmentAbsent","keys","swarmData","Array","segmentsIds","split","segmentStatus","sendCommand","write","stringify","getDownloadingSegmentId","sendSegmentData","bytesLeft","bytesToSend","Buffer","from","sendSegmentAbsent","requestSegment","runResponseTimeoutTimer","cancelSegmentRequest","CancelSegmentRequest","clearTimeout","client_1","sha1_1","PEER_ID_VERSION_STRING","replace","v","parseInt","slice","PEER_ID_VERSION_PREFIX","PeerSegmentRequest","trackerClient","peers","peerCandidates","peerSegmentRequests","pendingTrackerClient","toString","isDestroyed","infoHash","update","digest","createClient","clientOptions","announce","port","getAnnounceOpts","numwant","oldTrackerClient","onTrackerError","onTrackerWarning","onTrackerPeer","start","warning","trackerPeer","onPeerDataUpdated","onSegmentRequest","onSegmentAbsent","onSegmentTimeout","peerCandidatesById","peerSegmentRequest","swarmChange","stop","removeAllListeners","peerCandidateById","peerCandidate","overallSegmentsMap","indexOf","splice","key","description","PEER_ID_SYMBOLS","charAt","TextEncoder","encode","generatePeerId","ArrayBuffer","cache","lastAccessed","cacheItem","hasSegment","lockedSegmentsFilter","segmentsToDelete","remainingSegments","cachedSegment","countOverhead","sort","a","b","arguments","listener","args","byteRangeToString","compareByteRanges","getByteRange","context","rangeEnd","rangeStart","b1","b2","byteRange","end","Engine","p2p_media_loader_core_1","segment_manager_1","hlsjs_loader_1","loader","segmentManager","SegmentManager","map","eventKey","engine","callbacks","impl","getResponseHeader","HlsJsLoader","setLatestLoaderImpl","stats","getEngine","latestLoaderImpl","duration","setPlayingSegment","playheadPosition","setPlayingSegmentByCurrentTime","byte_range_1","aborted","retry","chunkCount","bwEstimate","loading","first","parsing","buffering","boundOnSegmentAbort","onSegmentAbort","bind","boundOnUpdateSegmentSize","onUpdateSegmentSize","boundOnUpdateLoaded","onUpdateLoaded","boundOnSegmentStartLoad","debugId","_config","updateStatsToStartLoading","type","result","loadPlaylist","successPlaylist","e","frag","loadSegment","content","successSegment","cleanup","console","warn","abortSegment","onAbort","onSuccess","onProgress","onError","off","isSegment","_type","initJwPlayer","initMediaElementJsPlayer","initVideoJsHlsJsPlugin","initVideoJsContribHlsJsPlayer","initFlowplayerHlsJsPlayer","initClapprPlayer","initHlsJsPlayer","player","initHlsJsEvents","_event","errorData","htmlMediaElement","media","el_","currentTime","abortCurrentRequest","playback","core","getCurrentPlayback","_hls","_p2pm_linitialized","hlsjs","hls","ready","options","tech_","options_","hlsjsConfig","videojs","Html5Hlsjs","addHook","videojsPlayer","mediaElement","hlsPlayer","iid","m3u8_parser_1","forwardSegmentCount","swarmId","assetsStorage","masterPlaylist","variantPlaylists","segmentRequest","playQueue","segmentByteRange","parser","Parser","playlist","Playlist","manifest","playlists","variantPlaylist","found","updateSegments","getMasterSwarmId","asset","getAsset","responseUri","loadContent","storeAsset","masterManifestUri","requestUri","log","processPlaylist","segmentLocation","getSegmentLocation","byteRangeString","next","done","requestRange","segmentSequence","mediaSequence","segmentIndex","promise","Promise","resolve","reject","loadSegments","urlIndex","findIndex","playPosition","currentSegmentPosition","getSegmentIndex","requestFirstSegment","playlistSegments","initialSequence","loadSegmentId","max","getSegmentAbsoluteUrl","uri","byterange","getSegmentId","settingsSwarmId","playlistUrl","URL","readyState","statusText","playlistRequestUrl","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","Stream","listeners","_proto","trigger","_length","_i","apply","dispose","pipe","destination","_extends","target","source","decodeB64ToUint8Array","b64Text","decodedString","array","charCodeAt","LineStream","_Stream","_this","nextNewline","substring","TAB","String","fromCharCode","parseByterange","byterangeString","match","exec","parseAttributes","attributes","attr","attrs","RegExp","ParseStream","customParsers","tagMappers","line","_this2","trim","reduce","acc","mapper","mappedLine","concat","newLine","tagType","parseFloat","title","number","playlistType","allowed","test","URI","BYTERANGE","RESOLUTION","resolution","width","height","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","toLowerCase","Uint32Array","PRECISE","subkey","text","addParser","_ref","_this3","expression","customType","dataParser","addTagMapper","_ref2","camelCaseKeys","str","toUpperCase","setHoldBack","serverControl","targetDuration","partTargetDuration","tag","hb","phb","minTargetDuration","minPartDuration","message","lineStream","parseStream","currentMap","_key","self","ReferenceError","_assertThisInitialized","uris","currentUri","hasParts","noop","defaultMediaGroups","currentTimeline","allowCache","discontinuityStarts","lastByterangeEnd","lastPartByterangeEnd","parts","preloadHints","timeline","preloadSegment","entry","mediaGroup","rendition","endlist","endList","inf","discontinuitySequence","METHOD","KEYFORMAT","contentProtection","KEYID","schemeIdUri","keyId","pssh","iv","isFinite","mediaGroups","TYPE","NAME","mediaGroupType","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","language","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","discontinuity","targetduration","isNaN","timeOffset","precise","cueOut","cueOutCont","cueIn","skip","warnOnMissingAttributes_","part","renditionReports","r","canBlockReload","canSkipDateranges","hint","isPart","otherHint","report","required","partInf","partTarget","comment","custom","identifier","missing","join","chunk","Hash","blockSize","finalSize","_block","alloc","_finalSize","_blockSize","_len","enc","block","accum","assigned","remainder","_update","rem","fill","bits","writeUInt32BE","lowBits","hash","_hash","module","inherits","K","W","Sha1","init","_w","rotl5","num","rotl30","ft","d","_b","_c","_d","_e","M","readInt32BE","j","t","H","allocUnsafe","writeInt32BE"],"sourceRoot":""}