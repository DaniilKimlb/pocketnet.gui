{"version":3,"file":"508.chunk.js?v=3983","mappings":"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","sources":["webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/hls-plugin.ts","webpack://peertube-client/./src/assets/player/shared/p2p-media-loader/p2p-media-loader-plugin.ts"],"sourcesContent":["// Thanks https://github.com/streamroot/videojs-hlsjs-plugin\r\n// We duplicated this plugin to choose the hls.js version we want, because streamroot only provide a bundled file\r\n\r\nimport Hlsjs, { ErrorData, HlsConfig, Level, LevelSwitchingData, ManifestParsedData } from 'hls.js'\r\nimport videojs from 'video.js'\r\nimport { logger } from '@root-helpers/logger'\r\nimport { HlsjsConfigHandlerOptions, PeerTubeResolution, VideoJSTechHLS } from '../../types'\r\n\r\ntype ErrorCounts = {\r\n  [ type: string ]: number\r\n}\r\n\r\ntype Metadata = {\r\n  levels: Level[]\r\n}\r\n\r\ntype HookFn = (player: videojs.Player, hljs: Hlsjs) => void\r\n\r\nconst registerSourceHandler = function (vjs: typeof videojs) {\r\n  if (!Hlsjs.isSupported()) {\r\n    logger.warn('Hls.js is not supported in this browser!')\r\n    return\r\n  }\r\n\r\n  const html5 = vjs.getTech('Html5')\r\n\r\n  if (!html5) {\r\n    logger.error('No Hml5 tech found in videojs')\r\n    return\r\n  }\r\n\r\n  // FIXME: typings\r\n  (html5 as any).registerSourceHandler({\r\n    canHandleSource: function (source: videojs.Tech.SourceObject) {\r\n      const hlsTypeRE = /^application\\/x-mpegURL|application\\/vnd\\.apple\\.mpegurl$/i\r\n      const hlsExtRE = /\\.m3u8/i\r\n\r\n      if (hlsTypeRE.test(source.type)) return 'probably'\r\n      if (hlsExtRE.test(source.src)) return 'maybe'\r\n\r\n      return ''\r\n    },\r\n\r\n    handleSource: function (source: videojs.Tech.SourceObject, tech: VideoJSTechHLS) {\r\n      if (tech.hlsProvider) {\r\n        tech.hlsProvider.dispose()\r\n      }\r\n\r\n      tech.hlsProvider = new Html5Hlsjs(vjs, source, tech)\r\n\r\n      return tech.hlsProvider\r\n    }\r\n  }, 0);\r\n\r\n  // FIXME: typings\r\n  (vjs as any).Html5Hlsjs = Html5Hlsjs\r\n}\r\n\r\nfunction hlsjsConfigHandler (this: videojs.Player, options: HlsjsConfigHandlerOptions) {\r\n  const player = this\r\n\r\n  if (!options) return\r\n\r\n  if (!player.srOptions_) {\r\n    player.srOptions_ = {}\r\n  }\r\n\r\n  if (!player.srOptions_.hlsjsConfig) {\r\n    player.srOptions_.hlsjsConfig = options.hlsjsConfig\r\n  }\r\n\r\n  \r\n\r\n  if (options.levelLabelHandler && !player.srOptions_.levelLabelHandler) {\r\n    player.srOptions_.levelLabelHandler = options.levelLabelHandler\r\n  }\r\n}\r\n\r\nconst registerConfigPlugin = function (vjs: typeof videojs) {\r\n  // Used in Brightcove since we don't pass options directly there\r\n  const registerVjsPlugin = vjs.registerPlugin || vjs.plugin\r\n  registerVjsPlugin('hlsjs', hlsjsConfigHandler)\r\n}\r\n\r\nclass Html5Hlsjs {\r\n  private static readonly hooks: { [id: string]: HookFn[] } = {}\r\n\r\n  private readonly videoElement: HTMLVideoElement\r\n  private readonly errorCounts: ErrorCounts = {}\r\n  private readonly player: videojs.Player\r\n  private readonly tech: videojs.Tech\r\n  private readonly source: videojs.Tech.SourceObject\r\n  private readonly vjs: typeof videojs\r\n\r\n  private maxNetworkErrorRecovery = 5\r\n\r\n  private hls: Hlsjs\r\n  private hlsjsConfig: Partial<HlsConfig & { cueHandler: any }> = null\r\n\r\n  private _duration: number = null\r\n  private metadata: Metadata = null\r\n  private isLive: boolean = null\r\n  private dvrDuration: number = null\r\n  private edgeMargin: number = null\r\n\r\n  private handlers: { [ id in 'play' ]: EventListener } = {\r\n    play: null\r\n  }\r\n\r\n  constructor (vjs: typeof videojs, source: videojs.Tech.SourceObject, tech: videojs.Tech) {\r\n    this.vjs = vjs\r\n    this.source = source\r\n\r\n    this.tech = tech;\r\n    (this.tech as any).name_ = 'Hlsjs'\r\n\r\n    this.videoElement = tech.el() as HTMLVideoElement\r\n    this.player = vjs((tech.options_ as any).playerId)\r\n\r\n    this.videoElement.addEventListener('error', event => {\r\n      let errorTxt: string\r\n      const mediaError = ((event.currentTarget || event.target) as HTMLVideoElement).error\r\n\r\n      if (!mediaError) return\r\n\r\n      logger.info(mediaError)\r\n      switch (mediaError.code) {\r\n        case mediaError.MEDIA_ERR_ABORTED:\r\n          errorTxt = 'You aborted the video playback'\r\n          break\r\n        case mediaError.MEDIA_ERR_DECODE:\r\n          errorTxt = 'The video playback was aborted due to a corruption problem or because the video used features ' +\r\n                     'your browser did not support'\r\n          this._handleMediaError(mediaError)\r\n          break\r\n        case mediaError.MEDIA_ERR_NETWORK:\r\n          errorTxt = 'A network error caused the video download to fail part-way'\r\n          break\r\n        case mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\r\n          errorTxt = 'The video could not be loaded, either because the server or network failed or because the format is not supported'\r\n          break\r\n\r\n        default:\r\n          errorTxt = mediaError.message\r\n      }\r\n\r\n      logger.error(`MEDIA_ERROR: ${errorTxt}`)\r\n    })\r\n\r\n    this.initialize()\r\n  }\r\n\r\n  duration () {\r\n    if (this._duration === Infinity) return Infinity\r\n    if (!isNaN(this.videoElement.duration)) return this.videoElement.duration\r\n\r\n    return this._duration || 0\r\n  }\r\n\r\n  seekable () {\r\n    if (this.hls.media) {\r\n      if (!this.isLive) {\r\n        return this.vjs.createTimeRanges(0, this.hls.media.duration)\r\n      }\r\n\r\n      // Video.js doesn't seem to like floating point timeranges\r\n      const startTime = Math.round(this.hls.media.duration - this.dvrDuration)\r\n      const endTime = Math.round(this.hls.media.duration - this.edgeMargin)\r\n\r\n      return this.vjs.createTimeRanges(startTime, endTime)\r\n    }\r\n\r\n    return this.vjs.createTimeRanges()\r\n  }\r\n\r\n  // See comment for `initialize` method.\r\n  dispose () {\r\n    this.videoElement.removeEventListener('play', this.handlers.play)\r\n\r\n    // FIXME: https://github.com/video-dev/hls.js/issues/4092\r\n    const untypedHLS = this.hls as any\r\n    untypedHLS.log = untypedHLS.warn = () => {\r\n      // empty\r\n    }\r\n\r\n    this.hls.destroy()\r\n  }\r\n\r\n  static addHook (type: string, callback: HookFn) {\r\n    Html5Hlsjs.hooks[type] = this.hooks[type] || []\r\n    Html5Hlsjs.hooks[type].push(callback)\r\n  }\r\n\r\n  static removeHook (type: string, callback: HookFn) {\r\n    if (Html5Hlsjs.hooks[type] === undefined) return false\r\n\r\n    const index = Html5Hlsjs.hooks[type].indexOf(callback)\r\n    if (index === -1) return false\r\n\r\n    Html5Hlsjs.hooks[type].splice(index, 1)\r\n\r\n    return true\r\n  }\r\n\r\n  private _executeHooksFor (type: string) {\r\n    if (Html5Hlsjs.hooks[type] === undefined) {\r\n      return\r\n    }\r\n\r\n    // ES3 and IE < 9\r\n    for (let i = 0; i < Html5Hlsjs.hooks[type].length; i++) {\r\n      Html5Hlsjs.hooks[type][i](this.player, this.hls)\r\n    }\r\n  }\r\n\r\n  private _handleMediaError (error: any) {\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] === 1) {\r\n      logger.info('trying to recover media error')\r\n      this.hls.recoverMediaError()\r\n      return\r\n    }\r\n\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] === 2) {\r\n      logger.info('2nd try to recover media error (by swapping audio codec')\r\n      this.hls.swapAudioCodec()\r\n      this.hls.recoverMediaError()\r\n      return\r\n    }\r\n\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.MEDIA_ERROR] > 2) {\r\n      logger.info('bubbling media error up to VIDEOJS')\r\n      this.hls.destroy()\r\n      this.tech.error = () => error\r\n      this.tech.trigger('error')\r\n    }\r\n  }\r\n\r\n  private _handleNetworkError (error: any) {\r\n    if (this.errorCounts[Hlsjs.ErrorTypes.NETWORK_ERROR] <= this.maxNetworkErrorRecovery) {\r\n      logger.info('trying to recover network error')\r\n\r\n      // Wait 1 second and retry\r\n      setTimeout(() => this.hls.startLoad(), 1000)\r\n\r\n      // Reset error count on success\r\n      this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\r\n        this.errorCounts[Hlsjs.ErrorTypes.NETWORK_ERROR] = 0\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    logger.info('bubbling network error up to VIDEOJS')\r\n    this.hls.destroy()\r\n    this.tech.error = () => error\r\n    this.tech.trigger('error')\r\n  }\r\n\r\n  private _onError (_event: any, data: ErrorData) {\r\n    const error: { message: string, code?: number } = {\r\n      message: `HLS.js error: ${data.type} - fatal: ${data.fatal} - ${data.details}`\r\n    }\r\n\r\n    // increment/set error count\r\n    if (this.errorCounts[data.type]) this.errorCounts[data.type] += 1\r\n    else this.errorCounts[data.type] = 1\r\n\r\n    if (data.fatal) logger.warn(error.message)\r\n    else logger.error(error.message, { data })\r\n\r\n    if (data.type === Hlsjs.ErrorTypes.NETWORK_ERROR) {\r\n      error.code = 2\r\n      this._handleNetworkError(error)\r\n    } else if (data.fatal && data.type === Hlsjs.ErrorTypes.MEDIA_ERROR && data.details !== 'manifestIncompatibleCodecsError') {\r\n      error.code = 3\r\n      this._handleMediaError(error)\r\n    } else if (data.fatal) {\r\n      this.hls.destroy()\r\n      logger.info('bubbling error up to VIDEOJS')\r\n      this.tech.error = () => error as any\r\n      this.tech.trigger('error')\r\n    }\r\n  }\r\n\r\n  private buildLevelLabel (level: Level) {\r\n    if (this.player.srOptions_.levelLabelHandler) {\r\n      return this.player.srOptions_.levelLabelHandler(level as any)\r\n    }\r\n\r\n    if (level.height) return level.height + 'p'\r\n    if (level.width) return Math.round(level.width * 9 / 16) + 'p'\r\n    if (level.bitrate) return (level.bitrate / 1000) + 'kbps'\r\n\r\n    return '0'\r\n  }\r\n\r\n  private _notifyVideoQualities () {\r\n    if (!this.metadata) return\r\n\r\n    const resolutions: PeerTubeResolution[] = []\r\n\r\n    this.metadata.levels.forEach((level, index) => {\r\n      resolutions.push({\r\n        id: index,\r\n        height: level.height,\r\n        width: level.width,\r\n        bitrate: level.bitrate,\r\n        label: this.buildLevelLabel(level),\r\n        selected: level.id === this.hls.manualLevel,\r\n\r\n        selectCallback: () => {\r\n          this.hls.currentLevel = index\r\n        }\r\n      })\r\n    })\r\n\r\n    resolutions.push({\r\n      id: -1,\r\n      label: this.player.localize('Auto'),\r\n      selected: true,\r\n      selectCallback: () => this.hls.currentLevel = -1\r\n    })\r\n\r\n    this.player.peertubeResolutions().add(resolutions)\r\n  }\r\n\r\n  private _startLoad () {\r\n    this.hls.startLoad(-1)\r\n    this.videoElement.removeEventListener('play', this.handlers.play)\r\n  }\r\n\r\n  private _oneLevelObjClone (obj: { [ id: string ]: any }) {\r\n    const result = {}\r\n    const objKeys = Object.keys(obj)\r\n    for (let i = 0; i < objKeys.length; i++) {\r\n      result[objKeys[i]] = obj[objKeys[i]]\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  private _onMetaData (_event: any, data: ManifestParsedData) {\r\n    // This could arrive before 'loadedqualitydata' handlers is registered, remember it so we can raise it later\r\n    this.metadata = data\r\n    this._notifyVideoQualities()\r\n  }\r\n\r\n  private _initHlsjs () {\r\n    const techOptions = this.tech.options_ as HlsjsConfigHandlerOptions\r\n    const srOptions_ = this.player.srOptions_\r\n\r\n    const hlsjsConfigRef = srOptions_?.hlsjsConfig || techOptions.hlsjsConfig\r\n    // Hls.js will write to the reference thus change the object for later streams\r\n    this.hlsjsConfig = hlsjsConfigRef ? this._oneLevelObjClone(hlsjsConfigRef) : {}\r\n\r\n    if ([ '', 'auto' ].includes(this.videoElement.preload) && !this.videoElement.autoplay && this.hlsjsConfig.autoStartLoad === undefined) {\r\n      this.hlsjsConfig.autoStartLoad = false\r\n    }\r\n\r\n    // If the user explicitly sets autoStartLoad to false, we're not going to enter the if block above\r\n    // That's why we have a separate if block here to set the 'play' listener\r\n    if (this.hlsjsConfig.autoStartLoad === false) {\r\n      this.handlers.play = this._startLoad.bind(this)\r\n      this.videoElement.addEventListener('play', this.handlers.play)\r\n    }\r\n\r\n    this.hls = new Hlsjs(this.hlsjsConfig)\r\n\r\n    this._executeHooksFor('beforeinitialize')\r\n\r\n    this.hls.on(Hlsjs.Events.ERROR, (event, data) => this._onError(event, data))\r\n    this.hls.on(Hlsjs.Events.MANIFEST_PARSED, (event, data) => this._onMetaData(event, data))\r\n    this.hls.on(Hlsjs.Events.LEVEL_LOADED, (event, data) => {\r\n      // The DVR plugin will auto seek to \"live edge\" on start up\r\n      if (this.hlsjsConfig.liveSyncDuration) {\r\n        this.edgeMargin = this.hlsjsConfig.liveSyncDuration\r\n      } else if (this.hlsjsConfig.liveSyncDurationCount) {\r\n        this.edgeMargin = this.hlsjsConfig.liveSyncDurationCount * data.details.targetduration\r\n      }\r\n\r\n      this.isLive = data.details.live\r\n      this.dvrDuration = data.details.totalduration\r\n\r\n      this._duration = this.isLive ? Infinity : data.details.totalduration\r\n\r\n      // Increase network error recovery for lives since they can be broken (server restart, stream interruption etc)\r\n      if (this.isLive) this.maxNetworkErrorRecovery = 300\r\n    })\r\n\r\n    this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\r\n      // Emit custom 'loadedmetadata' event for parity with `videojs-contrib-hls`\r\n      // Ref: https://github.com/videojs/videojs-contrib-hls#loadedmetadata\r\n      this.tech.trigger('loadedmetadata')\r\n    })\r\n\r\n    this.hls.on(Hlsjs.Events.LEVEL_SWITCHING, (_e, data: LevelSwitchingData) => {\r\n      const resolutionId = this.hls.autoLevelEnabled\r\n        ? -1\r\n        : data.level\r\n\r\n      const autoResolutionChosenId = this.hls.autoLevelEnabled\r\n        ? data.level\r\n        : -1\r\n\r\n      this.player.peertubeResolutions().select({ id: resolutionId, autoResolutionChosenId, byEngine: true })\r\n    })\r\n\r\n    this.hls.attachMedia(this.videoElement)\r\n\r\n    this.hls.loadSource(this.source.src)\r\n  }\r\n\r\n  private initialize () {\r\n    this._initHlsjs()\r\n  }\r\n}\r\n\r\nexport {\r\n  Html5Hlsjs,\r\n  registerSourceHandler,\r\n  registerConfigPlugin\r\n}\r\n","import Hlsjs from 'hls.js'\r\nimport videojs from 'video.js'\r\nimport { Events, Segment } from '@peertube/p2p-media-loader-core'\r\nimport { Engine, initHlsJsPlayer, initVideoJsContribHlsJsPlayer } from '@peertube/p2p-media-loader-hlsjs'\r\nimport { timeToInt } from '@shared/core-utils'\r\nimport { P2PMediaLoaderPluginOptions, PlayerNetworkInfo } from '../../types'\r\nimport { registerConfigPlugin, registerSourceHandler } from './hls-plugin'\r\nimport { logger } from '@root-helpers/logger'\r\n\r\nregisterConfigPlugin(videojs)\r\nregisterSourceHandler(videojs)\r\n\r\nconst Plugin = videojs.getPlugin('plugin')\r\nclass P2pMediaLoaderPlugin extends Plugin {\r\n\r\n  private readonly CONSTANTS = {\r\n    INFO_SCHEDULER: 1000 // Don't change this\r\n  }\r\n  private readonly options: P2PMediaLoaderPluginOptions\r\n\r\n  private hlsjs: Hlsjs\r\n  private p2pEngine: Engine\r\n  private statsP2PBytes = {\r\n    pendingDownload: [] as number[],\r\n    pendingUpload: [] as number[],\r\n    numPeers: 0,\r\n    totalDownload: 0,\r\n    totalUpload: 0\r\n  }\r\n  private statsHTTPBytes = {\r\n    pendingDownload: [] as number[],\r\n    pendingUpload: [] as number[],\r\n    totalDownload: 0,\r\n    totalUpload: 0\r\n  }\r\n  private startTime: number\r\n\r\n  private networkInfoInterval: any\r\n\r\n  constructor (player: videojs.Player, options?: P2PMediaLoaderPluginOptions) {\r\n    super(player)\r\n\r\n    this.options = options\r\n\r\n    // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\r\n    if (!(videojs as any).Html5Hlsjs) {\r\n      logger.warn('HLS.js does not seem to be supported. Try to fallback to built in HLS.')\r\n\r\n      if (!player.canPlayType('application/vnd.apple.mpegurl')) {\r\n        const message = 'Cannot fallback to built-in HLS'\r\n        logger.warn(message)\r\n\r\n        player.ready(() => player.trigger('error', new Error(message)))\r\n        return\r\n      }\r\n    } else {\r\n      // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\r\n      (videojs as any).Html5Hlsjs.addHook('beforeinitialize', (videojsPlayer: any, hlsjs: any) => {\r\n        this.hlsjs = hlsjs\r\n      })\r\n\r\n      initVideoJsContribHlsJsPlayer(player)\r\n    }\r\n\r\n    this.startTime = timeToInt(options.startTime)\r\n\r\n    player.src({\r\n      type: options.type,\r\n      src: options.src\r\n    })\r\n\r\n    player.ready(() => {\r\n      this.initializeCore()\r\n\r\n      if ((videojs as any).Html5Hlsjs) {\r\n        this.initializePlugin()\r\n      }\r\n    })\r\n  }\r\n\r\n  dispose () {\r\n    if (this.hlsjs) this.hlsjs.destroy()\r\n    if (this.p2pEngine) this.p2pEngine.destroy()\r\n\r\n    clearInterval(this.networkInfoInterval)\r\n  }\r\n\r\n  getCurrentLevel () {\r\n    return this.hlsjs.levels[this.hlsjs.currentLevel]\r\n  }\r\n\r\n  getLiveLatency () {\r\n    return Math.round(this.hlsjs.latency)\r\n  }\r\n\r\n  getHLSJS () {\r\n    return this.hlsjs\r\n  }\r\n\r\n  private initializeCore () {\r\n    this.player.one('play', () => {\r\n      this.player.addClass('vjs-has-big-play-button-clicked')\r\n    })\r\n\r\n    this.player.one('canplay', () => {\r\n      if (this.startTime) {\r\n        this.player.currentTime(this.startTime)\r\n      }\r\n    })\r\n  }\r\n\r\n  private initializePlugin () {\r\n    initHlsJsPlayer(this.hlsjs)\r\n\r\n    this.p2pEngine = this.options.loader.getEngine()\r\n\r\n    this.p2pEngine.on(Events.SegmentError, (segment: Segment, err) => {\r\n      logger.error(`Segment ${segment.id} error.`, err)\r\n\r\n      this.options.redundancyUrlManager.removeBySegmentUrl(segment.requestUrl)\r\n    })\r\n\r\n    this.statsP2PBytes.numPeers = 1 + this.options.redundancyUrlManager.countBaseUrls()\r\n\r\n    this.runStats()\r\n  }\r\n\r\n  private runStats () {\r\n    this.p2pEngine.on(Events.PieceBytesDownloaded, (method: string, _segment, bytes: number) => {\r\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\r\n\r\n      elem.pendingDownload.push(bytes)\r\n      elem.totalDownload += bytes\r\n    })\r\n\r\n    this.p2pEngine.on(Events.PieceBytesUploaded, (method: string, _segment, bytes: number) => {\r\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\r\n\r\n      elem.pendingUpload.push(bytes)\r\n      elem.totalUpload += bytes\r\n    })\r\n\r\n    this.p2pEngine.on(Events.PeerConnect, () => this.statsP2PBytes.numPeers++)\r\n    this.p2pEngine.on(Events.PeerClose, () => this.statsP2PBytes.numPeers--)\r\n\r\n    this.networkInfoInterval = setInterval(() => {\r\n      const p2pDownloadSpeed = this.arraySum(this.statsP2PBytes.pendingDownload)\r\n      const p2pUploadSpeed = this.arraySum(this.statsP2PBytes.pendingUpload)\r\n\r\n      const httpDownloadSpeed = this.arraySum(this.statsHTTPBytes.pendingDownload)\r\n      const httpUploadSpeed = this.arraySum(this.statsHTTPBytes.pendingUpload)\r\n\r\n      this.statsP2PBytes.pendingDownload = []\r\n      this.statsP2PBytes.pendingUpload = []\r\n      this.statsHTTPBytes.pendingDownload = []\r\n      this.statsHTTPBytes.pendingUpload = []\r\n\r\n      return this.player.trigger('p2pInfo', {\r\n        source: 'p2p-media-loader',\r\n        http: {\r\n          downloadSpeed: httpDownloadSpeed,\r\n          uploadSpeed: httpUploadSpeed,\r\n          downloaded: this.statsHTTPBytes.totalDownload,\r\n          uploaded: this.statsHTTPBytes.totalUpload\r\n        },\r\n        p2p: {\r\n          downloadSpeed: p2pDownloadSpeed,\r\n          uploadSpeed: p2pUploadSpeed,\r\n          numPeers: this.statsP2PBytes.numPeers,\r\n          downloaded: this.statsP2PBytes.totalDownload,\r\n          uploaded: this.statsP2PBytes.totalUpload\r\n        },\r\n        bandwidthEstimate: (this.hlsjs as any).bandwidthEstimate / 8\r\n      } as PlayerNetworkInfo)\r\n    }, this.CONSTANTS.INFO_SCHEDULER)\r\n  }\r\n\r\n  private arraySum (data: number[]) {\r\n    return data.reduce((a: number, b: number) => a + b, 0)\r\n  }\r\n}\r\n\r\nvideojs.registerPlugin('p2pMediaLoader', P2pMediaLoaderPlugin)\r\nexport { P2pMediaLoaderPlugin }\r\n"],"names":["vjs","Html5Hlsjs","constructor","source","tech","errorCounts","maxNetworkErrorRecovery","hlsjsConfig","_duration","metadata","isLive","dvrDuration","edgeMargin","handlers","play","this","name_","videoElement","el","player","options_","playerId","addEventListener","event","errorTxt","mediaError","currentTarget","target","error","logger","code","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","_handleMediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","message","initialize","duration","Infinity","isNaN","seekable","hls","media","createTimeRanges","startTime","Math","round","endTime","dispose","removeEventListener","untypedHLS","log","warn","destroy","static","type","callback","hooks","push","undefined","index","indexOf","splice","_executeHooksFor","i","length","recoverMediaError","swapAudioCodec","trigger","_handleNetworkError","setTimeout","startLoad","once","_onError","_event","data","fatal","details","buildLevelLabel","level","srOptions_","levelLabelHandler","height","width","bitrate","_notifyVideoQualities","resolutions","levels","forEach","id","label","selected","manualLevel","selectCallback","currentLevel","localize","peertubeResolutions","add","_startLoad","_oneLevelObjClone","obj","result","objKeys","Object","keys","_onMetaData","_initHlsjs","hlsjsConfigRef","includes","preload","autoplay","autoStartLoad","bind","on","liveSyncDuration","liveSyncDurationCount","targetduration","live","totalduration","_e","resolutionId","autoLevelEnabled","autoResolutionChosenId","select","byEngine","attachMedia","loadSource","src","registerPlugin","plugin","options","html5","getTech","registerSourceHandler","canHandleSource","test","handleSource","hlsProvider","Plugin","P2pMediaLoaderPlugin","super","CONSTANTS","INFO_SCHEDULER","statsP2PBytes","pendingDownload","pendingUpload","numPeers","totalDownload","totalUpload","statsHTTPBytes","videojsPlayer","hlsjs","initVideoJsContribHlsJsPlayer","canPlayType","ready","Error","initializeCore","initializePlugin","p2pEngine","clearInterval","networkInfoInterval","getCurrentLevel","getLiveLatency","latency","getHLSJS","one","addClass","currentTime","initHlsJsPlayer","loader","getEngine","Events","segment","err","redundancyUrlManager","removeBySegmentUrl","requestUrl","countBaseUrls","runStats","method","_segment","bytes","elem","setInterval","p2pDownloadSpeed","arraySum","p2pUploadSpeed","httpDownloadSpeed","httpUploadSpeed","http","downloadSpeed","uploadSpeed","downloaded","uploaded","p2p","bandwidthEstimate","reduce","a","b"],"sourceRoot":""}